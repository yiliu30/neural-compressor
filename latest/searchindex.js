Search.setIndex({"docnames": ["autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/common/base_config/index", "autoapi/neural_compressor/common/base_tuning/index", "autoapi/neural_compressor/common/index", "autoapi/neural_compressor/common/tuning_param/index", "autoapi/neural_compressor/common/utils/constants/index", "autoapi/neural_compressor/common/utils/index", "autoapi/neural_compressor/common/utils/logger/index", "autoapi/neural_compressor/common/utils/save_load/index", "autoapi/neural_compressor/common/utils/utility/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/export/index", "autoapi/neural_compressor/utils/export/qlinear2qdq/index", "autoapi/neural_compressor/utils/export/tf2onnx/index", "autoapi/neural_compressor/utils/export/torch2onnx/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/3x/PT_DynamicQuant", "docs/3x/PT_MXQuant", "docs/3x/PT_MixedPrecision", "docs/3x/PT_SmoothQuant", "docs/3x/PT_StaticQuant", "docs/3x/PT_WeightOnlyQuant", "docs/3x/PyTorch", "docs/3x/TF_Quant", "docs/3x/TF_SQ", "docs/3x/TensorFlow", "docs/3x/autotune", "docs/3x/benchmark", "docs/3x/client_quant", "docs/3x/design", "docs/3x/get_started", "docs/3x/llm_recipes", "docs/3x/quantization", "docs/build_docs/source/index", "docs/source/2x_user_guide", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/coding_style", "docs/source/dataloader", "docs/source/design", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/llm_recipes", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/mx_quantization", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/quantization", "docs/source/quantization_layer_wise", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/common/base_config/index.rst", "autoapi/neural_compressor/common/base_tuning/index.rst", "autoapi/neural_compressor/common/index.rst", "autoapi/neural_compressor/common/tuning_param/index.rst", "autoapi/neural_compressor/common/utils/constants/index.rst", "autoapi/neural_compressor/common/utils/index.rst", "autoapi/neural_compressor/common/utils/logger/index.rst", "autoapi/neural_compressor/common/utils/save_load/index.rst", "autoapi/neural_compressor/common/utils/utility/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/export/index.rst", "autoapi/neural_compressor/utils/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/utils/export/tf2onnx/index.rst", "autoapi/neural_compressor/utils/export/torch2onnx/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/3x/PT_DynamicQuant.md", "docs/3x/PT_MXQuant.md", "docs/3x/PT_MixedPrecision.md", "docs/3x/PT_SmoothQuant.md", "docs/3x/PT_StaticQuant.md", "docs/3x/PT_WeightOnlyQuant.md", "docs/3x/PyTorch.md", "docs/3x/TF_Quant.md", "docs/3x/TF_SQ.md", "docs/3x/TensorFlow.md", "docs/3x/autotune.md", "docs/3x/benchmark.md", "docs/3x/client_quant.md", "docs/3x/design.md", "docs/3x/get_started.md", "docs/3x/llm_recipes.md", "docs/3x/quantization.md", "docs/build_docs/source/index.rst", "docs/source/2x_user_guide.md", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/coding_style.md", "docs/source/dataloader.md", "docs/source/design.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/llm_recipes.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/mx_quantization.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/quantization.md", "docs/source/quantization_layer_wise.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["neural_compressor.algorithm.algorithm", "neural_compressor.algorithm.fast_bias_correction", "neural_compressor.algorithm", "neural_compressor.algorithm.smooth_quant", "neural_compressor.algorithm.weight_correction", "neural_compressor.benchmark", "neural_compressor.common.base_config", "neural_compressor.common.base_tuning", "neural_compressor.common", "neural_compressor.common.tuning_param", "neural_compressor.common.utils.constants", "neural_compressor.common.utils", "neural_compressor.common.utils.logger", "neural_compressor.common.utils.save_load", "neural_compressor.common.utils.utility", "neural_compressor.config", "neural_compressor.contrib", "neural_compressor.contrib.strategy", "neural_compressor.contrib.strategy.sigopt", "neural_compressor.contrib.strategy.tpe", "neural_compressor.data.datasets.bert_dataset", "neural_compressor.data.datasets.coco_dataset", "neural_compressor.data.datasets.dataset", "neural_compressor.data.datasets.dummy_dataset", "neural_compressor.data.datasets.dummy_dataset_v2", "neural_compressor.data.datasets.imagenet_dataset", "neural_compressor.data.datasets", "neural_compressor.data.datasets.style_transfer_dataset", "neural_compressor.data.filters.coco_filter", "neural_compressor.data.filters.filter", "neural_compressor.data.filters", "neural_compressor.data", "neural_compressor.data.transforms.imagenet_transform", "neural_compressor.data.transforms", "neural_compressor.data.transforms.postprocess", "neural_compressor.data.transforms.tokenization", "neural_compressor.data.transforms.transform", "neural_compressor", "neural_compressor.metric.bleu", "neural_compressor.metric.bleu_util", "neural_compressor.metric.coco_label_map", "neural_compressor.metric.coco_tools", "neural_compressor.metric.evaluate_squad", "neural_compressor.metric.f1", "neural_compressor.metric", "neural_compressor.metric.metric", "neural_compressor.mix_precision", "neural_compressor.model.base_model", "neural_compressor.model", "neural_compressor.model.keras_model", "neural_compressor.model.model", "neural_compressor.model.mxnet_model", "neural_compressor.model.nets_factory", "neural_compressor.model.onnx_model", "neural_compressor.model.tensorflow_model", "neural_compressor.model.torch_model", "neural_compressor.objective", "neural_compressor.profiling", "neural_compressor.quantization", "neural_compressor.strategy.auto", "neural_compressor.strategy.auto_mixed_precision", "neural_compressor.strategy.basic", "neural_compressor.strategy.bayesian", "neural_compressor.strategy.conservative", "neural_compressor.strategy.exhaustive", "neural_compressor.strategy.hawq_v2", "neural_compressor.strategy", "neural_compressor.strategy.mse", "neural_compressor.strategy.mse_v2", "neural_compressor.strategy.random", "neural_compressor.strategy.strategy", "neural_compressor.strategy.utils.constant", "neural_compressor.strategy.utils", "neural_compressor.strategy.utils.tuning_sampler", "neural_compressor.strategy.utils.tuning_space", "neural_compressor.strategy.utils.tuning_structs", "neural_compressor.strategy.utils.utility", "neural_compressor.training", "neural_compressor.utils.collect_layer_histogram", "neural_compressor.utils.constant", "neural_compressor.utils.create_obj_from_config", "neural_compressor.utils.export", "neural_compressor.utils.export.qlinear2qdq", "neural_compressor.utils.export.tf2onnx", "neural_compressor.utils.export.torch2onnx", "neural_compressor.utils", "neural_compressor.utils.kl_divergence", "neural_compressor.utils.load_huggingface", "neural_compressor.utils.logger", "neural_compressor.utils.options", "neural_compressor.utils.pytorch", "neural_compressor.utils.utility", "neural_compressor.utils.weights_details", "neural_compressor.version", "Dynamic Quantization", "Microscaling Quantization", "PyTorch Mixed Precision", "PyTorch Smooth Quantization", "PyTorch Static Quantization", "PyTorch Weight Only Quantization", "Torch", "TensorFlow Quantization", "Smooth Quant", "TensorFlow", "AutoTune", "Benchmark", "Quantization on Client", "Design", "Getting Started", "&lt;no title&gt;", "Quantization", "Intel\u00ae Neural Compressor Documentation", "2.X API User Guide", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "INC Coding Conventions", "DataLoader", "Design", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "LLMs Quantization Recipes", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Microscaling Quantization", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (82)", "Quantization", "Layer Wise Quantization (LWQ)", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization (WOQ)", "Release", "SigOpt Strategy", "Smooth Quant", "Transform", "Tuning Strategies", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"regist": [0, 6, 22, 29, 36, 45, 56, 70, 76, 118, 137, 141, 152, 153, 157, 167, 169], "algorithm_registri": 0, "algorithm_typ": 0, "locat": [0, 36, 98, 103, 141, 161, 165, 168], "sourc": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 115, 117, 150, 153, 160], "decor": [0, 6, 14, 36, 45, 56, 70, 91, 115, 118, 169], "all": [0, 2, 5, 6, 10, 15, 22, 29, 36, 38, 41, 43, 45, 47, 56, 70, 76, 80, 84, 91, 97, 100, 103, 104, 106, 110, 113, 114, 117, 118, 119, 120, 137, 138, 141, 145, 149, 153, 158, 159, 160, 161, 163, 164, 167, 168, 169], "subclass": [0, 22, 29, 36, 45, 56, 70, 118], "paramet": [0, 5, 6, 7, 9, 13, 14, 15, 18, 19, 20, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 77, 80, 82, 83, 84, 87, 88, 90, 91, 95, 97, 98, 99, 102, 103, 105, 110, 115, 119, 138, 141, 148, 152, 153, 156, 159, 161, 162, 164, 166, 167, 168, 169], "cl": [0, 14, 22, 29, 36, 45, 56, 70, 91, 137], "The": [0, 5, 6, 7, 8, 9, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 28, 29, 36, 38, 39, 40, 42, 43, 45, 46, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 76, 77, 78, 80, 86, 87, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 108, 110, 112, 113, 115, 118, 119, 120, 121, 123, 127, 130, 133, 135, 136, 137, 138, 141, 143, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "str": [0, 6, 9, 13, 14, 15, 20, 21, 22, 29, 32, 36, 38, 39, 41, 43, 45, 73, 76, 80, 83, 84, 87, 91, 92, 99, 100, 103, 137, 138, 152, 168], "registr": [0, 22, 29, 36], "name": [0, 5, 6, 7, 9, 13, 15, 20, 21, 22, 25, 29, 34, 36, 40, 45, 50, 54, 56, 58, 74, 76, 78, 80, 82, 83, 84, 91, 95, 98, 99, 100, 101, 114, 115, 120, 137, 141, 143, 145, 150, 152, 153, 155, 156, 159, 161, 165, 166, 169, 170], "call": [0, 14, 41, 103, 106, 110, 115, 118, 138, 147, 159, 161, 167, 168], "return": [0, 5, 6, 13, 14, 18, 19, 22, 29, 32, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 77, 80, 84, 90, 91, 96, 100, 101, 104, 110, 115, 119, 120, 138, 141, 152, 155, 157, 159, 161, 164, 167, 169], "type": [0, 6, 7, 9, 13, 14, 15, 20, 22, 29, 36, 38, 39, 41, 45, 54, 56, 62, 63, 70, 74, 76, 84, 90, 91, 95, 96, 97, 98, 99, 100, 101, 103, 106, 112, 118, 119, 141, 143, 145, 148, 153, 154, 156, 161, 162, 164, 166, 168, 169], "build": [0, 1, 3, 4, 49, 51, 53, 54, 55, 103, 118, 119, 120, 149, 155, 160, 169], "dict": [0, 5, 13, 15, 18, 19, 40, 41, 42, 43, 45, 46, 54, 58, 73, 76, 77, 78, 80, 82, 84, 90, 91, 99, 100, 101, 106, 115, 119, 137, 143, 152, 159, 161, 167, 169], "algorithmschedul": 0, "conf": [0, 5, 15, 18, 19, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 77, 115, 117, 120, 135, 146, 147, 153, 154, 155, 158, 161, 162, 163, 164, 166, 167, 169], "control": [0, 15, 115, 153, 159, 169], "differ": [0, 4, 6, 9, 10, 15, 22, 36, 45, 54, 56, 86, 99, 100, 103, 106, 108, 110, 113, 115, 119, 138, 141, 142, 147, 148, 152, 153, 155, 157, 159, 161, 164, 167, 168, 169], "phase": [0, 103, 110, 153, 159, 161, 163, 169], "base": [0, 6, 7, 14, 15, 20, 22, 29, 36, 45, 47, 54, 55, 56, 67, 70, 74, 94, 96, 97, 99, 100, 104, 106, 110, 118, 119, 120, 137, 140, 141, 145, 153, 154, 159, 160, 161, 164, 166, 167, 169, 170], "fastbiascorrect": [1, 4], "threshold": [1, 78, 86, 152], "2": [1, 3, 5, 7, 15, 21, 41, 43, 45, 56, 62, 91, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 115, 117, 118, 136, 138, 145, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169], "0": [1, 3, 6, 7, 15, 20, 23, 24, 27, 32, 36, 45, 56, 58, 63, 84, 87, 95, 96, 97, 99, 102, 104, 105, 108, 110, 115, 117, 137, 138, 141, 143, 144, 145, 149, 150, 151, 152, 153, 154, 156, 159, 161, 162, 164, 165, 166, 167, 168, 169], "channel_axi": [1, 4], "1": [1, 3, 4, 5, 7, 15, 20, 21, 23, 24, 27, 28, 32, 36, 41, 42, 43, 45, 56, 58, 76, 80, 87, 91, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 110, 112, 113, 115, 117, 118, 120, 136, 138, 143, 145, 146, 149, 151, 152, 154, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169], "fetch": [2, 119], "file": [2, 13, 15, 18, 19, 20, 21, 22, 25, 35, 36, 41, 46, 56, 58, 90, 91, 99, 105, 114, 118, 119, 120, 141, 144, 147, 150, 152, 153, 155, 157, 161, 164, 168], "init": [2, 152, 169], "fast_bias_correct": [2, 15, 161], "smooth_quant": [2, 15, 137, 161, 167], "weight_correct": [2, 15, 161], "smoothquant": [3, 97, 99, 100, 102, 110, 112, 151, 160, 164], "alpha": [3, 110, 137, 161, 169], "5": [3, 7, 15, 24, 32, 45, 58, 97, 99, 102, 110, 118, 143, 145, 149, 152, 153, 159, 161, 164, 167, 168, 169, 170], "fake": [3, 9, 76, 99, 110, 153, 161, 164, 167], "input": [3, 15, 18, 19, 20, 21, 22, 24, 32, 35, 36, 45, 46, 50, 54, 58, 77, 82, 83, 84, 87, 90, 91, 94, 98, 99, 100, 110, 118, 119, 135, 136, 138, 140, 141, 143, 145, 147, 152, 153, 154, 155, 159, 161, 164, 167, 168], "channel": [3, 4, 15, 32, 36, 87, 95, 97, 99, 117, 118, 120, 148, 149, 156, 159, 164, 168, 170], "quantiz": [3, 5, 7, 10, 12, 14, 15, 18, 19, 32, 37, 63, 65, 67, 76, 77, 78, 84, 86, 87, 90, 91, 96, 102, 104, 107, 108, 112, 118, 125, 137, 138, 141, 142, 145, 147, 148, 152, 155, 158, 160, 165, 168, 169], "more": [3, 9, 36, 95, 96, 97, 99, 100, 103, 110, 112, 116, 117, 119, 136, 137, 141, 143, 146, 148, 149, 151, 153, 154, 156, 157, 158, 159, 163, 164, 167, 169, 170], "detail": [3, 6, 36, 91, 92, 96, 97, 99, 100, 101, 102, 103, 110, 112, 113, 117, 119, 120, 136, 137, 145, 146, 147, 151, 152, 153, 154, 159, 164, 165, 166, 167, 169], "pleas": [3, 15, 20, 21, 22, 25, 45, 58, 97, 98, 99, 100, 101, 102, 110, 112, 115, 116, 117, 118, 135, 136, 140, 141, 143, 149, 151, 152, 154, 159, 161, 163, 164, 165, 166, 167, 169], "refer": [3, 15, 20, 38, 39, 45, 58, 97, 98, 100, 101, 102, 103, 106, 115, 117, 118, 119, 135, 138, 140, 141, 143, 147, 149, 150, 152, 153, 154, 157, 162, 165, 168, 169], "accur": [3, 98, 99, 110, 159, 164, 167], "effici": [3, 98, 106, 110, 117, 136, 138, 158, 159, 160, 164, 167, 169], "post": [3, 15, 18, 19, 58, 95, 97, 98, 99, 100, 102, 104, 110, 113, 117, 118, 119, 140, 141, 143, 148, 149, 156, 159, 160, 162, 164, 167, 169], "train": [3, 15, 18, 19, 20, 22, 36, 37, 58, 80, 95, 96, 97, 98, 99, 100, 102, 104, 108, 117, 118, 119, 125, 140, 143, 148, 154, 156, 158, 160, 162, 164, 166, 167, 169], "larg": [3, 95, 97, 99, 100, 102, 103, 110, 117, 138, 153, 156, 160, 162, 164, 167, 170], "languag": [3, 38, 95, 97, 99, 100, 102, 103, 110, 113, 117, 143, 156, 160, 162, 164, 167], "model": [3, 5, 7, 9, 15, 18, 19, 20, 22, 36, 37, 45, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 76, 77, 82, 83, 84, 87, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 108, 110, 112, 114, 115, 117, 118, 120, 125, 135, 136, 137, 138, 140, 141, 142, 147, 148, 150, 152, 154, 157, 158, 160, 161, 165, 166, 168, 169], "spiq": [3, 110, 167], "data": [3, 14, 15, 18, 19, 37, 46, 58, 62, 74, 76, 77, 80, 84, 91, 94, 95, 96, 98, 99, 100, 103, 110, 112, 117, 118, 136, 138, 141, 145, 146, 149, 152, 153, 154, 156, 161, 163, 164, 165, 166, 167, 168, 169], "free": [3, 18, 19, 58, 97, 102, 110, 113, 157, 166, 167], "per": [3, 5, 15, 86, 95, 97, 99, 105, 118, 120, 138, 156, 159, 163, 164, 170], "static": [3, 15, 58, 74, 84, 100, 108, 118, 119, 120, 143, 148, 153, 162, 167, 169, 170], "For": [3, 7, 9, 13, 15, 22, 36, 42, 43, 45, 46, 58, 91, 97, 99, 100, 101, 102, 106, 108, 110, 113, 115, 116, 118, 120, 140, 141, 143, 145, 148, 159, 163, 164, 167, 169, 170], "torch": [3, 7, 13, 15, 46, 58, 84, 87, 90, 94, 95, 96, 97, 98, 99, 104, 106, 108, 110, 115, 117, 120, 121, 141, 143, 153, 154, 155, 156, 161, 164, 167], "backend": [3, 15, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 68, 96, 99, 100, 115, 120, 141, 147, 148, 153, 154, 164, 168, 169], "we": [3, 4, 5, 7, 15, 38, 41, 65, 94, 97, 98, 99, 100, 102, 103, 104, 105, 106, 108, 110, 112, 113, 115, 117, 118, 119, 120, 137, 138, 141, 143, 145, 151, 152, 153, 157, 158, 159, 161, 162, 164, 165, 166, 167, 169], "onli": [3, 4, 5, 15, 20, 58, 68, 76, 84, 91, 96, 100, 104, 105, 108, 112, 118, 119, 120, 135, 136, 137, 138, 141, 144, 145, 151, 153, 154, 159, 160, 161, 162, 167, 169], "handl": [3, 12, 88, 115, 116, 137, 138, 167], "layer": [3, 15, 78, 80, 91, 97, 98, 99, 100, 110, 112, 118, 119, 120, 140, 148, 159, 164, 165], "whose": [3, 54, 147, 167, 169], "smooth": [3, 15, 100, 108, 117, 137, 159, 169], "scale": [3, 4, 32, 36, 94, 95, 97, 98, 99, 103, 110, 156, 161, 164, 166, 167, 168, 169], "could": [3, 18, 19, 22, 46, 58, 77, 96, 98, 99, 101, 103, 110, 112, 113, 115, 140, 153, 158, 159, 161, 164, 167], "absorb": [3, 99, 164], "support": [3, 6, 15, 18, 19, 20, 22, 29, 32, 36, 37, 45, 46, 50, 56, 58, 68, 74, 77, 80, 86, 87, 91, 93, 94, 98, 101, 104, 108, 110, 112, 117, 119, 137, 151, 153, 160, 163, 166, 169], "other": [3, 43, 54, 95, 100, 103, 108, 110, 113, 115, 117, 119, 120, 137, 145, 148, 150, 153, 155, 156, 157, 159, 161, 167, 168, 169, 170], "later": [3, 94, 96, 137], "onnx": [3, 15, 46, 53, 82, 83, 84, 89, 114, 117, 118, 119, 121, 138, 142, 143, 145, 146, 148, 154, 155, 156, 160, 164, 167, 169], "insert": [3, 98, 99, 100, 102, 110, 115, 119, 138, 148, 153, 159, 161, 163, 164, 167], "mul": [3, 99, 143, 164, 167], "befor": [3, 15, 20, 99, 110, 114, 120, 138, 140, 141, 144, 145, 153, 161, 164, 166, 169], "conv": [3, 15, 115, 119, 120, 153, 159, 161, 169], "linear": [3, 15, 97, 98, 99, 110, 115, 143, 153, 159, 164, 167, 169], "op": [3, 15, 63, 65, 67, 74, 75, 76, 82, 84, 86, 91, 96, 97, 100, 110, 117, 118, 119, 120, 145, 153, 154, 159, 161, 163, 165, 167, 169], "fuse": [3, 115, 167], "kernel": [3, 15, 99, 118, 119, 169], "futur": [3, 7, 18, 19, 100, 112, 148, 151, 153], "weightcorrect": 4, "ep": [4, 154], "1e": [4, 110, 167], "05": [4, 15, 45, 152, 167, 170], "correct": [4, 15, 41, 42, 43, 45, 113], "int8": [4, 5, 15, 32, 74, 76, 82, 83, 84, 90, 91, 95, 97, 99, 100, 101, 103, 110, 114, 115, 118, 119, 120, 135, 140, 145, 151, 153, 154, 156, 160, 161, 163, 164, 165, 166, 167, 168], "weight": [4, 7, 15, 45, 58, 65, 74, 76, 84, 91, 92, 94, 97, 98, 100, 101, 102, 103, 104, 108, 112, 118, 119, 120, 136, 140, 145, 147, 151, 153, 157, 159, 160, 161, 162, 167, 169], "distribut": [4, 15, 86, 99, 103, 110, 112, 119, 138, 149, 160, 161, 164, 165, 167, 170], "close": [4, 136], "fp32": [4, 15, 18, 19, 45, 63, 67, 74, 80, 83, 84, 87, 90, 91, 96, 97, 98, 99, 100, 101, 103, 110, 114, 118, 120, 145, 146, 151, 152, 153, 154, 161, 163, 164, 165, 166, 167, 169, 170], "r": [4, 97, 98, 99, 101, 103, 105, 110, 149, 161, 170], "w_int8": 4, "u": 4, "w_fp32": 4, "i": [4, 5, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 29, 32, 36, 38, 41, 43, 45, 46, 56, 58, 63, 68, 76, 77, 87, 90, 91, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 110, 113, 114, 115, 117, 118, 119, 120, 121, 123, 127, 130, 133, 135, 136, 137, 138, 140, 141, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "varianc": 4, "ratio": [4, 15, 32, 36, 151, 153, 159, 168, 170], "between": [4, 15, 36, 42, 45, 91, 95, 99, 100, 103, 110, 115, 118, 119, 120, 136, 148, 152, 153, 156, 161, 164, 165, 166, 167, 168, 169], "wise": [4, 15, 62, 63, 67, 99, 112, 119, 148, 159, 164, 167, 169], "": [4, 6, 15, 22, 35, 36, 43, 45, 46, 50, 58, 91, 94, 96, 97, 98, 99, 101, 103, 105, 108, 110, 112, 113, 114, 119, 120, 137, 141, 143, 145, 148, 153, 154, 158, 159, 160, 161, 164, 165, 166, 167, 169, 170], "equal": [4, 91, 95, 156, 159, 164], "minim": [4, 62, 98, 99, 103, 110, 119, 120, 136, 142, 152, 153, 159, 161, 169], "round": [4, 94, 99, 100, 106, 110, 117, 160, 161, 164, 167], "scale_c": 4, "shift": [4, 32, 168], "notic": [4, 96, 99, 150, 154, 165], "can": [4, 15, 18, 19, 22, 36, 41, 43, 45, 46, 56, 58, 77, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 110, 115, 117, 118, 119, 120, 135, 137, 138, 140, 141, 143, 145, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170], "chang": [4, 15, 65, 91, 100, 114, 119, 138, 141, 144, 150, 153, 159, 168, 169], "first": [4, 6, 15, 20, 41, 63, 74, 91, 95, 96, 99, 105, 110, 115, 117, 118, 119, 120, 149, 154, 156, 161, 163, 164, 166, 167, 169], "an": [4, 15, 22, 36, 37, 38, 42, 43, 46, 58, 77, 91, 93, 95, 96, 97, 98, 99, 100, 102, 103, 104, 110, 113, 115, 117, 118, 120, 136, 138, 139, 143, 151, 152, 153, 154, 156, 157, 159, 160, 161, 164, 166, 167, 168, 169], "empir": 4, "solut": [4, 97, 99, 102, 110, 117, 118, 119, 144, 160, 164, 165, 167, 169], "make": [4, 91, 97, 99, 102, 110, 113, 118, 119, 135, 137, 138, 145, 152, 153, 159, 161, 162, 163, 164, 166, 167, 169], "thi": [4, 6, 7, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 36, 38, 41, 42, 43, 45, 46, 56, 58, 62, 67, 76, 77, 90, 91, 96, 97, 98, 99, 101, 102, 103, 104, 110, 112, 113, 114, 115, 118, 119, 120, 136, 137, 138, 140, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 159, 161, 163, 164, 165, 166, 167, 168, 169], "don": [4, 15, 97, 98, 115, 159, 169], "t": [4, 15, 36, 43, 96, 97, 98, 103, 105, 115, 118, 137, 141, 153, 154, 159, 161, 164, 169], "min": [4, 15, 91, 95, 99, 103, 110, 156, 159, 161, 164, 167, 168, 169], "max": [4, 15, 36, 42, 43, 62, 91, 95, 99, 103, 110, 117, 149, 153, 156, 159, 161, 164, 167, 168, 169], "valu": [4, 5, 15, 18, 19, 20, 23, 24, 32, 36, 41, 45, 46, 58, 62, 67, 74, 76, 77, 78, 80, 91, 94, 95, 96, 97, 99, 102, 103, 110, 115, 119, 120, 136, 145, 152, 153, 154, 156, 157, 159, 161, 164, 167, 168, 169], "us": [5, 6, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 35, 36, 38, 39, 41, 45, 56, 58, 62, 65, 67, 70, 74, 76, 77, 78, 79, 80, 83, 84, 85, 87, 91, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 108, 110, 113, 114, 115, 117, 118, 119, 135, 136, 137, 140, 141, 143, 145, 147, 149, 150, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170], "evalu": [5, 7, 18, 19, 20, 38, 41, 42, 43, 45, 46, 56, 58, 77, 80, 100, 102, 103, 104, 110, 118, 119, 137, 140, 147, 148, 151, 152, 153, 154, 157, 159, 161, 166, 167, 169], "perform": [5, 15, 20, 32, 45, 56, 58, 63, 67, 94, 96, 98, 99, 101, 103, 104, 105, 108, 110, 114, 115, 117, 118, 119, 135, 139, 140, 142, 143, 148, 149, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 170], "set_env_var": 5, "env_var": 5, "overwrite_exist": 5, "fals": [5, 15, 20, 22, 32, 36, 41, 45, 56, 58, 80, 87, 90, 91, 97, 99, 101, 103, 104, 105, 118, 119, 138, 145, 152, 153, 161, 164, 167, 168, 169], "set": [5, 6, 7, 14, 15, 18, 19, 20, 22, 25, 36, 41, 45, 46, 54, 58, 77, 91, 96, 97, 99, 100, 101, 102, 104, 105, 106, 110, 113, 117, 119, 135, 138, 141, 143, 145, 147, 148, 152, 153, 154, 159, 161, 164, 166, 167, 169], "specifi": [5, 9, 15, 18, 19, 36, 41, 45, 46, 58, 77, 90, 91, 106, 110, 119, 120, 141, 145, 152, 153, 157, 159, 164, 168, 169], "environ": [5, 100, 106, 113, 117, 135, 169], "variabl": [5, 15, 22, 62, 76, 106, 159, 169], "new": [5, 14, 22, 36, 56, 96, 97, 98, 99, 110, 112, 114, 119, 141, 153, 154, 159, 160, 161, 164, 165, 166, 168], "env": [5, 144], "two": [5, 22, 27, 41, 68, 91, 95, 96, 98, 99, 102, 104, 107, 110, 114, 115, 137, 138, 141, 143, 145, 153, 154, 156, 159, 161, 163, 164, 166, 167, 169], "case": [5, 15, 35, 36, 56, 99, 103, 110, 112, 120, 137, 138, 140, 141, 145, 147, 152, 157, 159, 160, 161, 164, 165, 167, 168, 170], "exist": [5, 54, 91, 96, 100, 143, 152, 169], "alreadi": [5, 22, 35, 96, 100, 118, 148, 169], "param": [5, 9, 45, 62, 91, 118, 155, 169], "true": [5, 7, 15, 20, 22, 23, 35, 36, 39, 45, 56, 58, 73, 80, 84, 87, 90, 91, 94, 97, 98, 99, 100, 101, 103, 104, 105, 110, 117, 119, 138, 141, 145, 152, 153, 161, 162, 164, 167, 168, 169], "set_all_env_var": 5, "configur": [5, 6, 7, 14, 15, 18, 19, 22, 25, 45, 46, 56, 58, 67, 76, 77, 79, 80, 84, 89, 90, 100, 104, 115, 118, 119, 153, 157, 159, 161, 164, 165, 167, 168, 169, 170], "neural": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 65, 66, 72, 81, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 114, 118, 119, 120, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 154, 155, 156, 157, 158, 160, 161, 164, 165, 167, 168, 169, 170], "compressor": [5, 15, 32, 33, 36, 37, 44, 45, 46, 50, 57, 58, 66, 72, 81, 93, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 114, 118, 119, 120, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170], "physic": [5, 113, 135], "core": [5, 15, 99, 105, 106, 114, 117, 135, 149, 150, 170], "get_architectur": 5, "get": [5, 14, 15, 36, 45, 54, 58, 67, 74, 76, 80, 84, 87, 91, 97, 100, 105, 110, 112, 119, 136, 144, 148, 149, 151, 153, 160, 164, 167, 169, 171], "architectur": [5, 96, 99, 106, 108, 110, 112, 117, 135, 153, 159, 160, 164], "system": [5, 91, 95, 106, 135, 156, 159, 170], "get_threads_per_cor": 5, "thread": [5, 15, 138], "get_thread": 5, "list": [5, 6, 7, 9, 15, 18, 19, 20, 32, 36, 38, 39, 41, 42, 43, 45, 46, 54, 58, 73, 77, 78, 83, 84, 91, 97, 100, 102, 103, 115, 117, 118, 143, 145, 149, 151, 153, 157, 159, 161, 163, 167, 169], "get_physical_id": 5, "socket": [5, 91, 170], "get_core_id": 5, "id": [5, 35, 38, 40, 41, 42, 43, 152, 166, 169], "get_bounded_thread": 5, "core_id": 5, "bind": [5, 106], "instanc": [5, 15, 18, 19, 42, 43, 45, 46, 58, 62, 76, 77, 91, 99, 105, 108, 113, 114, 115, 118, 135, 153, 164, 169, 170], "run_inst": 5, "b_dataload": [5, 15, 135, 153], "none": [5, 6, 7, 9, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 36, 41, 45, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 74, 77, 78, 80, 83, 84, 87, 90, 91, 95, 99, 100, 103, 105, 117, 118, 119, 138, 152, 156, 161, 164, 168, 169], "b_func": [5, 135], "run": [5, 15, 18, 19, 35, 46, 58, 62, 77, 99, 100, 103, 105, 106, 110, 117, 118, 135, 141, 144, 145, 153, 160, 161, 164, 165, 166, 169], "object": [5, 7, 13, 15, 18, 19, 20, 21, 22, 36, 37, 41, 45, 46, 54, 55, 58, 62, 76, 77, 80, 90, 91, 98, 100, 103, 112, 115, 119, 125, 135, 137, 138, 144, 152, 153, 155, 158, 159, 161, 168, 169, 170], "benchmarkconfig": [5, 15, 135, 153], "contain": [5, 15, 18, 19, 20, 21, 22, 41, 42, 43, 46, 58, 77, 80, 84, 90, 99, 103, 112, 117, 136, 148, 152, 159, 164, 169], "accuraci": [5, 7, 15, 18, 19, 45, 46, 56, 58, 63, 77, 95, 97, 98, 99, 103, 104, 108, 115, 117, 119, 120, 136, 138, 140, 141, 142, 143, 152, 153, 156, 157, 158, 159, 160, 164, 165, 166, 167, 170], "goal": [5, 46, 58, 104, 110, 119, 138, 158, 161, 169], "tune": [5, 6, 7, 9, 12, 15, 18, 19, 20, 22, 46, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 91, 96, 97, 98, 99, 100, 104, 107, 108, 117, 118, 119, 136, 137, 138, 141, 148, 150, 153, 154, 157, 159, 160, 163, 165, 166], "prefer": [5, 58, 99, 110, 159, 164], "calibr": [5, 15, 18, 19, 58, 86, 98, 99, 100, 103, 110, 112, 118, 120, 147, 148, 159, 161, 164, 169], "space": [5, 15, 18, 19, 43, 46, 58, 62, 67, 74, 100, 104, 110, 113, 114, 118, 119, 120, 137, 159, 161, 167], "etc": [5, 35, 43, 46, 58, 90, 117, 148, 159, 166, 169], "dataload": [5, 18, 19, 20, 31, 58, 77, 80, 103, 112, 115, 117, 118, 119, 140, 141, 146, 147, 153, 154, 158, 159, 161, 162, 163, 164, 167, 168], "framework": [5, 6, 10, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 33, 36, 45, 46, 47, 48, 50, 68, 74, 80, 96, 98, 103, 104, 108, 110, 112, 117, 118, 120, 136, 137, 141, 142, 146, 147, 148, 149, 152, 153, 154, 159, 160, 161, 168, 169, 170], "custom": [5, 45, 56, 90, 100, 104, 110, 135, 140, 159, 160, 164, 166], "If": [5, 7, 9, 15, 18, 19, 22, 36, 46, 58, 77, 100, 103, 110, 114, 115, 119, 135, 137, 138, 141, 149, 150, 152, 153, 157, 159, 161, 164, 166, 167, 168, 169], "user": [5, 15, 18, 19, 22, 25, 29, 36, 45, 46, 56, 58, 63, 76, 77, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 110, 115, 118, 119, 120, 125, 135, 137, 138, 140, 143, 145, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169], "pass": [5, 14, 45, 58, 90, 91, 99, 110, 114, 115, 118, 135, 140, 141, 147, 152, 153, 159, 161, 163, 167], "need": [5, 9, 15, 18, 19, 22, 29, 36, 45, 46, 56, 58, 67, 77, 84, 90, 91, 99, 102, 104, 106, 110, 115, 118, 137, 138, 141, 148, 153, 159, 161, 162, 163, 164, 165, 167, 168, 169], "generate_prefix": 5, "core_list": 5, "gener": [5, 7, 14, 18, 19, 22, 23, 24, 25, 36, 38, 46, 58, 62, 77, 95, 96, 97, 99, 100, 101, 106, 110, 114, 115, 118, 120, 138, 152, 153, 154, 156, 157, 159, 160, 161, 163, 164, 167, 168, 169], "command": [5, 77, 105, 106, 141], "prefix": 5, "numactl": [5, 144], "index": [5, 15, 22, 91, 110, 152, 164, 167], "bound": [5, 36, 41, 62, 152, 168], "specif": [5, 6, 15, 20, 21, 22, 23, 27, 29, 45, 58, 95, 96, 98, 99, 100, 103, 106, 113, 118, 119, 136, 137, 138, 145, 147, 151, 152, 153, 154, 155, 156, 157, 159, 164, 169], "call_on": 5, "cmd": [5, 149], "log_fil": 5, "execut": [5, 10, 15, 58, 59, 61, 77, 80, 90, 91, 98, 99, 110, 140, 153, 154, 158, 159, 161, 164, 166, 169, 170], "one": [5, 36, 38, 41, 45, 96, 99, 100, 103, 104, 105, 110, 118, 136, 140, 141, 145, 148, 149, 152, 153, 154, 157, 158, 159, 161, 162, 164, 165, 167, 168, 169], "dump": [5, 84, 91, 103, 110, 114, 161], "log": [5, 12, 14, 88, 105, 115, 166, 169], "window": [5, 105, 106, 135, 149], "config_inst": 5, "raw_cmd": 5, "multi": [5, 41, 45, 58, 105, 138, 148, 153, 157, 159, 161, 169], "trigger": [5, 105], "sub": [5, 137, 169], "process": [5, 7, 12, 14, 15, 18, 19, 20, 21, 22, 32, 36, 46, 58, 59, 61, 62, 77, 90, 91, 94, 95, 98, 102, 103, 104, 106, 110, 118, 119, 120, 136, 138, 140, 141, 143, 153, 156, 158, 159, 161, 162, 164, 167, 168], "raw": [5, 21, 25, 28, 67, 152, 169], "summary_benchmark": 5, "summari": [5, 77, 170], "profil": [5, 15, 37], "benchmark_with_raw_cmd": 5, "string": [5, 14, 15, 22, 38, 41, 50, 54, 80, 91, 103, 152, 168], "exampl": [5, 6, 7, 9, 13, 15, 20, 21, 22, 32, 36, 41, 42, 43, 45, 46, 56, 58, 76, 77, 90, 91, 97, 103, 104, 106, 108, 112, 113, 117, 119, 120, 125, 147, 148, 163, 165, 168, 169, 171], "accord": [5, 15, 20, 21, 22, 36, 65, 67, 80, 103, 104, 110, 118, 141, 159, 163, 167, 168, 169], "config": [5, 6, 7, 9, 13, 14, 18, 19, 20, 37, 46, 74, 75, 76, 77, 80, 90, 91, 94, 96, 98, 99, 100, 101, 117, 119, 120, 125, 135, 137, 138, 140, 141, 143, 146, 148, 152, 153, 154, 155, 158, 159, 161, 163, 164, 166, 169], "from": [5, 6, 7, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 32, 38, 41, 42, 43, 46, 54, 56, 58, 74, 76, 77, 80, 82, 83, 84, 87, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 110, 112, 113, 114, 115, 118, 120, 135, 137, 138, 140, 141, 142, 143, 144, 146, 148, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "import": [5, 7, 14, 15, 46, 56, 58, 77, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 110, 112, 115, 117, 120, 135, 138, 140, 141, 143, 146, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169], "fit_with_raw_cmd": 5, "iter": [5, 15, 18, 19, 22, 23, 46, 58, 77, 80, 99, 103, 104, 115, 118, 135, 138, 153, 159, 161, 167, 169], "100": [5, 6, 7, 15, 22, 103, 110, 135, 141, 147, 149, 153, 161, 168, 169, 170], "cores_per_inst": [5, 15, 135, 153], "4": [5, 15, 29, 32, 36, 38, 39, 41, 76, 94, 95, 97, 98, 99, 100, 105, 110, 113, 117, 118, 120, 135, 141, 142, 145, 148, 149, 152, 153, 156, 159, 161, 164, 167, 168, 169, 170], "num_of_inst": [5, 15, 135, 153], "7": [5, 15, 56, 97, 99, 102, 110, 120, 135, 144, 145, 153, 159, 161, 165, 167, 169, 170], "test": [5, 15, 36, 114, 117, 170], "py": [5, 15, 39, 41, 42, 43, 101, 105, 106, 115, 118, 137, 141, 149, 153, 161, 165], "fit": [5, 15, 46, 58, 62, 77, 115, 117, 135, 138, 141, 146, 147, 152, 153, 154, 155, 159, 161, 162, 163, 164], "pb": [5, 15, 46, 54, 58, 103, 135, 141, 146, 153, 155, 170], "eval_dataload": [5, 15, 18, 19, 46, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 77, 135, 147, 152, 153, 161, 162, 169], "configregistri": [6, 13], "A": [6, 7, 12, 14, 15, 22, 36, 38, 41, 42, 43, 45, 46, 50, 54, 62, 77, 91, 97, 99, 100, 110, 114, 119, 137, 138, 142, 145, 151, 152, 153, 155, 159, 160, 161, 164, 167, 168, 169], "registri": 6, "manag": [6, 77, 80, 153], "algorithm": [6, 9, 15, 37, 38, 45, 80, 86, 99, 100, 103, 104, 108, 110, 117, 118, 119, 120, 137, 140, 145, 148, 151, 159, 161], "within": [6, 7, 41, 54, 96, 113, 115, 120, 136, 154, 159, 160, 164, 167, 169], "register_config": [6, 137], "framework_nam": [6, 137], "algo_nam": [6, 137], "prioriti": [6, 137], "float": [6, 15, 20, 32, 39, 41, 42, 43, 73, 91, 94, 95, 96, 97, 98, 99, 101, 102, 104, 110, 137, 152, 156, 161, 167, 168], "int": [6, 9, 14, 15, 20, 21, 32, 36, 39, 41, 45, 76, 83, 84, 87, 91, 99, 103, 117, 137, 138, 152, 153, 164, 168], "usag": [6, 7, 9, 41, 100, 101, 110, 119, 141, 142, 157, 164, 168], "examplealgorithm": 6, "examplealgorithmconfig": 6, "larger": [6, 99, 110, 119, 159, 164, 167], "number": [6, 7, 14, 15, 21, 32, 36, 42, 43, 45, 62, 80, 91, 94, 99, 104, 105, 110, 135, 138, 141, 152, 159, 161, 164, 166, 167, 168, 169], "indic": [6, 15, 20, 41, 103, 115, 138, 144], "higher": [6, 15, 18, 19, 46, 58, 77, 110, 115, 143, 152, 159, 161, 164, 166], "which": [6, 15, 20, 21, 22, 32, 38, 43, 45, 50, 56, 58, 62, 91, 96, 98, 99, 100, 101, 103, 104, 110, 112, 113, 115, 117, 118, 119, 120, 136, 138, 141, 144, 145, 148, 152, 153, 154, 155, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169], "tri": [6, 15, 137, 169], "auto": [6, 7, 15, 60, 66, 91, 97, 100, 106, 107, 108, 115, 117, 136, 159, 161, 164], "stage": [6, 14, 59, 61, 68, 159, 169], "default": [6, 9, 14, 15, 18, 19, 20, 21, 22, 32, 36, 38, 45, 54, 76, 80, 83, 84, 87, 91, 95, 96, 97, 99, 100, 103, 104, 105, 115, 118, 137, 138, 145, 148, 152, 153, 154, 156, 157, 159, 161, 163, 164, 166, 167, 168, 169], "baseconfig": [6, 7, 9, 100, 103, 137], "white_list": 6, "util": [6, 7, 8, 15, 37, 39, 66, 103, 106, 112, 119, 120, 121, 136, 137, 141, 153, 159, 161, 169], "op_name_or_module_typ": 6, "default_white_list": 6, "params_list": [6, 9], "tunabl": [6, 9], "composableconfig": [6, 137], "repres": [6, 7, 9, 10, 22, 27, 41, 43, 45, 98, 103, 110, 113, 120, 136, 143, 159, 161, 162, 169], "compos": [6, 36, 80, 168], "allow": [6, 62, 96, 98, 99, 104, 141, 152, 153, 154, 159, 164, 167, 169], "multipl": [6, 16, 17, 20, 21, 23, 24, 25, 26, 27, 31, 33, 36, 46, 47, 48, 50, 56, 103, 108, 135, 143, 153, 158, 159, 166, 167, 169], "togeth": [6, 15, 36, 149, 160, 168], "oper": [6, 9, 15, 32, 94, 96, 97, 98, 99, 100, 101, 102, 110, 115, 135, 138, 143, 159, 161, 164, 167, 168, 169], "config_list": [6, 7], "get_all_config_set_from_config_registri": [6, 137], "fwk_name": [6, 137], "retriev": [6, 12, 159], "given": [6, 36, 41, 58, 100, 104, 120, 159, 167, 168], "union": [6, 45, 77, 100, 103, 152], "register_supported_configs_for_fwk": 6, "evaluationfuncwrapp": 7, "eval_fn": [7, 96, 100, 101, 102, 103, 104], "callabl": [7, 15, 43, 77, 100, 103, 137, 138], "eval_arg": [7, 96, 100, 101, 103], "wrapper": [7, 36, 41, 45, 50, 54, 103, 163], "collect": [7, 34, 36, 43, 45, 78, 91, 103, 110, 119, 161, 169], "note": [7, 41, 68, 94, 97, 98, 99, 102, 105, 108, 110, 112, 117, 119, 120, 137, 138, 141, 143, 145, 149, 151, 153, 159, 161, 164, 167, 169], "deprec": [7, 137, 165, 168], "def": [7, 18, 19, 58, 77, 96, 97, 100, 101, 103, 104, 110, 115, 118, 137, 138, 140, 141, 152, 153, 161, 167, 169], "eval_acc": 7, "eval_perf": 7, "mold": 7, "user_eval_fns1": 7, "user_eval_fns2": 7, "user_eval_fns3": 7, "user_eval_fns4": 7, "configset": 7, "base_config": [7, 8], "sampler": [7, 73, 99, 104, 138, 141], "config_sourc": 7, "sequentialsampl": 7, "size": [7, 22, 28, 32, 36, 54, 56, 91, 95, 98, 99, 110, 113, 119, 138, 141, 144, 153, 156, 157, 159, 161, 162, 164, 167, 168, 170], "sampl": [7, 15, 20, 21, 22, 32, 36, 45, 62, 99, 103, 104, 105, 110, 138, 142, 148, 161, 164, 167, 168, 169, 170], "element": [7, 41, 91, 95, 99, 110, 148, 152, 156, 159, 164, 167], "sequenti": [7, 59, 61, 104, 169], "alwai": [7, 41, 45, 58, 104, 152, 153, 164], "same": [7, 15, 20, 36, 41, 91, 95, 99, 104, 105, 110, 118, 120, 135, 138, 141, 145, 153, 156, 159, 161, 164, 167, 168, 169], "order": [7, 38, 39, 62, 67, 76, 99, 104, 110, 115, 152, 164, 167, 169], "_configset": 7, "configload": 7, "config_set": [7, 96, 101, 102, 103, 104], "default_sampl": [7, 104], "skip_verified_config": 7, "bool": [7, 14, 15, 20, 22, 32, 36, 39, 45, 73, 84, 87, 90, 91, 99, 100, 138, 152, 168], "yield": [7, 18, 19, 46, 58, 62, 77, 110, 138, 161, 169], "tuningconfig": [7, 96, 100, 101, 102, 103, 104], "tolerable_loss": [7, 15, 104, 153, 169], "01": [7, 15, 99, 153, 164, 169, 170], "max_trial": [7, 15, 96, 104, 153, 169], "pipelin": [7, 114, 140, 153, 158], "tune_config": [7, 96, 100, 101, 102, 103, 104, 119], "config1": 7, "config2": 7, "3": [7, 15, 22, 36, 41, 91, 95, 96, 98, 99, 101, 103, 104, 105, 108, 110, 115, 117, 136, 137, 138, 141, 143, 145, 146, 149, 152, 153, 154, 156, 157, 159, 161, 164, 165, 166, 167, 168, 169, 170], "stop": [7, 15, 104, 112, 153, 169], "when": [7, 15, 20, 21, 29, 36, 39, 58, 77, 98, 99, 103, 104, 105, 106, 110, 113, 119, 137, 138, 153, 159, 161, 164, 167, 168, 169], "either": [7, 15, 41, 98, 103, 104, 106, 110, 158, 161], "follow": [7, 22, 38, 41, 95, 96, 97, 102, 105, 106, 110, 113, 114, 115, 117, 118, 119, 120, 137, 138, 140, 141, 145, 149, 150, 152, 153, 154, 155, 156, 158, 159, 161, 164, 167, 169], "condit": [7, 20, 21, 22, 36, 59, 61, 104, 150, 168, 169], "met": [7, 104, 110, 145, 161], "trial": [7, 104, 169], "reach": [7, 15, 114, 138, 159, 169], "maximum": [7, 15, 20, 36, 39, 54, 62, 99, 110, 120, 136, 153, 159, 161, 167, 168], "metric": [7, 15, 18, 19, 37, 46, 58, 77, 80, 102, 112, 118, 119, 141, 153, 154, 161, 166, 167, 169, 170], "loss": [7, 15, 45, 77, 96, 98, 99, 103, 110, 136, 140, 141, 142, 151, 152, 153, 154, 158, 159, 160, 161, 164, 167, 169], "toler": [7, 103], "calcul": [7, 15, 23, 24, 42, 43, 67, 78, 91, 97, 99, 103, 110, 136, 152, 153, 157, 159, 161, 164, 166, 167, 169], "relative_loss": 7, "fp32_baselin": [7, 80, 118], "eval_result_of_q_model": 7, "99": [7, 151, 170], "so": [7, 36, 76, 95, 99, 100, 103, 110, 112, 115, 118, 144, 148, 154, 156, 161, 163, 164, 167, 168], "tuningmonitor": 7, "tuning_config": 7, "monitor": [7, 100], "init_tun": 7, "tupl": [7, 15, 18, 19, 32, 36, 46, 58, 73, 77, 84, 90, 100, 103, 119, 137, 152, 153, 161, 168], "tuninglogg": [7, 12], "initi": [7, 18, 19, 20, 58, 74, 77, 100, 103, 110, 120, 152, 159, 161, 167, 169], "modul": [8, 11, 96, 99, 100, 104, 108, 112, 115, 117, 137, 138, 148, 152, 153, 155, 159, 163, 164], "base_tun": [8, 101, 103], "tuning_param": 8, "paramlevel": 9, "enumer": [9, 10, 14, 77, 95, 118, 140, 141, 153, 156, 158, 159], "level": [9, 63, 88, 95, 110, 113, 156, 167, 169], "op_level": 9, "op_type_level": 9, "model_level": 9, "tuningparam": 9, "default_v": 9, "ani": [9, 41, 43, 73, 91, 100, 103, 113, 117, 120, 137, 141, 159, 166, 169], "tunable_typ": 9, "option": [9, 14, 15, 18, 19, 20, 36, 41, 45, 46, 58, 74, 76, 77, 83, 84, 85, 87, 91, 99, 100, 103, 110, 119, 120, 137, 138, 145, 149, 153, 159, 161, 164, 166, 167, 168, 169], "defin": [9, 14, 15, 18, 19, 46, 58, 77, 90, 101, 103, 104, 110, 113, 118, 119, 138, 140, 145, 148, 152, 153, 158, 159, 161, 164, 166, 167, 169], "fakealgoconfig": 9, "algo": [9, 80], "simpl": [9, 36, 103, 110, 153, 159, 166, 167, 169], "like": [9, 15, 18, 19, 22, 45, 54, 58, 77, 99, 103, 110, 114, 115, 117, 118, 119, 140, 148, 158, 159, 161, 164, 165, 167, 169], "give": [9, 119, 169], "enough": [9, 103, 110, 161], "creat": [9, 15, 20, 22, 41, 74, 76, 80, 110, 112, 113, 118, 155, 159, 161, 166, 169], "implicitli": 9, "simple_attr": 9, "complex": [9, 96, 137, 153, 154, 159], "develop": [9, 56, 95, 96, 114, 115, 137, 149, 153, 154, 156, 159, 160, 163, 166], "explicitli": [9, 15, 98, 106, 147, 159], "complex_attr": 9, "model_attr": 9, "todo": [9, 20, 23, 41, 74], "explain": [9, 110, 120, 167], "agnost": [10, 100], "mode": [10, 14, 29, 41, 54, 74, 90, 91, 99, 100, 118, 119, 148, 161, 163, 164, 169], "constant": [11, 62, 72, 84, 85, 137, 138, 145, 168], "logger": [11, 14, 78, 85, 91], "save_load": 11, "function": [12, 15, 18, 19, 21, 85, 96, 98, 99, 100, 103, 110, 112, 114, 115, 118, 119, 120, 135, 138, 140, 143, 147, 148, 151, 152, 153, 154, 159, 161, 164, 166, 167, 169], "unifi": [12, 118, 119, 120, 138, 147, 148, 152, 153, 155], "It": [12, 18, 19, 43, 45, 46, 58, 63, 67, 77, 95, 98, 99, 100, 101, 103, 104, 108, 110, 118, 119, 120, 136, 153, 156, 159, 161, 164, 166, 169], "assist": [12, 165], "valid": [12, 15, 22, 41, 54, 117, 118, 142, 145, 148, 150, 153, 159, 161, 164, 165], "team": [12, 43, 113, 163], "save": [13, 15, 22, 54, 58, 77, 78, 83, 84, 87, 91, 100, 101, 110, 115, 118, 147, 153, 154, 155, 158, 161, 162, 164, 167], "load": [13, 20, 35, 36, 46, 54, 58, 90, 91, 103, 119, 138, 161, 162, 167], "save_config_map": 13, "config_map": 13, "qconfig_file_path": 13, "map": [13, 15, 36, 40, 42, 43, 45, 82, 84, 99, 110, 137, 141, 152, 153, 159, 161, 164], "json": [13, 21, 36, 90, 99, 155, 164, 168], "path": [13, 20, 21, 22, 36, 46, 54, 58, 74, 83, 84, 87, 91, 98, 99, 100, 106, 115, 118, 141, 147, 152, 153, 154, 155, 158, 164, 168], "load_config_map": 13, "config_name_map": 13, "reload": 13, "get_all_config": 13, "singleton": [14, 91], "lazyimport": [14, 91], "module_nam": [14, 91], "lazi": [14, 91], "python": [14, 22, 37, 91, 93, 106, 115, 117, 137, 141, 144, 149, 153, 159, 160, 168], "till": [14, 91, 169], "cpuinfo": [14, 91], "cpu": [14, 15, 87, 91, 96, 98, 103, 105, 117, 119, 135, 136, 148, 153, 154, 160, 161, 162, 163, 164], "info": [14, 34, 50, 87, 88, 91, 115, 137, 155], "dump_elapsed_tim": [14, 91, 118], "customized_msg": [14, 91], "elaps": [14, 91], "time": [14, 15, 36, 45, 56, 62, 91, 98, 99, 100, 102, 104, 110, 119, 138, 141, 144, 153, 157, 159, 160, 161, 164, 166, 167, 168, 169], "set_random_se": [14, 15, 91], "seed": [14, 15, 91, 99, 153], "random": [14, 15, 32, 36, 62, 66, 91, 99, 153, 159, 168], "set_workspac": [14, 15, 91], "workspac": [14, 15, 90, 91, 155], "get_workspac": 14, "set_resume_from": [14, 15, 91], "resume_from": [14, 15, 91], "set_tensorboard": [14, 15, 91], "tensorboard": [14, 15, 80, 91, 118, 153], "log_process": 14, "call_count": 14, "func": [14, 91, 161], "keep": [14, 63, 115, 118, 137, 165], "track": [14, 166], "processortyp": 14, "deriv": 14, "detect_processor_type_based_on_hw": 14, "detect": [14, 15, 41, 45, 50, 100, 114, 115, 159, 169], "processor": [14, 96, 106, 110, 117, 151, 154, 160, 161, 163], "hardwar": [14, 95, 98, 106, 117, 118, 148, 153, 156, 159, 160], "server": [14, 106], "client": [14, 117], "statist": [14, 91, 92], "header": [14, 91, 144], "field_nam": [14, 91], "output_handl": [14, 91], "printer": [14, 91], "x": [15, 36, 62, 104, 108, 110, 117, 136, 137, 141, 149, 154, 155, 161, 162, 167, 168], "dotdict": [15, 56, 91], "access": [15, 87, 91], "yaml": [15, 18, 19, 20, 22, 90, 91, 118, 120, 147, 152, 153, 157, 168], "attribut": [15, 91, 118, 138, 145, 147, 153], "instead": [15, 91, 98, 159, 164], "dictionari": [15, 35, 41, 91], "notat": [15, 91], "random_se": [15, 62, 153], "1978": 15, "default_workspac": 15, "global": [15, 76, 91, 99, 100, 101, 115, 153, 159, 169], "you": [15, 20, 45, 58, 112, 114, 115, 119, 137, 138, 141, 149, 150, 152, 154, 159, 161, 164, 165, 166, 167], "want": [15, 20, 63, 77, 115, 118, 138, 141, 153, 157, 161, 164, 166, 169], "should": [15, 18, 19, 20, 22, 36, 39, 45, 46, 58, 77, 84, 91, 98, 100, 101, 102, 103, 105, 110, 115, 118, 119, 120, 141, 152, 153, 157, 159, 161, 164, 168, 169], "directori": [15, 21, 22, 54, 87, 90, 91, 141, 144], "where": [15, 41, 45, 76, 91, 110, 120, 136, 167], "intermedi": [15, 110, 115, 148, 161], "histori": [15, 90, 91, 169], "ar": [15, 20, 36, 41, 45, 59, 61, 62, 76, 80, 90, 91, 94, 95, 96, 98, 99, 100, 102, 103, 106, 110, 113, 114, 115, 118, 119, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169], "store": [15, 22, 147], "nc_workspac": 15, "format": [15, 20, 21, 22, 41, 74, 84, 87, 95, 96, 98, 100, 103, 105, 110, 117, 119, 120, 137, 141, 143, 152, 153, 154, 155, 156, 160, 161, 164], "datetim": 15, "now": [15, 36, 115, 120, 141, 168, 169], "strftime": 15, "y": [15, 36, 62, 110, 137, 144, 167, 168], "m": [15, 105, 114, 149, 159, 170], "d_": 15, "h": [15, 36, 141, 168], "resum": [15, 18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70], "wa": [15, 95, 97, 118, 153, 156, 160, 169], "automat": [15, 22, 25, 32, 100, 103, 105, 106, 115, 117, 135, 148, 153, 154, 158, 159, 161, 167, 168, 169], "dure": [15, 56, 91, 97, 98, 100, 103, 108, 110, 117, 119, 153, 155, 157, 158, 159, 161, 167], "last": [15, 96, 97, 99, 138, 154, 161, 164, 167], "flag": [15, 39], "whether": [15, 20, 32, 36, 39, 41, 45, 80, 87, 90, 91, 99, 105, 118, 152, 161, 164, 167, 168], "each": [15, 22, 25, 32, 36, 39, 41, 42, 43, 67, 91, 99, 102, 105, 110, 112, 114, 118, 119, 120, 137, 140, 145, 153, 157, 159, 162, 164, 166, 168, 169], "visual": [15, 166, 169], "displai": [15, 73, 74, 91], "2022": [15, 99, 110, 150, 159, 164, 167], "workspace_path": 15, "output": [15, 18, 19, 38, 45, 46, 54, 58, 77, 83, 84, 87, 88, 91, 99, 100, 101, 110, 115, 118, 119, 140, 141, 143, 145, 147, 152, 153, 155, 158, 159, 161, 164, 167, 168, 169], "devic": [15, 87, 96, 99, 100, 106, 110, 117, 119, 138, 153, 154, 159, 162, 164], "warmup": [15, 135, 153], "model_nam": [15, 117], "inter_num_of_thread": [15, 153], "intra_num_of_thread": [15, 153], "ni_workload_nam": 15, "benchmark": [15, 37, 56, 91, 108, 112, 117, 125, 155, 169, 170], "empti": [15, 100, 162], "includ": [15, 20, 22, 29, 36, 91, 99, 100, 103, 104, 106, 113, 118, 119, 120, 138, 149, 150, 151, 152, 153, 159, 161, 163, 164, 169], "itex": [15, 83, 103, 154, 161, 167], "ipex": [15, 90, 96, 97, 148, 151, 153, 154, 167], "onnxrt_trt_ep": [15, 154, 161], "onnxrt_cuda_ep": [15, 154, 161], "onnxrt_dnnl_ep": [15, 154, 161], "onnxrt_dml_ep": [15, 161], "inter": 15, "intra": 15, "accuracycriterion": [15, 153, 169], "higher_is_bett": [15, 45, 58, 169], "criterion": [15, 140, 153, 159, 161, 167, 169], "rel": [15, 56, 153, 169, 170], "better": [15, 18, 19, 46, 58, 77, 96, 99, 110, 137, 140, 152, 154, 159, 160, 161, 164, 166, 167, 169], "absolut": [15, 45, 95, 110, 152, 153, 156, 159, 161, 169], "how": [15, 36, 98, 99, 100, 101, 102, 103, 110, 112, 114, 115, 116, 118, 138, 140, 141, 147, 152, 153, 159, 160, 161, 167, 168, 169], "much": [15, 36, 110, 167, 168], "accept": [15, 104, 113, 135, 137, 138, 164], "accuracy_criterion": [15, 56, 153, 157, 169], "avail": [15, 50, 96, 99, 100, 106, 108, 117, 121, 123, 127, 130, 133, 137, 142, 144, 146, 148, 159, 169, 170], "tuningcriterion": [15, 153, 157, 166, 169], "strategi": [15, 16, 22, 37, 104, 110, 112, 117, 118, 119, 120, 125, 136, 137, 138, 141, 148, 153, 160, 161, 163, 164, 165], "basic": [15, 35, 66, 70, 73, 77, 95, 148, 153, 156, 166], "strategy_kwarg": [15, 166, 169], "timeout": [15, 153, 169], "doc": [15, 45, 58, 73, 74, 91, 152, 153], "tuning_strategi": 15, "md": [15, 45, 58], "constraint": [15, 153, 159, 166, 169], "guarante": [15, 153], "models": [15, 56, 153, 157], "footprint": [15, 56, 140, 153, 157, 159, 162], "second": [15, 20, 63, 91, 99, 106, 110, 153, 164, 167, 169], "mean": [15, 32, 36, 43, 45, 67, 99, 101, 110, 115, 119, 120, 138, 141, 145, 152, 153, 159, 161, 162, 164, 167, 168, 169, 170], "earli": [15, 110, 153, 161, 169], "combin": [15, 18, 19, 32, 46, 58, 77, 91, 99, 102, 115, 118, 148, 153, 158, 160, 161, 163, 164, 168, 169], "field": [15, 22, 41, 95, 115, 118, 120, 141, 153, 156, 166, 169], "decid": [15, 39, 103, 105, 118, 119, 153, 161, 165, 169], "exit": [15, 59, 61, 104, 153], "tuning_criterion": [15, 153, 157, 166, 169], "posttrainingquantconfig": [15, 58, 115, 117, 120, 138, 143, 146, 152, 153, 155, 161, 162, 163, 164, 166, 167, 169], "domain": [15, 159, 169], "recip": [15, 95, 104, 108, 117, 153, 156, 162, 164, 167, 169], "quant_format": [15, 84, 143], "approach": [15, 98, 110, 115, 117, 136, 148, 153, 159, 160, 162, 164, 169], "calibration_sampling_s": [15, 153], "op_type_dict": [15, 98, 117, 120, 161, 164, 169], "op_name_dict": [15, 98, 153, 161, 169], "reduce_rang": [15, 120], "example_input": [15, 84, 90, 94, 97, 98, 99, 100, 143], "excluded_precis": [15, 163], "quant_level": [15, 164, 167, 169], "gpu": [15, 99, 103, 117, 135, 148, 153, 154, 161, 162], "npu": [15, 161], "xpu": [15, 103, 161], "cv": [15, 98, 100, 103, 159], "object_detect": [15, 41], "nlp": [15, 100, 103, 110, 159, 161], "recommendation_system": 15, "adaptor": [15, 76, 80, 112, 117, 120, 148, 162, 163, 165, 167], "overrid": [15, 91, 137], "quantiztaion": 15, "below": [15, 45, 58, 95, 97, 99, 100, 103, 104, 106, 108, 110, 112, 114, 115, 117, 118, 119, 120, 138, 141, 147, 152, 156, 157, 158, 159, 161, 164, 166, 167, 169], "do": [15, 20, 38, 41, 84, 90, 100, 113, 119, 137, 141, 145, 148, 152, 153, 159, 163, 165, 167, 169], "quant": [15, 74, 99, 110, 115, 137, 151, 153, 161], "smooth_quant_arg": [15, 161, 167], "layer_wise_qu": [15, 162], "fast": [15, 99, 103, 159, 160, 164], "bia": [15, 164], "gemm_to_matmul": [15, 161], "convert": [15, 20, 32, 35, 36, 41, 74, 83, 94, 95, 96, 97, 98, 99, 100, 102, 106, 108, 110, 115, 119, 153, 154, 161, 163, 164, 167, 168, 169], "gemm": 15, "matmul": [15, 145, 164, 169], "add": [15, 20, 22, 74, 91, 97, 112, 114, 115, 117, 120, 138, 141, 143, 145, 152, 153, 166, 167, 169], "graph_optimization_level": [15, 161], "disable_al": 15, "enable_bas": 15, "enable_extend": 15, "enable_al": 15, "first_conv_or_matmul_quant": [15, 161], "last_conv_or_matmul_quant": [15, 161], "pre_post_process_quant": [15, 161], "preprocess": [15, 20, 36, 76, 80, 141, 168], "postprocess": [15, 33, 36, 45, 58, 80, 118, 153, 168], "add_qdq_pair_to_weight": [15, 161], "qdq": [15, 82, 83, 84, 102, 118, 143, 148, 161, 167], "pair": [15, 96, 98, 119, 138, 153, 154], "optypes_to_exclude_output_qu": [15, 161], "optyp": [15, 82, 119], "dedicated_qdq_pair": [15, 161], "dedic": 15, "qoper": [15, 143], "requir": [15, 54, 96, 98, 99, 103, 110, 115, 118, 119, 135, 136, 138, 140, 141, 145, 153, 154, 155, 159, 161, 164, 165, 166, 167, 169], "onnxruntim": [15, 22, 29, 118, 136, 138, 148, 149, 154], "tensorflow": [15, 20, 21, 22, 25, 27, 29, 36, 39, 41, 45, 46, 54, 58, 68, 83, 84, 91, 102, 108, 114, 117, 118, 119, 136, 137, 138, 140, 142, 145, 146, 148, 149, 153, 154, 155, 156, 159, 160, 166, 167, 169], "method": [15, 20, 22, 29, 36, 74, 76, 80, 85, 87, 88, 99, 100, 101, 103, 110, 115, 117, 136, 137, 138, 140, 152, 153, 158, 159, 161, 163, 164, 167, 168, 169], "dynam": [15, 74, 84, 99, 100, 108, 117, 118, 138, 143, 148, 153, 160, 169, 170], "weight_onli": [15, 90, 95, 117, 137, 156, 162, 164], "ptq": [15, 58, 97, 98, 102, 103, 115, 141, 148, 153, 161, 167, 169], "both": [15, 98, 99, 101, 106, 110, 113, 118, 140, 153, 159, 161, 164, 167, 169], "meet": [15, 59, 61, 99, 101, 103, 104, 110, 115, 119, 157, 160, 161, 164, 169], "criteria": [15, 104, 115, 167], "bayesian": [15, 66, 159], "mse": [15, 45, 58, 66, 91, 99, 110, 152, 164, 165], "mse_v2": [15, 66], "hawq_v2": [15, 66], "exhaust": [15, 66], "els": [15, 56, 164], "advanc": [15, 95, 96, 99, 101, 103, 110, 113, 119, 125, 151, 156, 159, 161, 164], "reduc": [15, 96, 97, 98, 99, 102, 103, 110, 118, 136, 140, 153, 154, 159, 160, 161, 162, 163, 164, 167, 169], "dtype": [15, 23, 24, 32, 36, 87, 96, 99, 100, 110, 117, 119, 120, 143, 145, 161, 164, 167, 168], "activ": [15, 74, 76, 94, 97, 98, 99, 102, 103, 110, 118, 119, 120, 136, 140, 145, 153, 161, 164, 167], "layer1": [15, 153, 159, 161], "conv1": [15, 101, 161], "bit": [15, 76, 94, 95, 96, 99, 100, 110, 117, 120, 136, 140, 154, 156, 160, 161, 164, 167], "precis": [15, 18, 19, 43, 45, 46, 56, 60, 63, 74, 91, 95, 98, 99, 100, 103, 104, 108, 110, 112, 117, 118, 119, 125, 135, 136, 140, 141, 145, 148, 156, 160, 161, 164, 167, 169], "exclud": [15, 118, 136, 163], "enabl": [15, 96, 98, 99, 119, 120, 141, 154, 159, 160, 167, 169], "mix": [15, 46, 60, 74, 100, 108, 112, 117, 118, 125, 148], "bf16": [15, 74, 118, 119, 145, 153, 163, 169, 170], "disabl": [15, 113, 163, 164, 167], "conserv": [15, 66], "In": [15, 41, 56, 99, 100, 103, 110, 112, 113, 115, 117, 118, 119, 138, 140, 141, 152, 153, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169], "docstr": 15, "quantizationawaretrainingconfig": [15, 77, 115, 140, 143, 153, 161, 163, 169], "awar": [15, 65, 77, 99, 100, 104, 118, 119, 120, 136, 140, 141, 143, 148, 158, 160, 164, 169], "qat": [15, 54, 108, 117, 140, 141, 148, 153, 161], "copi": [15, 91, 138], "deepcopi": 15, "model_origin": [15, 58, 163], "qat_op_name_dict": 15, "compression_manag": [15, 77, 115, 140, 153, 158, 159, 161], "prepare_compress": [15, 77, 115, 140, 153, 158, 159, 161], "weightpruningconfig": [15, 153, 158, 159], "pruning_config": [15, 153, 159], "target_spars": [15, 153, 159], "9": [15, 97, 105, 115, 149, 153, 159, 167, 169, 170], "pruning_typ": [15, 153, 159], "snip_momentum": [15, 153, 159], "pattern": [15, 22, 74, 94, 98, 102, 105, 118, 137, 145, 148, 153, 158, 167, 169, 170], "4x1": [15, 153, 159, 170], "op_nam": [15, 75, 91, 92, 98, 119, 153, 159], "excluded_op_nam": [15, 153, 159], "start_step": [15, 153, 159], "end_step": [15, 153, 159], "pruning_scop": [15, 153, 159], "pruning_frequ": [15, 153, 159], "min_sparsity_ratio_per_op": [15, 153, 159], "max_sparsity_ratio_per_op": [15, 153, 159], "98": [15, 153, 159, 170], "sparsity_decay_typ": [15, 153, 159], "exp": [15, 95, 153, 156, 159], "pruning_op_typ": [15, 153, 159], "low_memory_usag": 15, "kwarg": [15, 22, 34, 36, 45, 46, 47, 49, 51, 53, 54, 55, 58, 73, 75, 77, 87, 88, 90, 91, 138], "prune": [15, 91, 108, 112, 117, 141, 142, 145, 146, 148, 158, 160], "singl": [15, 20, 36, 41, 45, 58, 115, 149, 159, 162, 167], "sequenc": [15, 20, 35, 36, 39, 43, 99, 110, 118, 145, 159, 164, 168], "local": [15, 91, 99, 101, 159, 166], "link": [15, 20, 45, 58, 100, 136, 143, 164, 170], "out": [15, 20, 21, 22, 99, 101, 103, 110, 114, 115, 117, 159, 161, 164], "By": [15, 38, 99, 106, 119, 120, 152, 155, 159, 160, 164, 169], "correspond": [15, 20, 38, 41, 45, 80, 91, 100, 110, 118, 145, 153, 159, 161, 166, 169], "sparsiti": [15, 91, 99, 112, 117, 148, 153, 170], "after": [15, 20, 32, 36, 63, 87, 91, 94, 98, 99, 102, 110, 117, 119, 140, 143, 148, 152, 153, 157, 158, 159, 161, 163, 164, 166, 167, 168, 169], "90": [15, 151, 162, 170], "magnitud": [15, 45, 148, 159], "snip": [15, 148, 159, 170], "magnitude_progress": 15, "snip_progress": 15, "snip_momentum_progress": 15, "pattern_lock": 15, "most": [15, 45, 96, 99, 103, 110, 153, 154, 159, 161, 164, 167, 169, 170], "feasibl": 15, "under": [15, 22, 87, 90, 104, 114, 117, 150, 152, 153, 158, 159, 160, 162, 164, 169], "situat": [15, 141, 159], "structur": [15, 75, 91, 100, 110, 112, 148, 159, 160, 161, 170], "unstructur": [15, 148, 159, 170], "nxm": [15, 159], "e": [15, 99, 106, 110, 113, 114, 117, 142, 146, 159, 164, 167, 169], "g": [15, 99, 106, 110, 114, 142, 146, 159, 164, 165, 167, 169], "8x1": 15, "channelx1": [15, 159], "1xchannel": [15, 159], "n": [15, 21, 36, 39, 110, 120, 137, 151, 159, 161, 167, 168], "directli": [15, 41, 45, 101, 117, 152, 153, 159, 161], "our": [15, 95, 117, 143, 153, 156, 166], "itrex": [15, 97, 167], "some": [15, 20, 99, 108, 110, 117, 119, 120, 137, 143, 149, 152, 153, 157, 159, 161, 163, 164, 167, 169], "step": [15, 77, 94, 97, 98, 99, 110, 119, 120, 140, 141, 153, 158, 159, 163, 164, 166, 167, 169], "start": [15, 36, 41, 63, 112, 149, 160, 168, 169, 171], "integ": [15, 41, 45, 97, 99, 102, 110, 118, 120, 136, 161, 164, 167, 169], "end": [15, 20, 35, 36, 59, 61, 118, 119, 120, 140, 145, 149, 153, 157, 159, 164, 168, 169], "determin": [15, 86, 94, 98, 104, 106, 113, 115, 136, 159, 161], "score": [15, 38, 39, 41, 42, 43, 45, 65, 80, 115, 152, 157, 159, 166, 169], "gather": 15, "sort": [15, 67, 99, 164, 169], "sinc": [15, 38, 99, 110, 143, 152, 158, 164], "lead": [15, 96, 99, 103, 110, 137, 153, 154, 159, 164, 167], "less": [15, 91, 135, 153, 159], "frequenc": [15, 153, 159], "minimum": [15, 95, 120, 136, 153, 156, 159, 167, 169], "restrict": [15, 159, 166], "everi": [15, 99, 118, 138, 162, 164, 169], "schedul": [15, 99, 153, 158], "increas": [15, 95, 99, 139, 148, 156, 164, 169], "cube": [15, 159], "current": [15, 62, 68, 91, 98, 100, 104, 108, 115, 117, 118, 120, 136, 137, 141, 145, 153, 157, 159, 161, 164, 167, 169], "local_config": 15, "6": [15, 95, 97, 99, 102, 110, 145, 156, 161, 167, 169, 170], "queri": [15, 110, 119, 120, 161], "kei": [15, 54, 78, 80, 91, 99, 110, 117, 119, 160, 164, 169], "self": [15, 56, 100, 118, 119, 138, 148, 152, 166, 169], "attent": [15, 20, 113, 159], "dens": [15, 159, 170], "8": [15, 35, 94, 95, 97, 99, 100, 110, 115, 119, 136, 137, 145, 149, 156, 159, 160, 164, 167, 169, 170], "update_config": 15, "10": [15, 22, 62, 104, 105, 117, 135, 143, 149, 153, 159, 168, 169, 170], "hpoconfig": 15, "search_spac": 15, "searcher": 15, "xgb": 15, "loss_typ": [15, 153], "reg": 15, "min_train_sampl": 15, "42": [15, 99, 170], "hyperparamet": [15, 110, 166, 167, 169], "optim": [15, 62, 77, 78, 91, 98, 99, 102, 103, 104, 110, 112, 117, 135, 137, 140, 141, 145, 146, 148, 149, 151, 153, 155, 160, 161, 163, 164, 166, 167, 169], "search": [15, 18, 19, 38, 62, 91, 99, 100, 102, 112, 117, 137, 148, 152, 159, 160, 164, 167, 169], "grid": [15, 159], "bo": 15, "knowledgedistillationlossconfig": [15, 140, 153, 158], "temperatur": [15, 153], "ce": [15, 153], "loss_weight": [15, 153], "knowledg": [15, 102, 140, 142, 146, 148, 153, 155], "distil": [15, 108, 112, 117, 142, 146, 148, 158], "entropi": [15, 136, 169], "probabl": [15, 86, 99, 110, 164], "length": [15, 20, 36, 41, 99, 110, 152, 160, 161, 164, 168], "item": [15, 35, 74, 91, 110, 136, 141, 159, 167, 169], "student": [15, 20, 140, 170], "groundtruth": [15, 41], "label": [15, 18, 19, 20, 22, 23, 24, 25, 28, 32, 36, 38, 40, 45, 46, 58, 77, 103, 115, 138, 152, 153, 161, 168], "teacher": [15, 140, 153, 170], "kl": [15, 78, 86, 119, 120, 136, 145, 153, 169], "sum": [15, 45], "multipli": [15, 94, 95, 99, 156, 164], "distillationconfig": [15, 77, 140, 153, 158], "criterion_conf": 15, "d_conf": [15, 140, 153, 158], "teacher_model": [15, 140, 153], "intermediatelayersknowledgedistillationlossconfig": 15, "layer_map": 15, "add_origin_loss": 15, "relationship": 15, "student_layer_nam": 15, "student_layer_output_process": 15, "teacher_layer_nam": 15, "teacher_layer_output_process": 15, "bert": [15, 20, 36, 117, 152, 154, 159, 168, 170], "desir": [15, 32, 36, 97, 119, 120, 159, 167, 168], "its": [15, 22, 36, 39, 40, 62, 82, 99, 104, 110, 113, 150, 152, 154, 159, 164, 166, 168, 169], "take": [15, 18, 19, 36, 45, 46, 58, 62, 77, 99, 103, 106, 113, 115, 138, 145, 153, 159, 161, 163, 164, 168, 169], "serv": [15, 54, 110], "numer": [15, 45, 95, 96, 99, 103, 120, 154, 156, 160, 161, 164], "abbrevi": 15, "further": [15, 96, 110, 113, 117, 154, 155, 161], "layer_nam": [15, 159], "student_model": [15, 153], "l1": 15, "len": [15, 36, 141, 168], "origin": [15, 20, 36, 63, 76, 87, 91, 99, 100, 101, 103, 110, 114, 159, 161, 164, 168, 169], "selfknowledgedistillationlossconfig": [15, 153], "student1_layer_name1": 15, "teacher_layer_name1": 15, "student2_layer_name1": 15, "student1_layer_name2": 15, "teacher_layer_name2": 15, "student2_layer_name2": 15, "soft": 15, "l2": [15, 159], "hard": [15, 138], "resblock": 15, "featur": [15, 20, 21, 32, 36, 96, 101, 110, 114, 117, 135, 138, 139, 153, 154, 155, 159, 160, 165, 168], "deepst": 15, "fc": [15, 159], "02": [15, 151, 170], "nn": [15, 46, 58, 84, 87, 90, 99, 100, 110, 115, 153, 155, 164, 167], "crossentropyloss": [15, 153], "sgd": [15, 153], "lr": [15, 99, 141, 153], "0001": [15, 153], "learning_r": [15, 153], "altern": [15, 58], "distil_loss": [15, 153], "mixedprecisionconfig": [15, 46, 153, 154], "mixedprecis": [15, 153], "target": [15, 62, 87, 100, 141, 153, 159, 168, 169], "convers": [15, 96, 97, 110, 114, 118, 119, 153, 154, 161, 163, 167], "fp16": [15, 74, 110, 161], "fallback": [15, 65, 67, 68, 96, 97, 98, 143, 154, 163, 169], "won": [15, 161, 164], "work": [15, 100, 103, 105, 110, 116, 119, 137, 138, 163, 164, 165, 167], "tensor": [15, 36, 54, 67, 82, 84, 87, 90, 91, 94, 95, 100, 103, 115, 120, 137, 138, 156, 159, 161, 165, 168, 169], "trace": [15, 65, 84, 98, 100, 115, 169], "mix_precis": [15, 37, 153, 154], "converted_model": [15, 46, 153, 154], "exportconfig": 15, "opset_vers": [15, 83, 84, 143], "14": [15, 83, 84, 117, 143, 149, 151, 170], "input_nam": [15, 54, 83, 84, 143], "output_nam": [15, 54, 83, 84, 143], "dynamic_ax": [15, 84, 143], "common": [15, 34, 37, 80, 97, 101, 102, 103, 108, 113, 137, 140, 141, 143, 147, 149, 153, 161, 167], "export": [15, 41, 85, 94, 98, 112, 146], "select": [15, 20, 87, 99, 110, 115, 136, 148, 149, 159, 161, 164, 169], "opset": [15, 83, 84, 143], "version": [15, 37, 83, 84, 97, 112, 113, 115, 118, 137, 145, 149, 150, 153, 160, 167, 169], "qlinear": [15, 22, 29, 45, 82, 118], "ax": [15, 84], "inform": [15, 18, 19, 45, 91, 95, 97, 99, 103, 105, 106, 113, 114, 116, 117, 118, 119, 120, 121, 123, 127, 130, 133, 136, 137, 145, 153, 155, 156, 159, 163, 164, 165, 167, 170, 171], "onnxqlinear2qdqconfig": 15, "onnxqlinear2qdq": 15, "torch2onnxconfig": [15, 143], "torch2onnx": [15, 81], "qdq_op_fp32_bia": 15, "qdq_op_int32_bia": 15, "qdq_op_fp32_bias_qdq": 15, "resnet50": [15, 101, 117, 141, 143, 154, 159, 161, 166, 170], "int8_onnx_config": [15, 143], "randn": [15, 143], "224": [15, 32, 117, 141, 143, 146, 153, 168], "batch_siz": [15, 20, 21, 84, 99, 138, 141, 143, 147, 153, 161], "q_model": [15, 58, 94, 97, 98, 102, 104, 115, 138, 141, 143, 146, 147, 152, 153, 155, 161, 162, 163, 164], "tf2onnxconfig": [15, 143], "tf2onnx": [15, 81], "axi": 15, "addit": [15, 77, 99, 119, 120, 164, 165, 169], "keyword": 15, "argument": [15, 100, 103, 104, 164], "output_graph": 15, "nasconfig": 15, "search_algorithm": 15, "dyna": 15, "na": [15, 50, 148, 170], "mxnet": [15, 22, 25, 29, 36, 45, 46, 51, 58, 114, 117, 118, 119, 136, 138, 142, 145, 148, 153, 154, 155, 169], "kera": [15, 22, 29, 49, 54, 101, 103, 119, 138, 141, 155], "pytorch": [15, 20, 22, 25, 29, 36, 45, 46, 55, 58, 68, 84, 85, 91, 95, 100, 108, 114, 115, 117, 118, 119, 120, 136, 137, 138, 140, 142, 145, 148, 149, 151, 153, 154, 155, 156, 159, 160, 164, 165, 167, 169], "built": [16, 17, 20, 21, 26, 28, 30, 31, 32, 33, 36, 45, 48, 56, 58, 77, 103, 104, 118, 141, 153, 157, 161, 166, 168, 169], "sigopt": [17, 160], "tpe": 17, "provid": [18, 19, 36, 41, 46, 58, 77, 85, 87, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 117, 118, 119, 120, 135, 138, 140, 141, 142, 148, 149, 151, 152, 153, 154, 155, 159, 161, 164, 167, 169, 170], "sigopttunestrategi": 18, "q_dataload": [18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 147, 169], "q_func": [18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 118, 119, 153, 169], "eval_func": [18, 19, 46, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 77, 115, 138, 140, 141, 153, 161, 162, 163, 164, 169], "eval_metr": [18, 19, 46, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 77, 152, 161], "q_hook": [18, 19, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70], "hpo": [18, 159], "low": [18, 19, 23, 24, 46, 96, 99, 104, 110, 118, 119, 135, 136, 141, 153, 154, 160, 161, 164, 167, 169], "loader": [18, 19, 46, 58, 77, 87, 138, 161], "mandatori": [18, 19, 58, 153], "dataset": [18, 19, 31, 41, 42, 43, 45, 46, 58, 77, 80, 97, 99, 101, 102, 103, 110, 117, 118, 119, 138, 141, 146, 152, 153, 159, 161, 164, 165, 167, 169, 170], "_": [18, 19, 58, 96, 97, 99, 100, 103, 105, 110, 115, 117, 118, 119, 136, 141, 143, 145, 153, 154, 155, 157, 159, 161, 164, 165, 166, 167, 169], "depend": [18, 19, 46, 58, 77, 114, 117, 144, 145, 149, 161, 169], "implement": [18, 19, 20, 22, 38, 46, 56, 58, 65, 77, 99, 120, 138, 152, 153, 159, 161, 164, 165, 169], "well": [18, 19, 46, 58, 77, 95, 110, 117, 137, 156, 159, 161, 165, 167], "taken": [18, 19, 46, 58, 77, 161], "reserv": [18, 19], "abl": [18, 19, 46, 58, 77, 103, 110, 161], "pre": [18, 19, 20, 46, 58, 77, 98, 99, 104, 110, 137, 140, 153, 159, 160, 161, 164, 169], "through": [18, 19, 45, 46, 58, 98, 99, 100, 110, 117, 135, 145, 147, 148, 152, 157, 158, 159, 161, 164], "tuner": [18, 19, 46, 58, 77, 161], "encapsul": [18, 19, 46, 58, 77, 155], "scalar": [18, 19, 46, 58, 77, 152, 161, 169], "pseudo": [18, 19, 58, 77, 99, 164], "code": [18, 19, 58, 77, 99, 101, 112, 115, 117, 118, 119, 120, 140, 141, 147, 148, 150, 152, 157, 158, 159, 160, 161, 166, 167, 168], "someth": [18, 19, 22, 58, 77], "fefin": 19, "tpetunestrategi": 19, "pytorchbertdataset": 20, "task": [20, 27, 45, 97, 99, 106, 110, 140, 143, 148, 152, 153, 159, 162, 164, 167, 170], "model_typ": [20, 91], "transform": [20, 21, 22, 23, 24, 25, 27, 29, 31, 97, 98, 99, 102, 108, 110, 115, 117, 136, 140, 141, 142, 146, 151, 153, 159, 160, 163, 164, 167, 169], "filter": [20, 21, 22, 23, 24, 25, 27, 31, 91, 120, 148, 159], "construct": [20, 23, 24, 27, 34, 45, 50, 54, 76, 80, 104, 113, 119, 120, 141, 159, 169], "tensordataset": 20, "full": [20, 21, 22, 87, 91, 99, 117, 136, 144, 150, 159, 164, 165], "repo": [20, 111, 114, 142, 171], "http": [20, 22, 38, 39, 41, 42, 43, 45, 58, 99, 115, 146, 149, 150, 153, 159, 165], "github": [20, 38, 39, 42, 43, 45, 58, 99, 114, 117, 142, 149, 150, 153, 165], "com": [20, 38, 39, 42, 43, 45, 58, 113, 137, 146, 149, 150, 153, 165, 166, 170], "huggingfac": [20, 87, 95, 142, 146, 156, 167, 170], "your": [20, 98, 112, 114, 117, 137, 138, 141, 150, 153, 159, 160, 166, 169], "easi": [20, 98, 100, 103, 143, 153, 160, 161, 164, 166], "ad": [20, 38, 62, 94, 96, 99, 119, 120, 154, 159, 164], "arg": [20, 21, 22, 62, 87, 88, 95, 100, 141, 153, 156, 159, 161, 164, 167, 168], "classifi": [20, 45], "squad": [20, 36, 42, 43, 45, 152, 159, 168, 170], "distilbert": [20, 154, 160, 170], "xlnet": 20, "xlm": [20, 170], "101": [20, 45, 110, 152, 167, 170], "2043": 20, "2001": 20, "onnxrtbertdataset": 20, "data_dir": 20, "model_name_or_path": [20, 153, 162], "max_seq_length": [20, 36, 168], "128": [20, 23, 24, 36, 99, 104, 110, 153, 161, 164, 168, 170], "do_lower_cas": [20, 35, 36, 168], "mrpc": [20, 45, 152, 159, 169, 170], "dynamic_length": 20, "onnxrt": [20, 22, 29, 36, 45, 89, 118, 154, 161, 170], "dir": [20, 87, 90, 144, 147], "shortcut": 20, "token": [20, 33, 36, 38, 39, 87, 97, 99, 110, 117, 152, 153, 164, 166, 167, 168, 169], "longer": [20, 36, 168], "than": [20, 36, 91, 95, 99, 110, 117, 135, 147, 156, 157, 158, 159, 161, 164, 166, 168, 169], "truncat": [20, 36, 168], "shorter": [20, 36, 168], "pad": [20, 36, 168], "lowercas": 20, "fine": [20, 100, 137, 159, 160, 161], "choic": [20, 99, 103, 110, 118, 152, 167], "qqp": [20, 152, 170], "qnli": [20, 152, 170], "rte": [20, 152, 170], "st": [20, 152], "b": [20, 91, 99, 110, 114, 136, 152, 159, 164, 167, 169], "cola": [20, 152, 170], "mnli": [20, 152, 170], "wnli": [20, 152], "mobilebert": 20, "roberta": [20, 170], "fix": [20, 99, 138, 159, 161, 164, 169], "uncas": [20, 36, 168, 170], "load_and_cache_exampl": 20, "cach": [20, 99, 110, 144, 161, 164], "helper": [20, 21, 22, 35, 54, 82, 83, 84, 89], "convert_examples_to_featur": [20, 36], "max_length": 20, "label_list": [20, 45], "output_mod": 20, "classif": [20, 36, 45, 143, 152, 159, 160], "pad_token": 20, "pad_token_segment_id": 20, "mask_padding_with_zero": 20, "inputfeatur": [20, 36], "properti": [20, 76, 150], "input_id": [20, 36, 153], "vocabulari": [20, 35, 36, 168], "attention_mask": [20, 153], "mask": [20, 41, 159, 170], "avoid": [20, 105, 115, 137], "usual": [20, 103, 110, 119, 158, 159, 161, 162, 167], "NOT": [20, 145], "token_type_id": [20, 153], "segment": [20, 39, 41, 114], "portion": 20, "them": [20, 99, 100, 110, 115, 120, 138, 143, 145, 147, 149, 158, 159, 164, 169], "problem": [20, 45, 96, 152, 154], "regress": [20, 114], "seq_length": 20, "tensorflowbertdataset": 20, "root": [20, 21, 22, 25, 45, 141, 152, 153], "label_fil": [20, 36, 168], "tfrecord": [20, 21, 22], "guid": [20, 103, 115, 117, 137, 149], "parsedecodebert": 20, "tensorflowmodelzoobertdataset": [20, 21], "pars": [20, 21, 32, 36, 119, 120, 168], "num_cor": [20, 21, 25], "28": [20, 21, 25, 170], "three": [20, 59, 61, 96, 100, 104, 110, 115, 118, 119, 136, 149, 154, 158, 161, 163, 166, 167], "tf": [20, 21, 22, 36, 52, 54, 101, 103, 117, 137, 141, 149, 155, 160, 163, 168], "record": [20, 21, 22, 28, 91, 104, 164, 166, 169], "resiz": [20, 21, 32, 36, 168], "coco": [21, 28, 41, 45, 152, 159], "parsedecodecoco": 21, "cocorecorddataset": 21, "interleav": 21, "parallel": [21, 153, 169], "cocoraw": 21, "img_dir": 21, "val2017": 21, "anno_dir": 21, "annot": [21, 41, 119, 120, 152, 159, 169], "instances_val2017": 21, "arrang": [21, 22, 25, 159], "wai": [21, 22, 25, 54, 99, 102, 110, 120, 138, 152, 153, 158, 159, 161, 164, 167, 169], "jpg": [21, 25, 27, 117], "imag": [21, 22, 25, 27, 32, 36, 41, 110, 117, 141, 143, 159, 167, 168, 170], "coconpi": 21, "npy_dir": 21, "npy": 21, "tensorflowdataset": 22, "pytorchdataset": 22, "mxnetdataset": 22, "onnxrtqldataset": 22, "onnxrtitdataset": 22, "IT": [22, 29, 160], "pytorchmxnetwrapdataset": 22, "datafunc": 22, "pytorchmxnetwrapfunct": [22, 36], "framework_dataset": 22, "convent": [22, 41, 95, 114, 156], "imageclassifi": 22, "choos": [22, 87, 100, 110, 148, 160, 165, 167, 169], "tensorflow_itex": [22, 25, 27, 29, 138], "onnxrt_qdq": [22, 29], "onnxrt_qlinearop": [22, 29, 36], "onnxrt_integerop": [22, 29, 36], "pytorch_ipex": [22, 29, 153], "pytorch_fx": [22, 29, 153], "dataset_registri": 22, "dataset_typ": 22, "dataset_format": 22, "data_format": [22, 32], "eg": 22, "raw_imag": 22, "overwrit": 22, "__getitem__": [22, 36, 138, 153], "__len__": 22, "iterabledataset": 22, "also": [22, 36, 38, 45, 56, 58, 99, 100, 101, 102, 108, 110, 114, 118, 119, 120, 138, 142, 146, 148, 152, 153, 157, 159, 160, 161, 163, 164, 167, 169], "__iter__": [22, 138, 153], "over": [22, 45, 119, 142, 146, 148, 152, 159, 167, 169], "download_url": 22, "url": [22, 114, 150, 159], "filenam": [22, 91], "md5": 22, "download": [22, 149, 165], "address": [22, 96, 104, 113, 137, 154, 160], "gen_bar_updat": 22, "progress": [22, 159, 161], "bar": [22, 160], "check_integr": 22, "fpath": 22, "check": [22, 82, 90, 91, 103, 105, 117, 141, 149, 165], "checksum": 22, "calculate_md5": 22, "chunk_siz": 22, "1024": 22, "cifar10": 22, "cifar100": 22, "databas": 22, "extract": [22, 76], "otherwis": [22, 36, 91, 99, 113, 119, 164, 168], "www": [22, 170], "c": [22, 91, 99, 105, 110, 144, 164, 169], "toronto": 22, "edu": 22, "kriz": 22, "cifar": [22, 170], "tar": 22, "gz": 22, "manual": [22, 159], "subset": [22, 25], "internet": 22, "put": 22, "again": [22, 163], "pytorchcifar10": 22, "mxnetcifar10": 22, "tensorflowcifar10": 22, "pytorchcifar100": 22, "mxnetcifar100": 22, "tensorflowcifar100": 22, "mnist": [22, 141], "modifi": [22, 76, 115, 120, 141, 145, 159], "nation": [22, 113], "institut": 22, "standard": [22, 36, 114, 119, 137, 143, 152, 168, 169], "technologi": [22, 95, 151, 153, 156], "fashionmnist": 22, "npz": 22, "idx1": 22, "ubyt": 22, "idx3": 22, "t10k": 22, "pytorchmnist": 22, "mxnetmnist": 22, "tensorflowmnist": 22, "pytorchfashionmnist": 22, "mxnetfashionmnist": 22, "tensorflowfashionmnist": 22, "imagefold": [22, 141, 153], "expect": [22, 99, 101, 110, 113, 114, 144, 151, 161, 164, 169], "folder": [22, 27, 46, 58, 90, 99, 100, 164], "subfold": 22, "belong": [22, 50, 161], "class_1": 22, "xxx": [22, 153], "png": 22, "xxy": 22, "xxz": 22, "class_n": 22, "123": [22, 168], "nsdf3": 22, "asd932_": 22, "categori": [22, 40, 135], "mxnetimagefold": 22, "tensorflowtfrecorddataset": 22, "tensorflowimagerecord": 22, "imagenet": [22, 25, 32, 101, 153, 159, 168, 170], "000": [22, 117], "001": [22, 110, 141, 167], "099": 22, "tensorflowvocrecord": 22, "pascal": 22, "voc": [22, 45], "2012": 22, "val": [22, 25, 153], "00000": 22, "00004": 22, "00001": 22, "00003": 22, "dummi": [23, 24, 45, 103, 117, 146, 152, 153], "dummydataset": [23, 24, 103], "shape": [23, 24, 32, 36, 41, 99, 103, 110, 117, 145, 146, 153, 164, 167, 168], "high": [23, 24, 103, 149, 160, 169], "127": [23, 24, 110, 161, 167], "float32": [23, 24, 36, 41, 87, 99, 110, 118, 135, 153, 161, 164, 167, 168], "rang": [23, 24, 36, 77, 87, 94, 95, 96, 99, 100, 103, 105, 110, 117, 118, 120, 136, 140, 141, 153, 156, 158, 159, 161, 164, 167, 168], "stand_norm": [23, 24], "real": [23, 110, 119, 136, 141, 160, 161], "dummy_v2": 24, "sparse_dummy_v2": 24, "input_shap": 24, "label_shap": 24, "sparsedummydataset": 24, "dense_shap": 24, "sparse_ratio": 24, "imagenetraw": 25, "data_path": 25, "image_list": 25, "img1": 25, "img2": 25, "imgx": 25, "read": [25, 36, 163, 166], "val_map": 25, "txt": [25, 149], "pytorchimagenetraw": 25, "mxnetimagenetraw": 25, "tensorflowimagenetraw": 25, "inteltensorflow": [25, 27], "tensorflowimagenetdataset": 25, "onnxrtimagenetdataset": 25, "class": [26, 46, 58, 99, 100, 101, 103, 104, 115, 119, 137, 138, 152, 153, 157, 158, 161, 165, 169], "bert_dataset": 26, "coco_dataset": 26, "dummy_dataset": 26, "dummy_dataset_v2": 26, "imagenet_dataset": 26, "style_transfer_dataset": 26, "style": [27, 137, 147], "transfer": [27, 110, 140, 153, 167], "styletransferdataset": 27, "content_fold": 27, "style_fold": 27, "crop_ratio": 27, "resize_shap": 27, "256": [27, 32, 141, 153, 168], "image_format": 27, "holder": 27, "labelbalancecocorecordfilt": 28, "balanc": [28, 95, 97, 99, 103, 110, 156, 164, 167], "labelbalancecocorawfilt": 28, "tensorflowfilt": 29, "onnxrtqlfilt": 29, "onnxrtitfilt": 29, "pytorchfilt": 29, "mxnetfilt": 29, "filter_registri": 29, "filter_typ": 29, "__call__": 29, "write": [29, 91, 141, 147, 153], "coco_filt": 30, "quantizedinput": [32, 168], "uint8": [32, 41, 76, 103, 110, 118, 145, 161, 168], "point": [32, 42, 43, 62, 91, 94, 95, 96, 97, 98, 99, 102, 110, 152, 156, 161, 164, 167, 168, 169], "labelshift": [32, 168], "label_shift": [32, 168], "parsedecodeimagenet": [32, 168], "proto": [32, 36, 168], "parsedecodeimagenettransform": 32, "decod": [32, 38, 152, 168], "v1": [32, 42, 43, 45, 54, 97, 141, 143, 144, 152, 155, 159, 165, 166, 167, 170], "tensorflowtransposelastchannel": 32, "transpos": [32, 36, 83, 164, 168], "nhwc": 32, "nchw": 32, "tensorflowshiftrescal": 32, "rescal": [32, 36, 168], "tensorflowresizecropimagenettransform": 32, "height": [32, 36, 141, 168], "width": [32, 36, 110, 136, 141, 159, 161, 168], "random_crop": [32, 168], "resize_sid": [32, 168], "resize_method": 32, "bilinear": [32, 36, 168], "random_flip_left_right": [32, 168], "mean_valu": [32, 168], "channels_last": 32, "subpixel": 32, "rgb": 32, "seri": [32, 117, 149, 153, 168], "applic": [32, 99, 101, 110, 120, 143, 160, 164, 167, 168], "result": [32, 36, 38, 41, 42, 43, 45, 58, 65, 77, 90, 91, 94, 97, 99, 102, 104, 105, 110, 112, 113, 117, 138, 141, 148, 150, 152, 153, 157, 159, 160, 161, 164, 166, 167, 168, 169, 170], "crop": [32, 36, 168], "flip": [32, 36, 168], "left": [32, 36, 110, 167, 168], "right": [32, 41, 110, 113, 114, 115, 167, 168], "std": [32, 36, 153, 168], "bilinearimagenettransform": 32, "central_fract": [32, 168], "875": [32, 168], "fraction": [32, 168], "onnxbilinearimagenettransform": 32, "onnxresizecropimagenettransform": 32, "std_valu": 32, "229": [32, 153], "225": [32, 153, 170], "resizewithaspectratio": 32, "87": [32, 170], "inter_pol": 32, "cv2": 32, "inter_area": 32, "aspect": [32, 36, 168], "imagenet_transform": 33, "postprocess_cl": [34, 153], "user_postprocess": 34, "just": [34, 36, 56, 98, 103, 110, 153, 158, 161, 167, 168, 169], "convert_to_unicod": 35, "text": [35, 36, 38, 43, 95, 97, 99, 110, 143, 150, 156, 159, 160, 164, 167, 168, 170], "unicod": 35, "assum": [35, 41, 118, 145], "utf": 35, "load_vocab": 35, "vocab_fil": [35, 36, 168], "convert_by_vocab": 35, "vocab": 35, "whitespace_token": 35, "whitespac": [35, 43], "clean": [35, 153], "split": [35, 36, 110, 115, 162, 164, 167, 168], "piec": [35, 38, 99, 110, 152, 164], "fulltoken": 35, "tokenzi": 35, "basictoken": 35, "punctuat": [35, 38, 43], "lower": [35, 36, 43, 63, 94, 95, 98, 103, 110, 140, 156, 159, 160, 161, 167, 168, 169], "wordpiecetoken": 35, "unk_token": 35, "unk": 35, "max_input_chars_per_word": 35, "200": [35, 99, 115, 169], "wordpiec": [35, 36, 168], "concat_gener": 36, "inc": [36, 100, 103, 104, 113, 117, 119, 151, 160, 165, 169], "abstract": [36, 118, 120, 147], "own": [36, 56, 110, 112, 119, 138, 148, 152, 157, 164, 166], "inherit": [36, 118, 119], "tensorflowtransform": 36, "mxnettransform": 36, "pytorchtransform": 36, "onnxrtqltransform": 36, "onnxrtittransform": 36, "transform_registri": 36, "transform_typ": 36, "basetransform": 36, "tensorflowwrapfunct": 36, "transform_func": 36, "pytorchmxnettransform": 36, "get_torchvision_map": 36, "interpol": [36, 152, 159, 168], "torchvis": [36, 117, 142, 146], "composetransform": 36, "transform_list": [36, 168], "sever": [36, 95, 96, 106, 110, 140, 148, 153, 154, 156, 159, 162, 167, 168, 169], "croptoboundingbox": [36, 168], "offset_height": [36, 168], "offset_width": [36, 168], "target_height": [36, 168], "target_width": [36, 168], "box": [36, 41, 45, 115, 152, 168, 169], "vertic": [36, 168], "coordin": [36, 62, 168, 169], "top": [36, 45, 114, 152, 168], "corner": [36, 114, 118, 120, 168], "horizont": [36, 168], "mxnetcroptoboundingbox": 36, "onnxrtcroptoboundingbox": 36, "tensorflowcroptoboundingbox": 36, "resizewithratio": [36, 168], "min_dim": [36, 168], "800": [36, 168], "max_dim": [36, 168], "1365": [36, 168], "constant_valu": 36, "np": [36, 62, 141, 167, 168, 169], "arrai": [36, 41, 91, 168], "smaller": [36, 95, 153, 156, 159, 168], "dimens": [36, 99, 164, 168], "ensur": [36, 62, 98, 101, 141, 161, 168], "longest": [36, 168], "side": [36, 117, 168], "doesn": [36, 96, 103, 118, 141, 153, 154], "exce": [36, 164, 168], "zero": [36, 91, 95, 98, 99, 110, 156, 159, 161, 164, 167, 168, 169], "tensorflowresizewithratio": 36, "perm": [36, 168], "permut": [36, 168], "tensorflowtranspos": 36, "mxnettranspos": 36, "pytorchtranspos": 36, "randomverticalflip": [36, 168], "randomli": [36, 62, 110, 167, 168, 169], "tensorflowrandomverticalflip": 36, "randomhorizontalflip": [36, 153, 168], "tensorflowrandomhorizontalflip": 36, "toarrai": [36, 168], "pil": [36, 168], "ndarrai": [36, 78, 144, 168], "numpi": [36, 41, 144, 167, 168], "casttftransform": 36, "castonnxtransform": 36, "castpytorchtransform": 36, "centercroptftransform": 36, "center": [36, 116, 117, 149, 168, 169], "paddedcentercroptransform": 36, "crop_pad": 36, "resizetftransform": 36, "nearest": [36, 99, 100, 110, 164, 168], "bicub": [36, 168], "resizepytorchtransform": 36, "randomcroptftransform": 36, "randomresizedcroppytorchtransform": 36, "08": [36, 168, 170], "randomresizedcropmxnettransform": 36, "randomresizedcroptftransform": 36, "normalizetftransform": 36, "normal": [36, 43, 99, 110, 153, 157, 164, 167, 168], "deviat": [36, 168], "broadcast": [36, 141, 168], "rescalekeraspretraintransform": 36, "rescaletftransform": 36, "rescaletransform": 36, "alignimagechanneltransform": 36, "dim": [36, 110, 167, 168], "align": [36, 113, 164, 168], "w": [36, 97, 110, 159, 167, 168], "must": [36, 41, 114, 115, 119, 135, 138, 149, 161, 168], "pytorchalignimagechannel": 36, "tondarraytransform": 36, "resizemxnettransform": 36, "resizetransform": 36, "cropresizetftransform": 36, "boundari": [36, 168], "area": [36, 41, 95, 152, 156, 168], "pytorchcropresizetransform": 36, "mxnetcropresizetransform": 36, "cropresizetransform": 36, "centercroptransform": 36, "mxnetnormalizetransform": 36, "pytorchnormalizetransform": 36, "normalizetransform": 36, "randomcroptransform": 36, "randomresizedcroptransform": 36, "get_final_text": 36, "pred_text": 36, "orig_text": 36, "project": [36, 111, 113, 114, 160, 166, 169, 171], "predict": [36, 38, 42, 43, 45, 58, 99, 110, 152, 164, 167, 168], "back": 36, "squadexampl": 36, "qas_id": 36, "question_text": 36, "doc_token": 36, "orig_answer_text": 36, "start_posit": 36, "end_posit": 36, "is_imposs": 36, "without": [36, 76, 95, 110, 113, 141, 153, 156, 159, 160, 161, 169], "answer": [36, 42, 43, 113, 159, 168, 170], "posit": [36, 113, 152], "unique_id": 36, "example_index": 36, "doc_span_index": 36, "token_to_orig_map": 36, "token_is_max_context": 36, "input_mask": [36, 153], "segment_id": [36, 153], "read_squad_exampl": 36, "input_fil": 36, "doc_strid": [36, 168], "max_query_length": [36, 168], "output_fn": 36, "inputbatch": 36, "collecttransform": 36, "10833": 36, "tfsquadv1posttransform": 36, "n_best_siz": [36, 168], "20": [36, 106, 159, 168, 170], "384": [36, 168], "64": [36, 96, 104, 110, 151, 164, 167, 168, 170], "max_answer_length": [36, 168], "30": [36, 142, 146, 148, 168, 170], "total": [36, 45, 99, 159, 164, 168, 170], "best": [36, 67, 99, 100, 101, 102, 104, 113, 117, 137, 149, 157, 161, 164, 167, 168, 169], "nbest_predict": [36, 168], "question": [36, 42, 43, 110, 113, 114, 117, 118, 149, 159, 167, 168, 170], "becaus": [36, 102, 110, 115, 161, 167, 168, 169], "anoth": [36, 38, 91, 168, 169], "up": [36, 110, 117, 141, 142, 145, 148, 159, 160, 161, 166, 168, 169], "long": [36, 99, 137, 144, 164, 168], "document": [36, 96, 101, 102, 110, 112, 119, 120, 125, 141, 151, 154, 159, 165, 168], "chunk": [36, 168], "stride": [36, 168], "tfmodelzoocollecttransform": 36, "zoo": [36, 117, 142, 146, 170], "tfsquadv1modelzooposttransform": 36, "squadv1": [36, 168], "see": [36, 38, 99, 110, 113, 114, 115, 116, 137, 150, 153, 164, 167, 169], "parsedecodevoctransform": 36, "intel": [37, 44, 45, 57, 58, 66, 72, 81, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 107, 108, 110, 112, 113, 114, 116, 118, 119, 120, 136, 139, 140, 142, 143, 145, 146, 150, 151, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 167, 169, 170], "open": [37, 80, 93, 113, 117, 143, 144, 153, 160], "librari": [37, 93, 96, 103, 117, 149, 153, 154, 160, 161], "popular": [37, 93, 100, 104, 110, 112, 117, 118, 119, 136, 142, 143, 146, 151, 153, 159, 161, 164, 169], "compress": [37, 56, 77, 87, 93, 97, 99, 100, 102, 104, 108, 110, 112, 117, 125, 148, 153, 157, 158, 159, 160, 161, 167, 170], "techniqu": [37, 93, 98, 103, 104, 108, 110, 112, 117, 148, 153, 158, 159, 160, 161, 170], "contrib": 37, "script": [38, 39, 42, 43, 114, 117, 141, 148, 160], "unicoderegex": 38, "hoc": 38, "hack": 38, "recogn": [38, 169], "symbol": [38, 46, 58, 115, 155], "nondigit_punct_r": 38, "compil": [38, 94, 98, 153], "regular": 38, "express": [38, 113], "preced": [38, 110, 167, 169], "digit": [38, 91, 160], "punct_nondigit_r": 38, "symbol_r": 38, "bleu_token": 38, "offici": [38, 42, 43, 113, 167], "mose": 38, "smt": 38, "mosesdecod": 38, "blob": [38, 39, 42, 43, 45, 58, 153], "master": [38, 39, 42, 43, 45, 58, 153, 169], "mteval": 38, "v14": 38, "pl": 38, "l954": 38, "l983": 38, "comput": [38, 39, 42, 43, 45, 77, 91, 95, 96, 98, 99, 110, 136, 138, 140, 143, 152, 153, 154, 156, 159, 160, 161, 164, 167, 169], "bilingu": 38, "understudi": 38, "qualiti": [38, 137], "ha": [38, 96, 101, 103, 110, 114, 118, 119, 120, 138, 143, 148, 153, 154, 159, 161, 163, 166, 167, 169], "been": [38, 96, 99, 103, 110, 120, 137, 153, 154, 164, 167], "machin": [38, 99, 106, 143, 149, 160, 167], "translat": [38, 39, 95, 156, 159, 169], "natur": [38, 99, 143], "approxim": [38, 39, 99, 106, 119, 152, 164], "glue": [38, 45, 152, 153], "word": [38, 99, 110, 137, 152, 159, 164, 170], "ngram": [38, 152], "breviti": [38, 39, 152], "penalti": [38, 39, 152], "doe": [38, 76, 98, 99, 103, 137, 138, 152, 153, 164, 165, 168], "have": [38, 41, 45, 58, 76, 95, 96, 97, 99, 104, 110, 113, 114, 119, 120, 137, 138, 141, 145, 150, 152, 153, 154, 156, 157, 159, 161, 162, 164, 167, 169], "beam": [38, 152], "bleu": [39, 44, 152, 159], "tensor2tensor": 39, "bleu_hook": 39, "compute_bleu": 39, "reference_corpu": 39, "translation_corpu": 39, "max_ord": 39, "use_bp": 39, "against": 39, "gram": 39, "appli": [39, 95, 98, 102, 103, 104, 110, 112, 113, 119, 120, 153, 156, 158, 159, 161, 163, 166, 167, 169], "bleu_scor": 39, "third": [41, 114, 150], "parti": [41, 110, 114, 150, 161], "pycocotool": [41, 144], "noth": [41, 169], "relat": [41, 76, 80, 108, 120, 159, 164], "thu": [41, 110, 153, 159, 161], "cannot": [41, 99, 115, 137, 144, 164], "slim": [41, 52, 54, 155, 159], "jonathanhuang": 41, "wrap": [41, 115, 141], "image_id": [41, 152], "encod": [41, 168], "invok": [41, 119], "groundtruth_dict": 41, "exportgroundtruthtococo": 41, "groundtruth_boxes_list": 41, "groundtruth_classes_list": 41, "max_num_class": 41, "output_path": 41, "detections_list": 41, "exportdetectionstococo": 41, "detection_boxes_list": 41, "detection_scores_list": 41, "detection_classes_list": 41, "cocowrapp": 41, "loadannot": 41, "cocoevalwrapp": 41, "agnostic_mod": 41, "computemetr": 41, "detection_typ": 41, "bbox": [41, 115, 152], "hold": [41, 62], "being": [41, 120], "iou_typ": 41, "iou_thr": [41, 45, 152], "map_point": [41, 45, 152], "cocoev": 41, "To": [41, 56, 95, 96, 97, 98, 99, 102, 104, 105, 110, 114, 117, 119, 120, 137, 141, 154, 156, 159, 163, 164, 165, 167, 169], "mscoco": 41, "org": [41, 115, 159], "Then": [41, 110, 119, 167, 169], "exportsingleimagegroundtruthtococo": 41, "next_annotation_id": 41, "category_id_set": 41, "groundtruth_box": 41, "groundtruth_class": 41, "groundtruth_mask": 41, "groundtruth_is_crowd": 41, "ingest": 41, "api": [41, 45, 58, 73, 74, 91, 97, 99, 104, 108, 110, 115, 117, 121, 123, 127, 130, 133, 143, 148, 149, 153, 165, 166, 169, 171], "here": [41, 97, 98, 102, 103, 106, 110, 119, 141, 142, 143, 145, 146, 151, 152, 161, 165, 166, 167, 170], "match": [41, 42, 98, 105, 117, 164], "ones": [41, 159], "exportsingleimagedetectionstococo": 41, "associ": 41, "uniqu": [41, 110, 161], "identifi": [41, 54, 104, 159, 164], "assign": [41, 91, 141, 169], "continu": [41, 151, 153, 159], "drop": [41, 96, 97, 99, 110, 114, 153, 154, 159, 164, 167, 170], "num_gt_box": 41, "num_detect": [41, 45, 152, 153], "image_height": 41, "image_width": 41, "detection_mask": 41, "crowd": 41, "rais": [41, 46, 117, 137, 159, 160], "valueerror": [41, 144], "insid": [41, 140, 159, 162, 169], "exportsingleimagedetectionboxestococo": 41, "detection_box": [41, 153], "detection_scor": [41, 153], "detection_class": [41, 153], "exporsingleimagedetectionboxestococo": 41, "exportsingleimagedetectionmaskstococo": 41, "allenai": [42, 43], "bi": [42, 43], "att": [42, 43], "flow": [42, 43, 110, 115, 153], "f1_score": [42, 43], "ground_truth": [42, 43], "f1": [42, 44, 45, 141, 152, 153, 166, 170], "ground": [42, 43], "truth": [42, 43], "metric_max_over_ground_truth": [42, 43], "metric_fn": [42, 43], "exact_match_scor": 42, "exact": 42, "averag": [42, 43, 45, 99, 152, 153, 164, 169, 170], "articl": [42, 43], "paragraph": [42, 43], "qa": [42, 43, 117], "normalize_answ": 43, "remov": [43, 113, 153, 159], "extra": [43, 99, 153, 164], "replac": [43, 94, 95, 98, 137, 141, 153, 156, 165], "newlin": [43, 91], "tab": 43, "abc": [43, 118, 169], "harmon": [43, 45], "recal": [43, 45], "equat": [43, 45, 110, 161, 167], "answer_start": 43, "177": [43, 170], "denver": 43, "bronco": 43, "nfl": 43, "afc": 43, "super": 43, "bowl": 43, "50": [43, 110, 119, 159, 167, 170], "56be4db0acb8001400a502ec": 43, "form": 43, "percentag": [43, 99, 136, 164], "bleu_util": 44, "coco_label_map": 44, "coco_tool": 44, "evaluate_squad": 44, "user_metr": [45, 58], "metric_cl": [45, 58, 153], "recommend": [45, 106, 108, 117, 118, 145, 159, 169], "design": [45, 63, 98, 100, 103, 112, 117, 153, 159, 161], "sub_class": [45, 58], "basemetr": [45, 58], "tensorflowmetr": 45, "maintain": [45, 98, 99, 103, 110, 113, 114, 137, 155, 159, 164, 165], "pytorchmetr": 45, "mxnetmetr": 45, "onnxrtqlmetr": 45, "onnxrtitmetr": 45, "metric_registri": 45, "metric_typ": 45, "cross": [45, 105, 147, 169], "decorator_metr": 45, "single_output": 45, "hvd": [45, 141], "wrappytorchmetr": 45, "wrapmxnetmetr": 45, "wraponnxrtmetr": 45, "binari": [45, 144, 152, 165], "proport": 45, "were": [45, 159], "pred_list": 45, "pytorchloss": 45, "print": [45, 91, 105, 110, 141, 152, 153, 159, 167, 169], "mae": [45, 152], "compare_label": [45, 58, 152], "error": [45, 67, 88, 99, 110, 152, 164, 167, 169], "actual": [45, 98, 141], "compar": [45, 91, 95, 98, 99, 104, 110, 140, 152, 156, 159, 161, 164, 166, 169], "pred": [45, 152], "rmse": [45, 152, 169], "squar": [45, 67, 99, 152, 169], "estim": [45, 54, 106, 169], "tensorflowtopk": 45, "k": [45, 58, 152, 159], "among": [45, 95, 110, 156, 167], "outcom": 45, "consid": [45, 113, 136, 137, 169], "find": [45, 62, 91, 104, 118, 151, 159, 164, 166, 167, 169], "num_correct": 45, "num_sampl": 45, "generaltopk": 45, "cocomapv2": [45, 152], "anno_path": [45, 152], "95": [45, 151, 152, 170], "map_kei": 45, "detectionboxes_precis": 45, "output_index_map": [45, 152], "tensorflowmap": 45, "tensorflowcocomap": 45, "tensorflowvocmap": 45, "squadf1": [45, 152], "miou": 45, "num_class": 45, "21": [45, 110, 151, 160, 167, 170], "iou": 45, "intersect": [45, 118, 152], "onnxrtglu": 45, "roc": 45, "dlrm": 45, "register_customer_metr": 45, "mani": [45, 58, 99, 103, 110, 137, 138, 149, 164, 169], "tell": [45, 58], "what": [45, 58, 77, 103, 113, 160], "topk": [45, 58, 141, 152, 153, 161], "matrix": [45, 58, 102, 110], "updat": [45, 58, 99, 112, 144, 151, 152, 153, 159, 164, 167, 169], "across": [46, 95, 104, 108, 139, 153, 156, 159, 162, 167, 169], "frozen": [46, 54, 58, 155], "graph_def": [46, 54, 58, 83], "ckpt": [46, 54, 58, 170], "savedmodel": [46, 54, 58], "onnx_ml_pb2": [46, 155], "modelproto": [46, 82, 155], "gluon": [46, 58, 155], "hybirdblock": [46, 58], "mixed_precis": [46, 153], "obj": [46, 56, 58, 77, 80, 91], "measur": [46, 86, 99, 103, 108, 110, 118, 135, 152, 153, 164, 169], "variou": [46, 95, 98, 100, 103, 120, 148, 156, 159, 162], "dl": [46, 147, 160, 170], "assertionerror": 46, "basemodel": [47, 103], "plai": [47, 99, 110, 160, 164, 167], "graph": [47, 54, 94, 98, 110, 115, 118, 141, 147, 155, 161, 162, 163], "role": [47, 99, 110, 164, 167], "base_model": 48, "keras_model": 48, "mxnet_model": 48, "nets_factori": 48, "onnx_model": 48, "tensorflow_model": 48, "torch_model": 48, "kerasmodel": 49, "get_model_fwk_nam": 50, "fwk": 50, "mxnetmodel": 51, "net": [52, 117], "factori": 52, "tfslimnetsfactori": 52, "onnxmodel": 53, "get_model_typ": 54, "validate_graph_nod": 54, "node_nam": [54, 119], "node": [54, 82, 84, 105, 118, 141, 162, 169, 170], "compat": [54, 114, 141, 155, 159, 165], "graphdef": [54, 155], "validate_and_inference_input_output": 54, "input_tensor_nam": 54, "output_tensor_nam": 54, "infer": [54, 56, 58, 77, 96, 97, 98, 99, 102, 103, 108, 110, 117, 118, 119, 136, 140, 153, 154, 157, 159, 160, 161, 164, 167, 169], "graph_sess": 54, "session": [54, 153], "sess": 54, "graph_def_sess": 54, "frozen_pb_sess": 54, "load_saved_model": 54, "saved_model_tag": 54, "signatur": 54, "tag": [54, 110, 167], "metagraphdef": 54, "analyz": [54, 166, 167], "input_tensor": 54, "output_tensor": 54, "try_loading_kera": 54, "try": [54, 103, 110, 115, 117, 159, 161, 167, 169], "keras_sess": 54, "slim_sess": 54, "checkpoint_sess": 54, "estimator_sess": 54, "input_fn": 54, "saved_model_sess": 54, "tensorflowbasemodel": 54, "tensorflowsavedmodelmodel": 54, "tensorflowllmmodel": 54, "exceed": 54, "protobuf": 54, "2gb": 54, "tensorflowqatmodel": 54, "tensorflowcheckpointmodel": 54, "checkpoint": [54, 90, 155], "tensorflowmodel": 54, "pytorchbasemodel": 55, "pytorchmodel": 55, "pytorchfxmodel": 55, "ipexmodel": 55, "driven": [56, 108, 117, 153, 157], "objective_registri": 56, "objective_custom_registri": 56, "obj_cl": 56, "eural_compressor": 56, "objective_cl": 56, "user_object": 56, "__class__": 56, "__name__": 56, "objective_cfg": 56, "deep_get": [56, 91], "usr_cfg": 56, "deep_set": [56, 91], "user_obj_cfg": 56, "With": [56, 103, 110, 115, 118, 120, 138, 149, 153, 157, 159, 160, 161, 166, 167, 169, 170], "easili": [56, 104, 110, 118, 157, 167], "special": [56, 100, 115, 138, 152, 153, 157, 159, 164], "peak": [56, 105, 157], "memori": [56, 91, 95, 96, 97, 99, 102, 105, 110, 136, 138, 140, 153, 154, 156, 157, 159, 161, 162, 164, 167, 169, 170], "block": [56, 95, 99, 148, 156, 157, 159, 164, 169], "multiobject": 56, "metric_criterion": 56, "metric_weight": 56, "obj_criterion": 56, "obj_weight": 56, "is_measur": 56, "calib_dataload": [58, 101, 102, 103, 104, 115, 117, 138, 146, 147, 152, 153, 161, 162, 163, 164], "calib_func": [58, 103, 163], "entir": [58, 77, 97, 102, 115, 119, 120, 136, 159], "autotunestrategi": 59, "There": [59, 61, 94, 98, 102, 110, 137, 145, 148, 153, 164, 167, 169], "onc": [59, 61, 119, 120, 138, 159, 160, 169, 170], "polici": [59, 61, 67, 104, 113, 117, 171], "automixedprecisiontunestrategi": 60, "basictunestrategi": 61, "bayesiantunestrategi": 62, "acq_max": 62, "ac": 62, "gp": 62, "y_max": 62, "n_warmup": 62, "10000": [62, 159], "n_iter": 62, "acquisit": 62, "gaussian": [62, 169], "relev": [62, 119, 120, 137, 159], "known": [62, 95, 153, 156, 159, 161, 169], "limit": [62, 91, 95, 99, 100, 103, 117, 151, 156, 161, 164], "acq": 62, "randomst": 62, "scipi": 62, "x_max": 62, "targetspac": 62, "pbound": 62, "9527": [62, 153], "append": [62, 115, 140, 153, 158], "while": [62, 96, 98, 99, 103, 110, 118, 119, 142, 148, 154, 159, 161, 164, 167], "duplic": 62, "bayesianoptim": 62, "verbos": [62, 84], "conservativetunestrategi": 63, "o0": [63, 169], "who": [63, 113], "exhaustivetunestrategi": 64, "hawq_v2tunestrategi": 65, "hawq": [65, 169], "v2": [65, 97, 138, 141, 143, 144, 151, 165, 167, 169, 170], "hessian": [65, 99, 164, 169], "network": [65, 95, 110, 136, 140, 143, 153, 156, 160, 161, 167, 169], "made": [65, 110, 118, 161, 165, 169], "small": [65, 99, 110, 159, 164, 169, 170], "impact": [65, 159, 165, 169], "auto_mixed_precis": 66, "msetunestrategi": 67, "those": [67, 91, 98, 103, 110, 140, 147, 153, 154, 158, 159, 161, 169], "mse_v2tunestrategi": 68, "revert": [68, 76, 169], "fx": [68, 94, 96, 98, 148, 154, 160, 161, 163], "randomtunestrategi": 69, "strategy_registri": [70, 169], "tunestrategi": [70, 169], "tunestrategymeta": 70, "metaclass": 70, "tuning_sampl": 72, "tuning_spac": [72, 73, 75], "tuning_struct": [72, 73, 74], "tuningord": 73, "Not": [73, 74, 91, 137], "tuningsampl": 73, "tuningspac": [73, 74], "tuning_order_lst": 73, "initial_op_tuning_cfg": 73, "modelwisetuningsampl": 73, "tuning_items_prior": 73, "op_dtype_dict": 73, "optuningconfig": [73, 74, 75], "optypewisetuningsampl": 73, "opwisetuningsampl": 73, "fallbacktuningsampl": 73, "op_dtyp": 73, "accumul": [73, 95, 99, 156, 169], "skip_first": 73, "lowerbitssampl": 73, "blockfallbacktuningsampl": 73, "op_block_lst": 73, "target_dtyp": 73, "smoothquantsampl": 73, "alpha_list": 73, "weightonlyquantsampl": 73, "tuningitem": 74, "item_typ": 74, "capabl": [74, 96, 99, 110, 119, 120, 135, 145, 153, 154, 159, 161, 169], "intern": [74, 138, 152, 159], "merg": [74, 105, 169], "tree": 74, "pattern_to_intern": 74, "default_dtyp": 74, "pattern_to_path": 74, "quant_mode_from_pattern": 74, "internal_pattern": 74, "initial_tuning_cfg_with_quant_mod": 74, "op_name_typ": 74, "quant_mod": [74, 119, 120], "cfg": [74, 80, 119, 120], "step1": 74, "step2": 74, "complet": [74, 118, 119, 159, 161, 169, 170], "step3": 74, "step4": 74, "step5": 74, "op_typ": [75, 97, 98], "op_quant_mod": 75, "quanttyp": 76, "quantopt": 76, "quant_typ": 76, "quant_opt": 76, "preprocess_user_cfg": 76, "op_user_cfg": 76, "op_user_cfg_modifi": 76, "group_siz": [76, 99, 104, 164], "32": [76, 95, 96, 103, 104, 141, 147, 156, 164, 170], "ordereddefaultdict": 76, "extract_data_typ": 76, "data_typ": 76, "sign": [76, 99, 110, 114, 117, 120, 136, 160, 161, 164, 166], "unsign": [76, 120, 164], "reverted_data_typ": 76, "signed_flag": 76, "get_adaptor_nam": 76, "build_slave_faker_model": 76, "slave": [76, 169], "virtual": [76, 160], "classregist": 76, "loop": [77, 115, 119, 120, 145, 166, 169], "compressionmanag": 77, "deal": 77, "pruningconfig": 77, "orchestr": [77, 112, 148], "callback": [77, 80, 115, 153, 158, 159, 161], "on_train_begin": [77, 115, 140, 153, 158, 159, 161], "train_loop": [77, 153, 158], "epoch": [77, 138, 140, 141, 153, 158, 159], "on_epoch_begin": [77, 80, 140, 153, 158], "batch": [77, 99, 138, 140, 153, 158, 159, 161, 167, 168, 169, 170], "on_step_begin": [77, 80, 140, 153, 158, 159], "on_after_compute_loss": [77, 140, 153, 158], "backward": [77, 110, 140, 141, 153, 158, 159, 161, 165], "on_before_optimizer_step": [77, 140, 153, 158, 159], "on_step_end": [77, 80, 140, 153, 158], "on_epoch_end": [77, 80, 140, 153, 158], "on_train_end": [77, 140, 153, 158, 159, 161], "path_to_sav": 77, "train_func": [77, 141, 153, 161], "top1": [77, 152, 159, 161, 170], "callbacks_list": 77, "layerhistogramcollector": 78, "histogram": [78, 91], "num_bin": 78, "8001": 78, "layer_tensor": 78, "include_lay": 78, "collector": 78, "diverg": [78, 86, 120, 136, 169], "get_func_from_config": 80, "func_dict": 80, "get_preprocess": 80, "get_metr": 80, "get_postprocess": 80, "get_algorithm": 80, "create_dataset": 80, "data_sourc": 80, "cfg_preprocess": 80, "cfg_filter": 80, "create_dataload": 80, "dataloader_cfg": 80, "create_eval_func": 80, "postprocess_cfg": 80, "interfac": [80, 96, 98, 100, 103, 110, 148, 153, 161, 165], "baselin": [80, 104, 166, 167], "create_train_func": 80, "train_cfg": 80, "hook": [80, 140, 153, 159, 167], "Their": 80, "qlinear2qdq": 81, "check_model": 82, "onnx_qlinear_to_qdq": 82, "input_name_to_nod": 82, "qlinearop": [82, 148, 161, 170], "destin": 82, "tf_to_fp32_onnx": 83, "save_path": [83, 84, 118, 155], "inputs_as_nchw": 83, "tool": [83, 91, 110, 117, 118, 153, 159, 160, 161], "tf_to_int8_onnx": 83, "int8_model": [83, 84], "get_node_map": 84, "fp32_model": [84, 91, 97, 98, 102, 103, 162, 164], "fp32_onnx_path": 84, "module_node_map": 84, "get_quantizable_onnx_op": 84, "quantize_nod": 84, "dynamic_quant_export": 84, "pt_fp32_model": 84, "pt_int8_model": 84, "q_config": [84, 118], "weight_typ": 84, "s8": 84, "static_quant_export": 84, "_quantiz": 84, "torch_to_fp32_onnx": 84, "do_constant_fold": 84, "fold": [84, 97, 99, 145, 164, 167], "torch_to_int8_onnx": 84, "auxiliari": 85, "collect_layer_histogram": 85, "create_obj_from_config": 85, "kl_diverg": 85, "load_huggingfac": [85, 153], "weights_detail": 85, "pretrain": 87, "optimizedmodel": 87, "from_pretrain": [87, 108, 117, 153], "save_for_huggingface_upstream": [87, 153], "output_dir": [87, 100, 153], "export_compressed_model": [87, 164], "saved_dir": [87, 164], "use_optimum_format": [87, 164], "enable_full_rang": [87, 99, 162, 164], "compression_dtyp": [87, 164], "int32": [87, 99, 164], "compression_dim": [87, 164], "scale_dtyp": [87, 99, 164], "_type_": 87, "leverag": [87, 94, 98, 101, 104, 110, 117, 143, 158, 161, 164, 169], "symmetr": [87, 103, 120, 161, 164, 168, 169], "comoress": 87, "float16": [87, 99, 164], "msg": 88, "debug": [88, 169], "fatal": 88, "warn": [88, 137], "alia": [88, 91], "is_int8_model": 90, "load_weight_onli": 90, "checkpoint_dir": 90, "layer_wis": [90, 162], "qconfig": [90, 99, 164], "best_model": [90, 96, 101, 102, 103, 104, 164], "pt": [90, 99, 108, 117, 149, 155, 160, 161, 163, 164], "history_cfg": 90, "best_configur": 90, "best_model_weight": 90, "snapshot": 90, "recover_model_from_json": 90, "json_file_path": 90, "recov": [90, 91, 118, 140], "cfg_from_fil": 91, "yaml_fil": [91, 141], "version1_lt_version2": 91, "version1": 91, "version2": 91, "version1_gt_version2": 91, "greater": [91, 103, 159, 169], "version1_eq_version2": 91, "version1_gte_version2": 91, "version1_lte_version2": 91, "time_limit": 91, "context": [91, 99, 110, 164], "get_siz": 91, "seen": [91, 118], "recurs": 91, "compute_spars": 91, "non": [91, 99, 115, 164, 169], "fault_tolerant_fil": 91, "temporari": [91, 113], "equal_dict": 91, "d1": 91, "d2": 91, "compare_kei": 91, "ignore_kei": 91, "except": [91, 99, 137, 161, 162], "ignor": [91, 99, 110, 136, 164, 167, 169], "combine_histogram": 91, "old_hist": 91, "arr": 91, "old": [91, 97, 153, 165], "get_tensor_histogram": 91, "tensor_data": [91, 92], "bin": [91, 144], "2048": [91, 99, 117, 164], "get_all_fp32_data": 91, "get_tuning_histori": 91, "tuning_history_path": 91, "num": 91, "offlin": [91, 97, 102, 103, 110, 113, 153, 161, 167], "str2arrai": 91, "dequantize_weight": 91, "weight_tensor": 91, "min_filter_tensor": 91, "max_filter_tensor": 91, "dequant": [91, 110, 115, 119, 167], "scale_info": 91, "captureoutputtofil": 91, "tmp_file_path": 91, "stream": [91, 170], "sy": [91, 137], "stderr": 91, "captur": [91, 98, 99], "global_st": 91, "load_data_from_pkl": 91, "pkl": 91, "dump_data_to_loc": 91, "show_memory_info": 91, "hint": 91, "show": [91, 95, 110, 113, 141, 153, 156, 167, 169], "dump_class_attr": 91, "dot": [91, 96, 110, 154, 161], "nest": 91, "person": [91, 113, 160], "john": 91, "deep": [91, 95, 96, 100, 103, 110, 112, 117, 118, 119, 138, 148, 149, 153, 154, 156, 160, 161, 169], "sex": [91, 113], "male": 91, "compare_object": 91, "obj1": 91, "obj2": 91, "ignore_attr": 91, "comparison": [91, 164, 165], "alias_param": 91, "param_nam": 91, "param_alia": 91, "alias": [91, 137], "print_tabl": 91, "column_map": 91, "table_entri": 91, "titl": [91, 150, 169], "insert_newlin": 91, "tabl": [91, 95, 108, 120, 143, 156, 170], "prettyt": 91, "column": [91, 99, 110, 164, 167], "handler": [91, 169], "row": [91, 110, 167], "decim": 91, "get_tensors_info": 91, "workload_loc": 91, "about": [91, 106, 112, 113, 137, 138, 153, 159, 163, 169, 170], "workload": [91, 160], "get_weights_detail": 91, "weightdetail": 91, "dump_tabl": 91, "filepath": [91, 137], "file_typ": 91, "csv": 91, "extens": [91, 96, 97, 98, 100, 108, 110, 117, 118, 137, 145, 148, 149, 151, 153, 154, 155, 159, 160, 161, 164, 167, 169], "dump_table_to_csv": 91, "get_number_of_socket": 91, "platform": [91, 105, 110, 117, 148, 160, 161], "opentri": 91, "activation_min": 91, "activation_max": 91, "entri": [91, 100, 137, 150], "print_op_list": 91, "get_op_list": 91, "minmax_file_path": 91, "input_model_tensor": 91, "optimized_model_tensor": 91, "activation_min_max": 91, "calculate_ms": 91, "mse_metric_gap": 91, "fp32_tensor": 91, "dequantize_tensor": 91, "euclidean": 91, "distanc": 91, "check_key_exist": 91, "weightsdetail": 92, "input_tensor_data": 92, "optimized_tensor_data": 92, "weightsstatist": 92, "bitwidth": 94, "factor": [94, 97, 99, 103, 110, 164, 167, 170], "whole": [94, 110, 120, 161, 170], "observ": [94, 98, 99, 100, 120, 164, 166, 169], "runtim": [94, 110, 114, 117, 118, 119, 121, 138, 142, 145, 148, 154, 156, 164, 169], "w8a8": [94, 98, 99, 110, 162, 164], "x86inductorquant": 94, "four": [94, 98, 104, 170], "prepar": [94, 95, 97, 98, 99, 100, 103, 106, 108, 110, 115, 141, 146, 159, 161], "neural_compressor": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 115, 117, 120, 135, 137, 138, 140, 141, 143, 146, 147, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169], "dynamicquantconfig": 94, "userfloatmodel": [94, 98], "eager": [94, 98, 99, 100, 117, 141, 148, 161, 163], "exported_model": [94, 98], "quant_config": [94, 95, 97, 98, 99, 100, 101, 102, 103, 106, 108, 156], "prepared_model": [94, 97, 98, 106, 108], "q": [94, 98, 100, 110, 164, 167], "dq": [94, 98, 100, 110, 167], "_inductor": [94, 98], "freez": [94, 98, 159], "opt_model": [94, 98, 153], "set_loc": [94, 97, 98, 99, 100, 101], "releas": [94, 98, 108, 117, 149, 171], "breakthrough": [95, 156], "emerg": [95, 156, 167], "analysi": [95, 156, 159, 166], "chatbot": [95, 156, 160], "fuel": [95, 156], "llm": [95, 97, 98, 99, 102, 108, 110, 156, 159, 160, 162, 164, 167], "nevertheless": [95, 156], "power": [95, 103, 153, 156, 160], "come": [95, 151, 156, 169], "challeng": [95, 156, 162], "explos": [95, 156], "growth": [95, 96, 153, 154, 156, 159], "pose": [95, 156, 162], "obstacl": [95, 156], "practic": [95, 156], "preserv": [95, 99, 136, 156, 159, 164], "ai": [95, 112, 117, 156, 160, 163], "mx": [95, 100, 108, 117, 156], "promot": [95, 99, 156], "microsoft": [95, 117, 118, 156], "msfp": [95, 156], "mxfp8": [95, 156], "fp8": [95, 100, 117, 156, 160], "e5m2": [95, 156], "e8m0": [95, 156], "e4m3": [95, 156], "mxfp6": [95, 156], "fp6": [95, 156], "e3m2": [95, 156], "e2m3": [95, 156], "mxfp4": [95, 156], "fp4": [95, 99, 156, 164], "e2m1": [95, 99, 156, 164], "mxint8": [95, 156], "At": [95, 114, 119, 156, 169], "equival": [95, 97, 99, 102, 110, 117, 156, 160, 164, 167], "demonstr": [95, 104, 106, 117, 142, 156], "abil": [95, 118, 119, 145, 156, 167], "occupi": [95, 156], "incur": [95, 156], "energi": [95, 156], "cost": [95, 99, 110, 156, 161, 164], "silicon": [95, 156], "seamlessli": [95, 156, 159, 169], "offer": [95, 99, 103, 156], "meticul": [95, 156], "craft": [95, 156], "empow": [95, 156], "sacrif": [95, 156, 160], "workflow": [95, 108, 112, 117, 119, 120, 143, 149, 154, 156], "shown": [95, 97, 110, 138, 152, 153, 156, 157, 158, 159, 162, 167, 169], "explor": [95, 118, 156], "focus": [95, 99, 103, 108, 113, 118, 156], "distinct": [95, 156], "friendli": [95, 110, 145, 153, 156, 160, 167], "adapt": [95, 113, 119, 156, 160], "granular": [95, 110, 118, 119, 120, 145, 148, 156, 161, 167], "fall": [95, 156], "consumpt": [95, 110, 156, 167], "frac": [95, 110, 156, 167], "amax": [95, 156], "blocksiz": [95, 156], "expon": [95, 156], "floor": [95, 156], "log2": [95, 156], "represent": [95, 99, 110, 113, 115, 136, 140, 156, 159, 161], "rmin": [95, 103, 110, 156, 161], "mxquantconfig": [95, 156], "w_dtype": [95, 97, 98, 156], "act_dtyp": [95, 97, 98, 101, 156], "woq": [95, 117, 151, 156], "user_model": [95, 108, 156], "darvish": [95, 156], "rouhani": [95, 156], "bita": [95, 156], "et": [95, 99, 110, 136, 156, 164, 167], "al": [95, 99, 110, 117, 136, 149, 156, 164, 167], "push": [95, 99, 110, 114, 156, 159, 164, 167], "narrow": [95, 156], "inferenc": [95, 156], "cloud": [95, 114, 117, 156, 160], "33": [95, 151, 156, 170], "2020": [95, 156], "10271": [95, 156], "10281": [95, 156], "ocp": [95, 156], "learn": [95, 96, 99, 100, 103, 110, 112, 117, 118, 119, 138, 143, 147, 148, 149, 153, 154, 156, 159, 160, 161, 167, 169], "arxiv": [95, 99, 110, 117, 136, 156, 159, 160, 164, 167], "preprint": [95, 99, 110, 136, 156, 159, 164, 167], "2310": [95, 156], "10537": [95, 156], "2023": [95, 99, 110, 117, 156, 159, 164, 167], "recent": [96, 153, 154], "significantli": [96, 99, 153, 154, 159, 169], "propos": [96, 99, 110, 118, 154, 164, 167], "googl": [96, 117, 137, 154, 160], "bfloat16": [96, 154, 163], "ieee": [96, 110, 154, 167], "half": [96, 99, 154], "wide": [96, 99, 110, 117, 142, 154, 159, 161], "sixteen": [96, 154], "bandwidth": [96, 99, 110, 153, 154, 164], "3rd": [96, 110, 154, 160, 161, 163], "gen": [96, 110, 151, 154, 160, 161, 163], "xeon": [96, 105, 110, 117, 149, 150, 151, 154, 160, 161, 163, 170], "scalabl": [96, 103, 110, 117, 149, 151, 154, 160, 161, 163], "codenam": [96, 151, 154], "cooper": [96, 149, 154, 160], "lake": [96, 149, 154, 160], "boost": [96, 117, 154, 159, 160], "purpos": [96, 97, 98, 99, 101, 145, 154, 161], "x86": [96, 154], "instruct": [96, 97, 106, 110, 119, 120, 149, 154, 159, 160, 161, 167, 170], "part": [96, 110, 112, 115, 149, 154, 159, 162, 167], "avx512": [96, 110, 154, 161], "vcvtne2ps2bf16": [96, 154], "vcvtneps2bf16": [96, 154], "vdpbf16p": [96, 154], "product": [96, 110, 148, 154, 160, 161, 166, 169], "found": [96, 117, 137, 151, 154, 167, 169, 170], "publish": [96, 113, 150, 151, 154, 167], "4th": [96, 110, 151, 160, 161], "isa": 96, "vector": 96, "512": [96, 99], "avx": 96, "16": [96, 149, 164, 170], "754": 96, "complement": [96, 159], "fbgemm": [96, 154, 161], "10004": [96, 99, 100, 105, 115, 118, 138, 140, 141, 145, 148, 154, 156, 158, 162, 164], "avx512_bf16": [96, 154], "11": [96, 110, 149, 152, 154, 167, 169, 170], "avx512_fp16": 96, "mai": [96, 99, 102, 106, 110, 113, 114, 119, 136, 137, 143, 144, 150, 154, 160, 161, 164, 167, 169], "mixprecisionconfig": 96, "eval_acc_fn": [96, 101, 103], "acc": [96, 101, 151, 159, 170], "might": [96, 115, 137, 169], "custom_tune_config": [96, 101, 102, 103, 104], "build_torch_model": 96, "acceler": [97, 99, 102, 110, 117, 149, 153, 159, 160, 163, 164, 167, 169], "gigant": [97, 102, 167], "systemat": [97, 102, 167], "outlier": [97, 99, 102, 110, 119, 136, 164, 167], "quantif": [97, 99, 102, 164, 167], "difficult": [97, 102, 104, 110, 118, 167], "migrat": [97, 102, 110, 112, 167], "difficulti": [97, 102, 110, 167], "mathemat": [97, 102, 110, 167], "smoothquantconfig": [97, 102, 103], "run_fn": [97, 98, 99, 100], "descript": [97, 115, 119, 120, 138, 167], "stai": [97, 99, 100, 164, 167], "achiev": [97, 98, 99, 100, 101, 104, 106, 110, 143, 151, 153, 158, 159, 160, 161, 167, 169], "abov": [97, 98, 99, 101, 110, 118, 119, 120, 159, 161, 167, 169], "lambada": [97, 167], "openai": [97, 167], "sweet": [97, 167], "spot": [97, 167], "region": [97, 167], "paper": [97, 99, 110, 159, 164, 167], "bigscienc": [97, 151, 167, 170], "bloom": [97, 110, 117, 151, 159, 167, 170], "560m": [97, 167], "354": [97, 167], "3542": [97, 167], "1b7": [97, 151, 167], "4634": [97, 167], "4936": [97, 167], "3b": [97, 151, 167], "518": [97, 167], "5185": [97, 167], "7b1": [97, 167, 170], "5764": [97, 167, 170], "5977": [97, 167], "bloomz": [97, 167, 170], "3947": [97, 167], "3930": [97, 167], "4828": [97, 167], "4906": [97, 167], "5018": [97, 167], "4980": [97, 167], "5593": [97, 167, 170], "5552": [97, 167], "facebook": [97, 151, 167, 170], "opt": [97, 110, 117, 151, 159, 167, 169, 170], "125m": [97, 108, 117, 167], "379": [97, 167], "3757": [97, 167], "350m": [97, 167], "4516": [97, 167], "4533": [97, 167], "5789": [97, 167], "5742": [97, 167], "7b": [97, 106, 151, 167, 170], "6365": [97, 167], "6404": [97, 167], "6769": [97, 167, 170], "6804": [97, 167, 170], "13b": [97, 151, 167, 170], "6872": [97, 167], "6814": [97, 167], "30b": [97, 151, 167, 170], "7149": [97, 167], "7128": [97, 167], "66b": [97, 167], "7398": [97, 167], "7326": [97, 167], "llama": [97, 106, 117, 151, 159, 160, 162, 164, 167, 170], "7361": [97, 167, 170], "7357": [97, 167], "7627": [97, 167, 170], "7590": [97, 167], "7759": [97, 167, 170], "7840": [97, 167], "65b": [97, 167], "7908": [97, 167], "7957": [97, 167], "eleutherai": [97, 108, 117, 151, 167, 170], "gpt": [97, 108, 117, 151, 159, 167, 170], "j": [97, 110, 117, 151, 159, 167, 170], "6b": [97, 151, 167, 170], "6831": [97, 167, 170], "6821": [97, 110, 167], "mbzuai": [97, 167], "lamini": [97, 159, 167], "124m": [97, 167], "3804": [97, 167], "3887": [97, 167], "774m": [97, 167], "5048": [97, 167], "5057": [97, 167], "5b": [97, 106, 167], "5443": [97, 167, 170], "5436": [97, 167], "mosaicml": [97, 167, 170], "mpt": [97, 159, 167, 170], "chat": [97, 106, 151, 167, 170], "655": [97, 167, 170], "6499": [97, 167], "stabilityai": [97, 167], "stablelm": [97, 167], "4172": [97, 167], "4149": [97, 167], "togethercomput": [97, 167], "redpajama": [97, 167], "incit": [97, 167], "6542": [97, 167], "6735": [97, 167], "6718": [97, 167], "6740": [97, 167, 170], "6569": [97, 167], "6621": [97, 167], "v0": [97, 151, 167], "7143": [97, 167], "7221": [97, 167], "6895": [97, 167], "6953": [97, 167, 170], "databrick": [97, 151, 167, 170], "dolli": [97, 151, 159, 167, 170], "6866": [97, 167, 170], "6297": [97, 167], "6247": [97, 167], "tiiuae": [97, 151, 167, 170], "falcon": [97, 117, 151, 159, 167, 170], "6437": [97, 167, 170], "6392": [97, 167], "asterisk": [97, 167], "gt": [97, 99, 167, 168], "retrain": [98, 140], "involv": 98, "improv": [98, 99, 110, 114, 117, 136, 137, 153, 159, 160, 161, 163, 164, 169, 170], "philosophi": [98, 103, 161], "request": [98, 117, 161], "would": [98, 110, 114, 153, 159, 161, 167], "appropri": [98, 104, 106, 110, 113, 136, 167], "crucial": [98, 159], "occur": 98, "jit": [98, 167], "effect": [98, 99, 118, 159, 160], "intel_extension_for_pytorch": 98, "staticquantconfig": [98, 101, 102, 103, 104], "act_sym": [98, 101, 103, 104], "act_algo": 98, "minmax": [98, 119, 120, 136, 145, 161], "begin": [98, 137, 138, 140, 153, 159, 169], "program": [98, 117, 141, 150], "fc1": 98, "dynamo": [98, 100], "qd": 98, "final": [98, 110, 119, 153, 157, 159, 161, 165, 169], "As": [99, 110, 115, 119, 138, 152, 153, 159, 164, 169], "becom": [99, 110, 118, 143, 159, 164], "preval": [99, 110, 164], "grow": [99, 110, 164], "demand": [99, 110, 164], "modern": [99, 110, 164], "trade": [99, 110, 164], "off": [99, 110, 114, 164], "bottleneck": [99, 110, 164], "deploi": [99, 104, 110, 114, 153, 164, 169], "roughli": [99, 110, 164], "speak": [99, 110, 164], "move": [99, 110, 115, 164, 165], "count": [99, 110, 164], "p": [99, 106, 110, 164], "theoret": [99, 110, 161, 164], "capac": [99, 110, 164, 166], "flop": [99, 110, 164], "forward": [99, 110, 119, 153, 159, 161, 164, 167], "f": [99, 110, 137, 141, 161, 164, 167], "famou": [99, 110, 164], "next": [99, 110, 119, 120, 138, 164, 169], "scenario": [99, 100, 110, 118, 135, 153, 159, 164], "approx": [99, 110, 164], "bmm": [99, 110, 164], "past": [99, 110, 118, 164], "howev": [99, 110, 159, 164, 167], "100x": [99, 110, 164], "besid": [99, 110, 118, 164], "mention": [99, 110, 159, 164], "main": [99, 100, 101, 103, 105, 106, 110, 115, 138, 141, 153, 159, 161, 164], "reason": [99, 110, 113, 119, 138, 164, 169], "caus": [99, 110, 119, 138, 159, 164], "straightforward": [99, 103, 110, 159, 164, 167], "group": [99, 110, 117, 148, 159, 164, 168, 169, 170], "introduc": [99, 110, 112, 118, 119, 120, 145, 153, 161, 164, 165, 167], "think": [99, 164], "veri": [99, 110, 112, 153, 161, 164, 169], "intuit": [99, 110, 164, 167], "uniformli": [99, 164], "qlora": [99, 110, 164], "uniform": [99, 136, 164], "nf4": [99, 164], "prove": [99, 110, 136, 164, 167], "shot": [99, 103, 148, 153, 159, 160, 164], "highli": [99, 160, 164], "invers": [99, 164], "share": [99, 110, 144, 145, 164, 167, 169], "restor": [99, 164], "tailor": [99, 106], "consist": [99, 114, 115, 137, 167, 169], "deliv": [99, 153, 160, 165], "often": [99, 138, 158, 159], "outperform": 99, "signround": 99, "protect": [99, 164], "salient": [99, 159, 164], "greatli": [99, 162, 164], "big": [99, 164], "trainabl": [99, 117, 160, 164], "inspir": [99, 164], "rather": [99, 147, 164], "addition": [99, 120, 141, 159, 169], "incorpor": [99, 119, 120, 140, 159, 169], "l": [99, 105, 136, 169], "norm": 99, "hyper": 99, "laplacian": 99, "heavi": [99, 140], "tail": 99, "nuanc": 99, "weightonlyqu": 99, "c_": [99, 164], "use_sym": [99, 104], "quant_lm_head": 99, "use_double_qu": 99, "double_quant_dtyp": 99, "double_quant_bit": 99, "double_quant_use_sym": 99, "double_quant_group_s": 99, "along": [99, 149, 159, 164], "normalfloat": [99, 164], "bnb": [99, 164], "lm": [99, 159], "head": [99, 159], "emb": 99, "doubl": [99, 160], "rtn_arg": [99, 162, 164], "comment": [99, 105, 113, 119, 152, 153, 164, 168], "group_dim": [99, 164], "use_full_rang": 99, "use_mse_search": 99, "use_layer_wis": 99, "model_path": 99, "state_dict": [99, 141, 164], "rtnconfig": [99, 100, 104, 108], "gptq_arg": [99, 164], "act_ord": 99, "diagon": [99, 164], "rearrang": [99, 159, 164], "percdamp": [99, 164], "stabil": [99, 164], "block_siz": [99, 164], "c_out": 99, "static_group": [99, 164], "mitig": [99, 164], "actord": [99, 164], "gptqconfig": [99, 104], "autoround_arg": 99, "lr_schedul": [99, 153, 159], "rate": [99, 110, 153, 159, 161], "enable_quanted_input": 99, "enable_minmax_tun": 99, "minmax_lr": 99, "low_gpu_mem_usag": 99, "seqlen": [99, 117], "n_sampl": 99, "rand": [99, 110, 167], "n_block": [99, 164], "gradient_accumulate_step": 99, "gradient": [99, 110, 117, 148, 153, 159, 160, 170], "not_use_best_ms": 99, "dynamic_max_gap": 99, "gap": [99, 155], "autoroundconfig": 99, "awq_arg": [99, 164], "use_auto_scal": 99, "use_auto_clip": 99, "clip": [99, 110, 164, 167], "awqconfig": 99, "teq_arg": 99, "teqconfig": 99, "train_fn": 99, "hqq_arg": 99, "quant_zero": 99, "quant_scal": 99, "scale_quant_group_s": 99, "hqqconfig": 99, "lm_head": [99, 159, 164], "lm_head_config": 99, "quantit": 99, "weightonlylinear": [99, 164], "flexibl": [99, 103, 117, 159, 164], "storag": [99, 110, 146, 152, 164, 167], "date": [99, 164], "saved_result": [99, 100, 155, 164], "orig_model": 99, "yourmodel": 99, "loaded_model": 99, "original_model": 99, "ram": [99, 106], "overhead": [99, 167], "xiao": [99, 110, 164, 167], "guangxuan": [99, 110, 164, 167], "2211": [99, 110, 164, 167], "10438": [99, 110, 164, 167], "wei": [99, 110, 164, 167], "xiui": [99, 110, 164, 167], "suppress": [99, 110, 164, 167], "2209": [99, 110, 164, 167, 170], "13325": [99, 110, 164, 167], "lin": [99, 110, 164], "ji": [99, 110, 164], "2306": [99, 110, 164], "00978": [99, 110, 164], "frantar": [99, 110, 159, 164], "elia": [99, 110, 164], "2210": [99, 110, 164], "17323": [99, 110, 164], "cheng": [99, 110], "wenhua": [99, 110], "via": [99, 110, 113, 117, 141, 148, 153, 159, 160], "descent": [99, 110, 117, 160], "2309": [99, 110], "05516": [99, 110], "badri": 99, "hicham": 99, "shaji": 99, "appu": 99, "quadrat": 99, "onlin": [99, 113, 166], "mobiusml": 99, "io": 99, "hqq_blog": 99, "dettmer": [99, 110, 164], "tim": [99, 110, 164], "finetun": [99, 110, 159, 164], "2305": [99, 110, 164], "14314": [99, 110, 164], "integr": [100, 103, 110, 118, 153, 164], "grain": [100, 159, 160, 169], "comprehens": [100, 103, 112, 153], "varieti": [100, 104, 142, 169], "classic": [100, 169], "latest": [100, 117, 149, 160, 165], "research": [100, 117, 150, 167, 170], "simul": [100, 120], "emul": [100, 110, 153, 161], "term": [100, 103, 114, 136, 150, 152, 157, 158, 169], "eas": [100, 103, 149, 160], "commit": [100, 103, 113, 114], "extend": [100, 108, 119, 120], "hand": [100, 103], "reus": 100, "conveni": [100, 153], "discuss": [100, 117], "far": 100, "still": [100, 102, 110, 136, 153, 160, 161, 163], "reli": [100, 153, 167], "plan": [100, 148], "arbitrari": [100, 153, 158], "deploy": [100, 139, 160, 162, 167], "One": [100, 120, 137, 141, 148, 159, 160, 169], "scope": [100, 114, 119, 153], "direct": [100, 159], "inplac": 100, "place": [100, 140, 149, 159, 169], "run_arg": 100, "_description_": 100, "renam": [100, 165], "previou": [100, 110, 112, 119, 120, 153, 159, 165, 167, 169, 170], "orig_sav": 100, "suggest": [100, 115, 137, 166], "statu": [100, 105, 113, 138, 156, 157, 159], "rtn": [100, 106, 110, 137, 162, 164], "gptq": [100, 106, 110, 137, 151, 162, 164], "awq": [100, 110, 162, 164], "autoround": [100, 110, 117, 151], "teq": [100, 117, 160, 162, 164], "hqq": [100, 117], "trane": 100, "torchdynamo": 100, "microsc": 100, "pytorchdynamo": 100, "logic": 100, "torchimport": 100, "operator_name_or_list": 100, "demo": [100, 153], "mlp": [100, 159], "conv1d": [100, 120], "fundament": [101, 102, 136, 153], "fulli": [101, 153, 161, 167], "respons": [101, 161], "val_dataset": [101, 153, 161], "val_dataload": [101, 153, 161], "mydataload": [101, 103, 104], "quantize_model": [101, 102, 103, 110], "qmodel": [101, 103], "good": [101, 113, 161, 169], "autotun": [101, 102, 103, 110, 137], "weight_sym": [101, 103, 104], "static_qu": [101, 137], "weight_dtyp": 101, "weight_granular": 101, "per_tensor": [101, 119, 120, 145, 161], "act_granular": 101, "from_dict": 101, "conv2d_config": 101, "output_graph_def": 102, "sq_config": 102, "static_config": 102, "fusion": [102, 115, 118, 145], "look": [102, 118, 120, 145, 152, 167], "eval_fn_wrapp": 102, "consider": [102, 167], "amount": [102, 167], "saved_model": [103, 162], "experi": [103, 113, 166, 167, 169], "calib_iter": [103, 119], "rule": [103, 159], "partial": [103, 159, 161], "substitut": 103, "particularli": 103, "critic": [103, 113], "And": [103, 110, 114, 115, 135, 137, 153, 167], "supplement": 103, "baseline_model": [103, 104], "asymmetr": [103, 120, 161, 164, 169], "onednn": [103, 154, 161], "ab": [103, 110, 159, 161, 167], "rmax": [103, 110, 161], "sq": [103, 151, 167], "unseen": [103, 110, 161], "zeropoint": [103, 110, 161], "unlik": 103, "tradit": [103, 159], "signific": [103, 110, 159, 160, 162, 167], "refin": [103, 147, 159], "instal": [103, 108, 141, 144, 146, 171], "aim": [104, 108, 112, 117, 151, 159, 167, 169], "help": [104, 110, 112, 137, 151, 155, 164, 169], "quickli": [104, 151, 169], "despit": 104, "consum": [104, 138], "certain": [104, 166], "predefin": 104, "primari": [104, 136, 169], "get_woq_tuning_config": 104, "travers": [104, 119, 120, 164, 169], "compon": [104, 115, 137, 141, 149, 150, 158, 159], "incbench": 105, "launch": [105, 154], "numa": 105, "therefor": [105, 110, 115, 153, 159, 161, 162, 165, 167], "linux": [105, 106, 135, 144], "num_inst": 105, "num_cores_per_inst": 105, "num_cores_on_numa": 105, "visibl": 105, "cross_memori": 105, "alloc": 105, "insuffici": 105, "num_i": 105, "num_c": 105, "24": [105, 106, 159, 169, 170], "47": [105, 151, 170], "messag": [105, 114, 169], "throughput_pattern": 105, "hroughput": 105, "za": 105, "z": [105, 110, 136, 137, 167], "latency_pattern": 105, "atenc": 105, "3f": 105, "sec": [105, 170], "lightweight": [106, 159], "enhanc": [106, 136, 159, 160, 163], "get_default_rtn_config": 106, "load_empty_model": [106, 162], "model_state_dict_path": 106, "state": [106, 120, 159], "float_model": [106, 117], "quantized_model": [106, 108, 117], "tip": 106, "processor_typ": 106, "omp_num_thread": 106, "hybrid": 106, "taskset": 106, "figur": [106, 162], "conduct": [106, 112, 115, 153, 169], "32gb": 106, "These": [106, 119, 148], "rough": 106, "quick": [106, 112, 145, 154, 159], "vari": [106, 159, 167, 170], "meta": [106, 117, 151, 160, 170], "hf": [106, 151, 167, 170], "65": [106, 170], "around": 106, "6gb": 106, "qwen": 106, "qwen2": [106, 117, 160], "5gb": 106, "pip": [108, 117, 141, 144, 146, 149, 165], "automodelforcausallm": 108, "neo": [108, 117, 170], "overview": [108, 117, 169], "mainli": [108, 110, 117, 153, 159, 161], "especi": 108, "benefit": [108, 158], "invent": [110, 161], "speed": [110, 136, 153, 159, 160, 161, 169], "int4": [110, 117, 151, 161, 170], "miss": [110, 159, 161], "On": [110, 161, 170], "4x": [110, 161], "speedup": [110, 142, 148, 161], "255": [110, 161, 167], "math": [110, 161], "sometim": [110, 115, 161], "overflow": [110, 161], "issu": [110, 113, 114, 116, 117, 149, 161], "due": [110, 120, 143, 159, 161, 167], "vnni": [110, 142, 148, 161], "solv": [110, 114, 161, 165], "coarsest": [110, 167], "finer": [110, 167, 169], "2d": [110, 167], "matric": [110, 167], "3d": [110, 160, 167], "similarli": [110, 167], "finest": [110, 167], "individu": [110, 113, 159, 167], "adopt": [110, 114, 159, 160, 167], "bring": [110, 167], "why": [110, 167], "suppos": [110, 167], "6839": [110, 167], "4741": [110, 167], "7451": [110, 167], "9301": [110, 167], "1742": [110, 167], "6835": [110, 167], "formula": [110, 159, 167], "num_bit": [110, 167], "q_min": [110, 167], "q_max": [110, 167], "zp": [110, 167], "q_x": [110, 167], "clamp_": [110, 167], "round_": [110, 167], "w_q": [110, 167], "00296431384049356": [110, 167], "59": [110, 151, 167, 170], "172": [110, 167, 170], "192": [110, 167], "w_dq": [110, 167], "2220": [110, 167], "1510": [110, 167], "2420": [110, 167], "2570": [110, 167], "0500": [110, 167], "1890": [110, 167], "mseloss": [110, 167], "1983354538679123": [110, 167], "6848": [110, 167], "4743": [110, 167], "7440": [110, 167], "9308": [110, 167], "1749": [110, 167], "385297635664756e": [110, 167], "07": [110, 117, 151, 167, 170], "affect": [110, 167], "quantize_per_channel": [110, 167], "x_tmp": [110, 167], "detach": [110, 167], "reshap": [110, 167], "keepdim": [110, 167], "divid": [110, 138, 167, 169], "dequantize_per_channel": [110, 167], "0029": [110, 167, 170], "0036": [110, 167], "162": [110, 167, 170], "48": [110, 167, 170], "72": [110, 151, 167, 170], "93": [110, 151, 167, 170], "207": [110, 167, 170], "139": [110, 167, 170], "6837": [110, 167], "4734": [110, 167], "1751": [110, 167], "637690492221736e": [110, 167], "6376e": [110, 167], "3852e": [110, 167], "cdot": [110, 167], "quantize_per_tensor_absmax": [110, 167], "n_bit": [110, 167], "div_": [110, 167], "0806": [110, 167], "7589": [110, 167], "6038": [110, 167], "3815": [110, 167], "5040": [110, 167], "7174": [110, 167], "5444": [110, 167], "5826": [110, 167], "7772": [110, 167], "5555": [110, 167], "3740": [110, 167], "3253": [110, 167], "0698": [110, 167], "1381": [110, 167], "5972": [110, 167, 170], "0086": [110, 167], "0737": [110, 167], "8298": [110, 167], "6883": [110, 167], "2991": [110, 167], "1601": [110, 167], "6506": [110, 167], "8246": [110, 167], "3924": [110, 167], "3845": [110, 167], "8768": [110, 167], "w_scale": [110, 167], "x_q": [110, 167], "x_scale": [110, 167], "13": [110, 144, 149, 167, 170], "84": [110, 151, 167, 170], "120": [110, 167], "0059755356051027775": [110, 167], "83": [110, 166, 167, 170], "89": [110, 151, 167, 170], "119": [110, 167], "85": [110, 166, 167, 170], "57": [110, 151, 167, 170], "91": [110, 164, 167, 170], "006533813662827015": [110, 167], "y_q": [110, 167], "17509": [110, 167], "7608": [110, 167], "4055": [110, 167], "16599": [110, 167], "21020": [110, 167], "10016": [110, 167], "9860": [110, 167], "22444": [110, 167], "y_dq": [110, 167], "6836": [110, 167], "2970": [110, 167], "1583": [110, 167], "6481": [110, 167], "8207": [110, 167], "3911": [110, 167], "3850": [110, 167], "8763": [110, 167], "major": [110, 147, 161, 167], "peopl": [110, 161], "though": [110, 167], "simplic": [110, 167], "present": [110, 160, 167], "1x2": [110, 167], "2x2": [110, 167], "obtain": [110, 115, 119, 159, 166, 167, 169], "middl": [110, 167], "denot": [110, 167], "fp1": [110, 167], "fp2": [110, 167], "subsect": [110, 167], "even": [110, 162, 164, 167], "lot": [110, 115, 167], "briefli": [110, 153, 167], "similar": [110, 153, 167, 169], "idea": [110, 117, 159, 167, 169], "attach": [110, 153, 167], "x1": [110, 167, 169], "x2": [110, 167, 169], "layernorm": [110, 167], "excel": [110, 164], "mimic": [110, 161], "done": [110, 115, 140, 159, 161], "adjust": [110, 161, 167], "fact": [110, 161], "ultim": [110, 161], "pain": [110, 161], "brought": [110, 155, 161], "lossi": [110, 161], "respect": [110, 113, 145, 159, 167], "chart": [110, 161, 166], "understand": [110, 112, 161], "yvinec": [110, 167], "edouard": [110, 167], "proceed": [110, 167], "cvf": [110, 167], "winter": [110, 167], "confer": [110, 159, 167], "vision": [110, 117, 143, 167], "welcom": [111, 113, 114, 117, 171], "familiar": 112, "concept": [112, 147, 166], "mainstream": [112, 117], "broad": [112, 117, 148], "notebook": 112, "oneapi": [112, 149, 160], "analyt": [112, 149, 160], "toolkit": [112, 115, 149, 160], "mechan": [112, 159, 166], "tutori": [112, 115, 160], "introduct": 112, "dive": [112, 145], "interest": [113, 117], "foster": 113, "particip": 113, "commun": 113, "harass": 113, "everyon": 113, "regardless": 113, "ag": 113, "bodi": 113, "ethnic": 113, "characterist": 113, "gender": 113, "ident": 113, "educ": 113, "socio": 113, "econom": 113, "appear": 113, "race": 113, "religion": 113, "sexual": 113, "orient": 113, "behavior": [113, 118, 119, 120, 145, 155, 164, 169], "contribut": [113, 117, 159], "inclus": 113, "Being": 113, "viewpoint": 113, "gracefulli": 113, "empathi": 113, "toward": 113, "member": [113, 118], "unaccept": 113, "imageri": 113, "unwelcom": 113, "troll": 113, "insult": 113, "derogatori": 113, "polit": 113, "attack": 113, "public": 113, "privat": 113, "electron": 113, "explicit": 113, "permiss": 113, "inappropri": 113, "profession": 113, "clarifi": 113, "fair": 113, "action": 113, "edit": 113, "reject": 113, "wiki": 113, "ban": 113, "temporarili": 113, "perman": [113, 159], "thei": [113, 137, 145, 153, 157], "deem": 113, "threaten": 113, "offens": 113, "harm": 113, "mail": 113, "social": [113, 160], "media": [113, 160], "account": [113, 166, 169], "act": 113, "appoint": 113, "event": 113, "abus": 113, "report": [113, 114, 117, 166], "contact": [113, 165, 166], "complaint": 113, "review": [113, 114, 117, 160], "investig": [113, 137], "necessari": [113, 119, 155, 159, 166, 169], "circumst": 113, "oblig": 113, "confidenti": 113, "regard": [113, 163], "incid": 113, "separ": [113, 137, 147, 149, 150, 158], "faith": 113, "face": [113, 117, 125, 160, 165, 170], "repercuss": 113, "leadership": 113, "faq": [113, 117], "page": [113, 114], "send": [114, 119], "view": [114, 117, 142, 165], "star": 114, "repositori": 114, "button": [114, 148], "fork": 114, "clone": [114, 149], "pc": 114, "git": [114, 144, 149], "branch": 114, "modif": [114, 118, 145], "checkout": 114, "my": 114, "unit": [114, 159], "cover": [114, 143, 147, 160], "certif": 114, "agre": 114, "pr": [114, 138, 152, 165], "least": [114, 153, 159, 169], "approv": 114, "licens": 114, "azur": [114, 117, 160], "devop": 114, "ci": 114, "e16": 114, "v5": 114, "scan": [114, 117], "pylint": 114, "bandit": 114, "copyright": [114, 150], "docstyl": 114, "spellcheck": 114, "dco": 114, "pytest": 114, "No": [114, 137, 144, 153, 160], "failur": [114, 115], "fault": 114, "coverag": 114, "submit": [114, 160], "bug": [114, 117], "intend": 114, "safe": 114, "collabor": [114, 117], "adher": 114, "tracer": 115, "graphmodul": [115, 163], "resolv": [115, 116], "floatfunct": 115, "cat": [115, 143], "relu": [115, 145, 167], "batchnorm": [115, 167], "eval": [115, 137, 138, 161], "fail": [115, 138, 143], "imper": 115, "successfulli": [115, 117, 141, 160], "traceabl": 115, "proxi": 115, "prototyp": 115, "html": [115, 117, 119, 136, 141, 148, 161], "highlight": 115, "untrac": 115, "ssd": [115, 143, 170], "resnet34": [115, 170], "r34": 115, "bboxes_labels_scor": 115, "prob": 115, "45": [115, 151, 170], "max_output": 115, "zip": 115, "squeez": 115, "dbox": 115, "dlabel": 115, "dscore": 115, "decode_singl": 115, "guidelin": [116, 117], "particular": [117, 159, 164], "typic": [117, 140, 142, 146, 159, 170], "gaudi": [117, 149], "ultra": [117, 149, 170], "flex": [117, 149], "amd": [117, 149, 170], "arm": [117, 148, 149, 170], "nvidia": [117, 136, 148, 149, 170], "llama2": 117, "stabl": [117, 159, 160], "diffus": [117, 160], "hub": [117, 142, 146], "hug": [117, 160], "marketplac": [117, 160], "amazon": 117, "web": 117, "servic": [117, 160], "softwar": [117, 150, 159, 160, 165], "alibaba": [117, 160], "tencent": [117, 160], "taco": [117, 160], "oliv": [117, 160], "ecosystem": [117, 160], "lightn": 117, "2024": [117, 170], "usabl": 117, "34": [117, 151, 170], "packag": [117, 118, 137, 144, 149, 160, 165, 169], "gaudi2": [117, 149], "docker": 117, "stack": 117, "setup": [117, 145, 149, 159], "interact": [117, 166], "shell": 117, "habana": 117, "habana_visible_devic": 117, "ompi_mca_btl_vader_single_copy_mechan": 117, "cap": 117, "sys_nic": 117, "host": [117, 141], "ipc": 117, "vault": 117, "ubuntu22": 117, "04": [117, 149, 170], "habanalab": 117, "optimum": [117, 164], "upgrad": [117, 153], "auto_round": 117, "automodel": 117, "autotoken": [117, 153], "torch_util": [117, 162, 167], "get_dataload": 117, "trust_remote_cod": 117, "woq_conf": 117, "resnet18": [117, 154, 170], "static_quant_conf": 117, "blog": [117, 160], "june": [117, 160], "apr": [117, 160], "emnlp": [117, 160], "sep": [117, 160], "legal": [117, 171], "secur": [117, 160, 171], "ask": [117, 149], "email": 117, "discord": 117, "join": 117, "technic": 117, "wechat": [117, 160], "img": 117, "bridg": [118, 119, 148], "vanilla": [118, 119, 148], "adaptor_registri": 118, "abcadaptor": 118, "__init__": [118, 137, 138, 152, 169], "framework_specific_info": 118, "tune_cfg": [118, 120, 169], "query_fw_cap": [118, 120], "query_fused_pattern": 118, "he": 118, "describ": [118, 120, 137, 145], "hidden": 118, "mainten": 118, "clear": [118, 145, 152, 153], "fragment": 118, "scheme": [118, 119, 120, 138, 145, 164, 169], "semant": [118, 145], "querybackendcap": [118, 119], "tensorflowqueri": 118, "mla": [118, 154, 161], "qtype": 118, "onnxrt_qlinearopsadaptor": 118, "data_load": 118, "inspect_tensor": 118, "op_list": 118, "iteration_list": 118, "inspect_typ": 118, "save_to_disk": 118, "quantization_cfg": 118, "set_tensor": 118, "tensor_dict": 118, "input_graph": 118, "fw": 119, "outlin": [119, 120], "accommod": [119, 120], "diagram": [119, 120, 169], "illustr": [119, 120, 140, 169], "sequencediagram": [119, 120], "autonumb": [119, 120], "query_framework_cap": 119, "opwis": 119, "optypewis": 119, "\u2776": 119, "\u2777": 119, "\u2778": 119, "\u2779": 119, "\u277a": 119, "\u277b": 119, "\u277c": 119, "chapter": 119, "node_op": 119, "confirm": 119, "chosen": [119, 136], "conv2d": [119, 120, 143, 145, 167, 169], "int8_conv_config": 119, "optype_wise_": 119, "per_channel": [119, 120, 145, 161], "sym": [119, 120, 145, 161, 164], "tuning_cfg_to_fw": 119, "Its": [119, 136, 159], "quantize_config": 119, "op_wise_config": 119, "dispatch": [119, 148], "is_perchannel": 119, "is_asymmetr": 119, "weight_bit": 119, "bf16_op": [119, 163], "convert_bf16": 119, "got": [119, 144], "subsequ": 119, "calib": 119, "somewhat": 119, "distort": 119, "line": [119, 137, 141, 148], "until": [119, 169], "let": [120, 145, 159], "overal": [120, 164], "drive": 120, "section": [120, 137, 140, 159, 164], "uint4": 120, "asym": [120, 145, 164], "independ": 120, "kullback": 120, "leibler": 120, "pytorch_cpu": 120, "1_11_capabl": 120, "cap_s8_1_11": 120, "cap_s8_1_11_conv1d": 120, "per_channel_symmetr": 120, "per_tensor_symmetr": 120, "nativ": 120, "with_arg": 120, "qscheme": 120, "torch_dtyp": 120, "quant_min": 120, "quant_max": 120, "x86_64": 135, "aarch64": 135, "sure": 135, "benefici": 136, "\u03b2": 136, "\u03b1": 136, "lie": 136, "simplest": 136, "focu": [136, 169], "essenti": [136, 144], "percentil": 136, "remaind": 136, "resolut": 136, "extrem": 136, "retain": 136, "noteworthi": 136, "vanhouck": 136, "vincent": 136, "andrew": 136, "senior": 136, "mark": 136, "mao": 136, "2011": 136, "szymon": 136, "migacz": 136, "tensorrt": [136, 154, 161], "2017": 136, "mckinstri": 136, "jeffrei": 136, "discov": 136, "embed": [136, 159], "1809": 136, "04191": 136, "2018": 136, "mostli": 137, "summar": 137, "conflict": [137, 144], "overli": 137, "argu": 137, "decis": [137, 152], "pep": 137, "tile": 137, "o": [137, 149], "sub_modul": 137, "namespac": 137, "pollut": 137, "subprocess": [137, 138], "popen": 137, "statement": 137, "pipe": 137, "long_str": 137, "extran": 137, "__version__": 137, "placehold": 137, "pager": 137, "getenv": 137, "readabl": 137, "seem": 137, "worth": [137, 159], "4f": 137, "65421": 137, "sentenc": 137, "eval_result": 137, "declar": 137, "typealia": 137, "_lossandgradi": 137, "complextfmap": 137, "xx_func": 137, "ordereddict": 137, "pylanc": 137, "cheeseshopaddress": 137, "chees": 137, "shop": 137, "outofcheeseerror": 137, "crbug": 137, "192795": 137, "cpufreq": 137, "facilit": 137, "__all__": 137, "know": [137, 141, 165], "algorithm_entri": 137, "snippet": [137, 148], "register_algo": 137, "rtn_algo_entri": 137, "smooth_quant_entri": 137, "vscode": 137, "settings_recommend": 137, "encount": 138, "previous": 138, "lack": [138, 144], "faster": [138, 139, 143, 160, 169, 170], "treat": 138, "Of": 138, "collate_fn": 138, "last_batch": 138, "evenli": 138, "discard": 138, "throw": 138, "awai": 138, "rollov": 138, "draw": [138, 166, 169], "batch_sampl": 138, "num_work": [138, 153, 161], "pin_memori": 138, "pin": 138, "shuffl": [138, 153, 161], "reshuffl": 138, "manner": [138, 155], "newdataload": 138, "input_data": 138, "customis": [138, 152], "aid": 139, "infrastructur": 139, "promis": [140, 153, 159], "huge": [140, 159, 162], "light": 140, "booster": 140, "degrad": [140, 159, 169], "novel": 140, "10006": 140, "student_output": 140, "student_loss": 140, "training_func_for_nc": 140, "launcher": 140, "experiment": [140, 141, 143, 153, 159, 161, 165, 168], "comb": 140, "distillation_criterion": [140, 153, 158], "q_conf": 140, "horovod": 141, "builtin": 141, "enable_eager_execut": 141, "yaml_file_path": 141, "pre_process": 141, "simpli": [141, 155], "evaluation_result": 141, "evaluation_time_cost": 141, "partit": [141, 159], "distributedsampl": 141, "train_sampl": 141, "train_dataset": [141, 161], "num_replica": 141, "rank": 141, "train_load": 141, "train_kwarg": 141, "adadelta": 141, "distributedoptim": 141, "named_paramet": 141, "broadcast_paramet": 141, "root_rank": 141, "broadcast_optimizer_st": 141, "set_epoch": 141, "batch_idx": 141, "zero_grad": [141, 153, 159], "nll_loss": 141, "log_interv": 141, "0f": 141, "tloss": 141, "6f": 141, "dry_run": 141, "break": [141, 153], "test_func": 141, "num_of_process": 141, "002": 141, "ssh": 141, "prompt": 141, "readm": 141, "exactli": 141, "cd": [141, 149], "recognit": [141, 143, 159], "resnet50_v1": [141, 153], "imagerecord": 141, "resizecropimagenet": [141, 168], "realiz": [141, 157, 163, 166], "tow": 141, "node1": 141, "node2": 141, "TO": 141, "your_node1_nam": 141, "your_node2_nam": 141, "resnet50_fp32_pretrained_model": 141, "nc_resnet50_v1": 141, "resnet": [141, 170], "10k": [142, 146], "2x": [142, 148], "exchang": 143, "hope": 143, "inc_model": [143, 155], "fp32_onnx_config": 143, "verifi": [143, 151], "vgg16": [143, 170], "mobilenet": [143, 166, 170], "rcnn": 143, "torchscript": [143, 162, 167], "unsupport": [143, 153, 159], "add_relu": 143, "conv1d_relu": 143, "conv2d_relu": 143, "group_norm": 143, "hardswish": 143, "instance_norm": 143, "layer_norm": 143, "leaky_relu": 143, "sigmoid": 143, "toolchain": [144, 160], "bare": 144, "metal": 144, "sudo": 144, "apt": [144, 149], "python3": 144, "dev": 144, "distutil": 144, "libgl1": 144, "mesa": 144, "glx": 144, "libglib2": 144, "wget": [144, 146], "ln": 144, "sf": 144, "usr": 144, "incompat": 144, "88": [144, 166, 170], "80": [144, 151, 162, 170], "pyobject": 144, "reinstal": 144, "importerror": 144, "libgl": 144, "yum": [144, 149], "opencv": 144, "conda": [144, 165], "pend": 144, "sqlalchemi": 144, "27": [144, 151, 170], "alemb": 144, "forg": 144, "unless": 145, "syntax": 145, "go": [145, 164, 168], "15": [145, 149], "up1": 145, "up2": 145, "valid_mixed_precis": 145, "concatv2": 145, "maxpool": 145, "avgpool": 145, "depthwiseconv2dn": 145, "relu6": 145, "biasadd": 145, "addn": 145, "addv2": 145, "grappler": 145, "grappler_optim": 145, "constfold": 145, "arithmet": 145, "debug_stripp": 145, "googleapi": 146, "v1_6": 146, "mobilenet_v1_1": 146, "0_224_frozen": 146, "d": [147, 159], "custom_metr": 147, "420": 148, "geomean": 148, "coder": [148, 160], "gui": [148, 159], "upload": 148, "click": [148, 160], "qintegerop": [148, 161], "lock": [148, 158, 159], "momentum": [148, 153, 159], "sensit": [148, 159], "lasso": [148, 159], "Will": 148, "satisfi": 149, "success": 149, "frequent": 149, "pypi": 149, "requirements_pt": 149, "requirements_tf": 149, "consolid": 149, "streamlin": [149, 160], "scienc": 149, "websit": 149, "anaconda": 149, "suit": 149, "skylak": 149, "cascad": 149, "ic": [149, 160], "sapphir": [149, 151], "rapid": [149, 151], "hbm": 149, "meteor": 149, "arctic": 149, "sound": 149, "pont": 149, "vecchio": 149, "cento": [149, 170], "ubuntu": 149, "22": [149, 151, 170], "maco": 149, "ventura": 149, "fortensorflow": 149, "forpytorch": 149, "18": [149, 151, 160, 170], "17": 149, "apach": 150, "subject": 150, "accompani": [150, 169], "wish": 150, "bibtex": 150, "misc": 150, "author": 150, "feng": 150, "tian": 150, "hanwen": 150, "haihao": [150, 159], "shen": [150, 159], "suyu": 150, "chen": 150, "howpublish": 150, "year": 150, "logo": 150, "atom": 150, "phi": 150, "pentium": 150, "vtune": 150, "corpor": 150, "subsidiari": 150, "brand": 150, "claim": 150, "70b": [151, 170], "40b": 151, "baichuan": 151, "baichuan2": 151, "12b": 151, "neox": [151, 170], "20b": [151, 170], "mistralai": 151, "mistral": 151, "thudm": 151, "chatglm2": 151, "chatglm3": 151, "wip": 151, "soon": 151, "lambada_openai": [151, 170], "67": [151, 170], "69": [151, 170], "0222": 151, "55": [151, 170], "9997": 151, "68": [151, 168, 170], "12": [151, 170], "0081": 151, "66": [151, 170], "9905": 151, "71": [151, 170], "51": [151, 170], "75": [151, 159, 170], "0568": 151, "0008": [151, 170], "70": [151, 170], "81": [151, 170], "9902": [151, 170], "06": [151, 170], "0058": [151, 170], "61": [151, 170], "9991": 151, "0034": 151, "46": [151, 170], "0356": 151, "9972": 151, "0121": 151, "35": [151, 159, 170], "63": [151, 159, 170], "92": [151, 170], "9933": [151, 170], "31": [151, 170], "9994": [151, 170], "0006": [151, 170], "9958": [151, 170], "29": [151, 170], "74": [151, 170], "9918": 151, "9964": 151, "58": [151, 170], "0040": 151, "26": [151, 170], "0064": 151, "49": [151, 170], "78": [151, 168, 170], "0041": 151, "53": [151, 170], "0014": 151, "0043": 151, "76": [151, 170], "77": [151, 170], "25": [151, 159, 170], "9932": [151, 170], "0016": 151, "0116": 151, "60": [151, 170], "9978": [151, 170], "79": [151, 170], "9937": [151, 170], "62": [151, 170], "09": [151, 170], "0057": 151, "0005": 151, "73": [151, 170], "9936": 151, "9989": 151, "9987": 151, "0046": [151, 170], "9979": [151, 170], "23": [151, 170], "52": [151, 170], "86": [151, 170], "9930": 151, "00": [151, 170], "9957": [151, 170], "9938": 151, "9942": [151, 170], "03": [151, 170], "9990": 151, "9965": 151, "9995": 151, "82": [151, 170], "0078": 151, "0262": 151, "0052": 151, "9910": 151, "popularli": 152, "industri": [152, 160], "label_map": 152, "ap": 152, "curv": 152, "turn": [152, 162], "target_boxes_num": 152, "str_label": 152, "int_label": 152, "inturn": 152, "cocomap": 152, "vocmap": 152, "categor": 152, "multiclass": 152, "multilabel": 152, "newmetr": 152, "reset": 152, "reflect": [152, 168], "new_metr": 152, "kind": 153, "resort": 153, "inject": 153, "automodelforsequenceclassif": 153, "worker": [153, 161], "ping_memori": [153, 161], "formul": 153, "templat": [153, 159], "effort": 153, "written": 153, "onnxrt_integ": 153, "onnxrt_qlinear": 153, "image_tensor": 153, "post_training_static_qu": [153, 169], "post_training_dynamic_qu": [153, 169], "1000": 153, "2000": 153, "sampling_s": 153, "model_wis": 153, "op_dict": 153, "op_wis": 153, "sigopt_api_token": [153, 166, 169], "sigopt_project_id": [153, 166, 169], "sigopt_experiment_nam": [153, 166, 169], "performance_onli": 153, "600": [153, 170], "training_arg": 153, "trainer": 153, "compact": [153, 159], "maxim": [153, 159, 169], "pruning_func": 153, "num_train_epoch": [153, 159], "train_dataload": [153, 159, 161], "n_gpu": 153, "gradient_accumulation_step": 153, "clip_grad_norm_": 153, "max_grad_norm": 153, "start_epoch": 153, "end_epoch": 153, "97": [153, 170], "pruner": [153, 159], "newli": [153, 159], "on_after_optimizer_step": [153, 159], "layer3": [153, 159], "layer2": [153, 159, 161], "1x1": [153, 159], "expens": [153, 169], "mobil": [153, 170], "knowledgedistillationloss": 153, "weight_decai": 153, "0004": 153, "nesterov": 153, "randomresizedcrop": [153, 168], "totensor": [153, 168], "485": 153, "456": 153, "406": [153, 170], "nepoch": 153, "cnt": 153, "loss_sum": 153, "iter_bar": 153, "tqdm": 153, "desc": 153, "teacher_logit": 153, "pytorchknowledgedistillationloss": 153, "unnecessari": 153, "train_fun": 153, "training_func": 153, "output_model": 153, "exit_polici": 153, "determinist": 153, "meaning": [153, 158], "prune_conf": 153, "quantization_aware_training_conf": 153, "aforement": 153, "inset": 153, "p_conf": [153, 158], "ssd_mobilenet_v1": 153, "benchmarkconf": 153, "cpuexecutionprovid": [154, 161], "tensorrtexecutionprovid": [154, 161], "cudaexecutionprovid": [154, 161], "cuda": [154, 159, 161], "dnnlexecutionprovid": [154, 161], "plu": 154, "helloworld": [154, 168], "persist": 155, "tf1": 155, "tf2": 155, "h5": 155, "hybridblock": 155, "0000": 155, "input_model": 155, "10005": [156, 162], "multi_object": 157, "simultan": 158, "gain": [158, 160], "possibl": [158, 159, 162, 163, 169], "instanti": 158, "neuron": 159, "art": 159, "grown": 159, "unpreced": 159, "increasingli": 159, "stand": [159, 169], "delet": 159, "consecut": 159, "commonli": 159, "shrink": 159, "advantag": [159, 169], "feed": 159, "influenc": 159, "decreas": 159, "contextu": 159, "scene": 159, "haven": 159, "color": [159, 162], "lowest": [159, 169], "interv": 159, "gradual": 159, "emsp": 159, "immedi": 159, "pure": 159, "downstream": 159, "simplifi": [159, 160], "procedur": [159, 169], "prone": 159, "co": 159, "discourag": 159, "connect": [159, 166], "penal": 159, "parameter": 159, "coeffici": 159, "sparsegpt": 159, "perceptron": 159, "valuabl": 159, "basi": 159, "mha": 159, "billion": 159, "tend": 159, "exemplifi": 159, "250": 159, "fortieth": 159, "pruner2": 159, "prepare_prun": 159, "retrain_fre": 159, "300": 159, "few": [159, 160, 167, 169], "yourself": 159, "uncertain": 159, "parse_auto_slim_config": 159, "auto_config": 159, "ffn2_sparsiti": 159, "mha_spars": 159, "itself": 159, "quit": 159, "carri": 159, "pruning_pattern": 159, "pruning_start": 159, "pruning_end": 159, "sparse_gpt": 159, "embed_out": 159, "card": 159, "readi": 159, "hesit": 159, "causal": 159, "clm": 159, "sst": [159, 170], "v": [159, 169], "flan": 159, "t5": 159, "english": 159, "romanian": 159, "404": [159, 170], "381": 159, "yolov5": 159, "2x1": [159, 170], "801": 159, "7895": 159, "reduct": [159, 162], "xgboost": 159, "namhoon": 159, "lee": 159, "thalaiyasingam": 159, "ajanthan": 159, "philip": 159, "torr": 159, "2019": 159, "zafrir": 159, "ofir": 159, "ariel": 159, "larei": 159, "boudoukh": 159, "mosh": 159, "wasserblat": 159, "2111": 159, "05754": 159, "2021": 159, "kwon": 159, "kim": 159, "mahonei": 159, "hassoun": 159, "keutzer": 159, "gholami": 159, "pp": 159, "24101": 159, "24116": 159, "alistarh": 159, "massiv": 159, "2301": 159, "00774": 159, "oct": 160, "medium": 160, "diagnosi": 160, "insight": [160, 165, 169], "aug": 160, "juli": 160, "onnxcommunitymeetup2023": 160, "msft": 160, "autom": [160, 167], "netflix": 160, "mlperf": [160, 170], "5x": 160, "\u96c6\u6210\u82f1\u7279\u5c14": 160, "\u817e\u8baf\u4e91taco": 160, "kit\u4e3aai\u5e94\u7528\u5e26\u6765\u9ad8\u6548\u5f02\u6784\u52a0\u901f\u670d\u52a1": 160, "mar": 160, "heterogen": 160, "jan": 160, "busi": 160, "amx": 160, "innov": 160, "journei": 160, "dec": 160, "mleffici": 160, "deepen": 160, "foundat": 160, "intellig": 160, "vmware": 160, "applianc": 160, "bitnami": 160, "nov": 160, "sota": 160, "neurip": 160, "quala": 160, "minilm": [160, 170], "plug": 160, "twitter": 160, "linkedin": 160, "zone": 160, "land": 160, "gcp": 160, "aw": [160, 170], "pat": 160, "keynot": 160, "intelon": 160, "chines": 160, "purif": 160, "jun": 160, "partner": 160, "democrat": 160, "feb": 160, "joint": 160, "bilibili": 160, "gestalt": 160, "ml": 160, "spars": 160, "easier": 160, "youtub": 160, "reconstruct": 160, "abound": 160, "lpot": [160, 165], "nextplatform": 160, "cern": 160, "gan": 160, "3dgan": 160, "iml": 160, "workshop": 160, "asplo": 160, "convolut": 160, "intelcaff": 160, "affin": 161, "neither": 161, "nor": 161, "val_load": 161, "avg": 161, "themselv": 161, "dmlexecutionprovid": 161, "yet": 161, "meanwhil": 162, "substanti": 162, "constrain": 162, "grei": 162, "blue": 162, "rectangl": 162, "subgraph": [162, 169], "lambda": 162, "ouput_dir": 162, "fp32_model_path": 162, "int8_model_path": 162, "ON": 163, "forc": 163, "postposttrainingquantconfig": 163, "datatyp": [163, 169, 170], "cast": [163, 168], "bf16convert": 163, "depth": 163, "matter": 163, "bf16wrapper": 163, "retrac": 163, "enable_mse_search": 164, "805": 164, "005": 164, "return_int": 164, "enable_auto_scal": 164, "nsampl": 164, "pad_max_length": 164, "use_max_length": 164, "true_sequenti": 164, "slower": 164, "sym_full_rang": 164, "qweight_config_path": 164, "gptq_config_path": 164, "gptq_config": 164, "re": 164, "use_full_length": 164, "compressed_model": 164, "seek": 164, "omit": 164, "rtn_g32asym": 164, "gptq_g32asym": 164, "gptq_g32asym_disable_last_matmul": 164, "amp": 164, "gptq_g128asym": 164, "awq_g32asym": 164, "site": 165, "inspect": 165, "sed": 165, "your_script": 165, "backbon": 166, "fill": [166, 168, 169], "sigopt_experiment_id": 166, "nc": [166, 169], "login": 166, "although": 166, "suffici": 166, "ordinari": 166, "receiv": 166, "latenc": [166, 169], "durat": 166, "8266": 166, "8372": 166, "2132": 166, "7495": 166, "8299": 166, "8294": 166, "0837": 166, "8291": 166, "4469": 166, "allevi": 167, "herebi": 167, "optdecoderlay": 167, "blockwis": 167, "accordingli": 167, "waq": 167, "torchsmoothqu": 167, "auto_alpha_arg": 167, "leakyrelu": 167, "hardtanh": 167, "instancenorm": 167, "t5norm": 167, "llamanorm": 167, "groupnorm": 167, "7392": [167, 170], "7335": 167, "7058": [167, 170], "6994": 167, "7677": [167, 170], "7615": [167, 170], "7332": 167, "7632": 167, "stock": 167, "arang": 167, "tolist": 167, "default_alpha": 167, "alpha_min": 167, "alpha_max": 167, "alpha_step": 167, "step_siz": 167, "shared_criterion": 167, "do_blockwis": 167, "jason": 167, "transact": 167, "ensp": 168, "centercrop": 168, "randomcrop": 168, "cropres": 168, "decodeimag": 168, "jpeg": 168, "encodejp": 168, "alignimagechannel": 168, "116": 168, "103": [168, 170], "94": [168, 170], "017": 168, "bilinearimagenet": 168, "topilimag": 168, "padding_mod": 168, "border": 168, "pixel": 168, "edg": 168, "colorjitt": 168, "bright": 168, "contrast": 168, "satur": 168, "hue": 168, "jitter": 168, "tondarrai": 168, "o1": 169, "human": 169, "concret": 169, "aggress": 169, "flowchart": 169, "htmllabel": 169, "td": 169, "classdef": 169, "itemstyl": 169, "cce5ff": 169, "stroke": 169, "99ccff": 169, "s1": 169, "s2": 169, "s3": 169, "s4": 169, "s5": 169, "s6": 169, "s7": 169, "nbsp": [169, 170], "subgraphstyl": 169, "ffffff": 169, "skip": 169, "attempt": 169, "post_training_auto_qu": 169, "increment": 169, "ii": 169, "highest": 169, "confidence_batch": 169, "spent": 169, "hawq_v2_loss": 169, "model_loss": 169, "black": 169, "discret": 169, "compli": 169, "prior": 169, "posterior": 169, "short": 169, "never": 169, "loglevel": 169, "endlessli": 169, "perspect": 169, "smbo": 169, "appl": 169, "surrog": 169, "repeat": 169, "quantil": 169, "densiti": 169, "parzen": 169, "greatest": 169, "hour": 169, "dai": 169, "next_tune_cfg": 169, "overridden": 169, "cluster": 169, "mpi": 169, "replic": 169, "replica": 169, "fed": 169, "synchron": 169, "resourc": 169, "mpirun": 169, "number_of_process": 169, "run_cmd": 169, "abctunestrategi": 169, "1x": 170, "platinum": 170, "8480": 170, "8ghz": 170, "56": 170, "ht": 170, "turbo": 170, "256gb": 170, "16x16gb": 170, "ddr5": 170, "4800": 170, "mt": 170, "bio": 170, "3a14": 170, "tel2p1": 170, "microcod": 170, "0x2b0001b0": 170, "gcc": 170, "20210514": 170, "red": 170, "hat": 170, "visit": 170, "1s4c14ins1bsthroughput": 170, "1720": 170, "582": 170, "95x": 170, "1517": 170, "38": 170, "570": 170, "66x": 170, "resnet101": 170, "41": 170, "1058": 170, "382": 170, "96": 170, "77x": 170, "incept": 170, "2080": 170, "951": 170, "19x": 170, "1587": 170, "863": 170, "37": 170, "84x": 170, "v3": 170, "1052": 170, "434": 170, "42x": 170, "v4": 170, "707": 170, "234": 170, "02x": 170, "40": 170, "320": 170, "179": 170, "79x": 170, "4312": 170, "1512": 170, "85x": 170, "2287": 170, "1406": 170, "63x": 170, "1367": 170, "59x": 170, "vgg19": 170, "1244": 170, "176": 170, "04x": 170, "resnetv2": 170, "780": 170, "34x": 170, "494": 170, "43": 170, "329": 170, "50x": 170, "152": 170, "349": 170, "235": 170, "48x": 170, "densenet": 170, "161": 170, "282": 170, "223": 170, "19": 170, "26x": 170, "1284": 170, "756": 170, "70x": 170, "1280": 170, "530": 170, "cnn": 170, "39": 170, "178": 170, "13x": 170, "yolov3": 170, "249": 170, "44": 170, "64x": 170, "54": 170, "28x": 170, "36": 170, "05x": 170, "390": 170, "212": 170, "83x": 170, "vit": 170, "230": 170, "142": 170, "62x": 170, "1989": 170, "31x": 170, "1165": 170, "303": 170, "953": 170, "302": 170, "15x": 170, "resnest50": 170, "365": 170, "21x": 170, "resnext101_32x8d": 170, "548": 170, "104": 170, "27x": 170, "efficientnet_b0": 170, "636": 170, "566": 170, "12x": 170, "efficientnet_b3": 170, "471": 170, "358": 170, "32x": 170, "peleenet": 170, "790": 170, "504": 170, "57x": 170, "yolo": 170, "137": 170, "88x": 170, "175": 170, "23x": 170, "camembert": 170, "393": 170, "174": 170, "783": 170, "344": 170, "684": 170, "99x": 170, "albert": 170, "312": 170, "155": 170, "01x": 170, "funnel": 170, "281": 170, "395": 170, "173": 170, "373": 170, "405": 170, "30x": 170, "stsb": 170, "396": 170, "136": 170, "377": 170, "17x": 170, "391": 170, "25x": 170, "135": 170, "61x": 170, "117": 170, "93x": 170, "lvwerra": 170, "pegasu": 170, "samsum": 170, "1981": 170, "598": 170, "1095": 170, "298": 170, "67x": 170, "549": 170, "29x": 170, "375": 170, "hellaswag": 170, "winogrand": 170, "piqa": 170, "wikitext": 170, "word_perplex": 170, "4954": 170, "6409": 170, "7541": 170, "6434": 170, "8816": 170, "gptqw4g128asym": 170, "679": 170, "4895": 170, "6433": 170, "7476": 170, "6399": 170, "9945": 170, "0999": 170, "gptqw4g32asym": 170, "6829": 170, "4923": 170, "6401": 170, "7486": 170, "6410": 170, "9963": 170, "0141": 170, "gptqw4g128sym": 170, "685": 170, "4907": 170, "6361": 170, "7443": 170, "6390": 170, "1498": 170, "gptqw4g32sym": 170, "6911": 170, "4899": 170, "6448": 170, "7497": 170, "6439": 170, "0927": 170, "5049": 170, "6543": 170, "7628": 170, "6497": 170, "2862": 170, "4984": 170, "6535": 170, "7568": 170, "6473": 170, "9962": 170, "4193": 170, "6885": 170, "4973": 170, "753": 170, "6455": 170, "9935": 170, "4607": 170, "decapoda": 170, "5642": 170, "6709": 170, "7835": 170, "6887": 170, "4202": 170, "7244": 170, "5603": 170, "6614": 170, "6824": 170, "9909": 170, "5881": 170, "5911": 170, "7009": 170, "7878": 170, "7106": 170, "7518": 170, "5843": 170, "6961": 170, "7911": 170, "4319": 170, "7572": 170, "5898": 170, "7056": 170, "7894": 170, "7105": 170, "9998": 170, "3429": 170, "7596": 170, "5841": 170, "6977": 170, "7905": 170, "7080": 170, "4916": 170, "6266": 170, "7277": 170, "8096": 170, "7350": 170, "2384": 170, "778": 170, "624": 170, "7269": 170, "8047": 170, "7334": 170, "4237": 170, "7706": 170, "6239": 170, "7285": 170, "8058": 170, "7322": 170, "4697": 170, "7836": 170, "6195": 170, "7337": 170, "9983": 170, "5604": 170, "5732": 170, "648": 170, "7715": 170, "6746": 170, "7107": 170, "6982": 170, "5637": 170, "6527": 170, "7704": 170, "6713": 170, "9950": 170, "9702": 170, "5682": 170, "6575": 170, "7758": 170, "6742": 170, "9317": 170, "567": 170, "6902": 170, "7353": 170, "6622": 170, "7829": 170, "6862": 170, "9635": 170, "7246": 170, "5617": 170, "6756": 170, "7797": 170, "6854": 170, "9931": 170, "2799": 170, "7312": 170, "6059": 170, "7103": 170, "7077": 170, "2213": 170, "7273": 170, "6018": 170, "7088": 170, "7742": 170, "7030": 170, "9934": 170, "2538": 170, "083": 170, "7283": 170, "6053": 170, "7024": 170, "7764": 170, "7031": 170, "1889": 170, "374": 170, "727": 170, "5997": 170, "7018": 170, "9916": 170, "2504": 170, "497": 170, "7122": 170, "8984": 170, "5933": 170, "689": 170, "7851": 170, "7075": 170, "1556": 170, "448": 170, "7675": 170, "5934": 170, "7856": 170, "7111": 170, "9984": 170, "1514": 170, "927": 170, "7566": 170, "5899": 170, "7032": 170, "9953": 170, "1374": 170, "728": 170, "4628": 170, "6456": 170, "6029": 170, "6438": 170, "5799": 170, "4542": 170, "6004": 170, "0626": 170, "4789": 170, "6134": 170, "7432": 170, "5525": 170, "4731": 170, "6504": 170, "7617": 170, "6094": 170, "7828": 170, "5098": 170, "7622": 170, "6505": 170, "3242": 170, "6878": 170, "5058": 170, "6393": 170, "7633": 170, "6491": 170, "5514": 170, "6864": 170, "5084": 170, "6519": 170, "6509": 170, "4728": 170, "6876": 170, "5045": 170, "6474": 170, "9952": 170, "6379": 170, "5282": 170, "614": 170, "7448": 170, "6312": 170, "6377": 170, "5228": 170, "5991": 170, "6261": 170, "9919": 170, "4096": 170, "6224": 170, "4271": 170, "577": 170, "722": 170, "5871": 170, "9359": 170, "6123": 170, "4227": 170, "5738": 170, "7203": 170, "5823": 170, "9917": 170, "3377": 170, "615": 170, "4259": 170, "5714": 170, "7247": 170, "9951": 170, "2083": 170, "6154": 170, "4208": 170, "5777": 170, "7198": 170, "5834": 170, "3121": 170, "7233": 170, "5359": 170, "7753": 170, "195": 170, "7186": 170, "5328": 170, "7699": 170, "6687": 170, "9922": 170, "3463": 170, "7268": 170, "533": 170, "659": 170, "6726": 170, "2897": 170, "5718": 170, "6859": 170, "7927": 170, "6890": 170, "9324": 170, "7006": 170, "5655": 170, "6803": 170, "7965": 170, "6857": 170, "1515": 170, "5752": 170, "6748": 170, "7845": 170, "6724": 170, "5951": 170, "6472": 170, "5716": 170, "6685": 170, "784": 170, "6678": 170, "8539": 170, "6918": 170, "5819": 170, "678": 170, "6861": 170, "8863": 170, "5765": 170, "6827": 170, "7873": 170, "6832": 170, "1451": 170, "storywrit": 170, "693": 170, "5477": 170, "663": 170, "6719": 170, "9125": 170, "6661": 170, "7813": 170, "6693": 170, "9961": 170, "1137": 170, "rw": 170, "6604": 170, "5419": 170, "6598": 170, "6594": 170, "7616": 170, "6484": 170, "5369": 170, "7807": 170, "6559": 170, "9947": 170, "9411": 170, "6571": 170, "5398": 170, "6582": 170, "6579": 170, "8809": 170, "652": 170, "535": 170, "7682": 170, "6532": 170, "9906": 170, "0048": 170, "5177": 170, "6669": 170, "7824": 170, "5053": 170, "6301": 170, "5142": 170, "6654": 170, "6483": 170, "8146": 170, "517": 170, "6488": 170, "9941": 170, "1666": 170, "734": 170, "1658": 170, "1495": 170, "733": 170, "1661": 170, "732": 170, "1713": 170, "767": 170, "1747": 170, "770": 170, "7519": 170, "4430": 170, "4413": 170, "72x": 170, "7190": 170, "4019": 170, "613": 170, "170": 170, "611": 170, "186": 170, "619": 170, "184": 170, "36x": 170, "623": 170, "5711": 170, "2584": 170, "6136": 170, "2630": 170, "33x": 170, "shufflenet": 170, "6820": 170, "3686": 170, "googlenet": 170, "1971": 170, "1120": 170, "76x": 170, "1838": 170, "1142": 170, "squeezenet": 170, "10163": 170, "5771": 170, "10339": 170, "6002": 170, "caffenet": 170, "2805": 170, "1077": 170, "60x": 170, "4351": 170, "822": 170, "alexnet": 170, "2169": 170, "893": 170, "43x": 170, "2232": 170, "841": 170, "65x": 170, "zfnet": 170, "921": 170, "525": 170, "75x": 170, "925": 170, "534": 170, "73x": 170, "1862": 170, "1161": 170, "1956": 170, "1262": 170, "55x": 170, "efficientnet": 170, "2793": 170, "1383": 170, "beit": 170, "206": 170, "91x": 170, "duc": 170, "74x": 170, "8780": 170, "1920": 170, "emot": 170, "ferplu": 170, "6360": 170, "3067": 170, "07x": 170, "arcfac": 170, "449": 170, "511": 170, "484": 170, "222": 170, "18x": 170, "integerop": 170, "635": 170, "1324": 170, "244": 170, "47x": 170, "440": 170, "214": 170, "06x": 170, "715": 170, "201": 170, "03x": 170, "714": 170, "213": 170, "339": 170, "58x": 170, "215": 170, "89x": 170, "712": 170, "217": 170, "l12": 170, "h384": 170, "1209": 170, "588": 170, "1268": 170, "16x": 170, "1253": 170, "399": 170, "14x": 170, "l6": 170, "1139": 170, "94x": 170, "2365": 170, "08x": 170, "718": 170, "35x": 170, "electra": 170, "discrimin": 170, "1951": 170, "71x": 170, "2198": 170, "1129": 170, "mini": 170, "5814": 170, "3388": 170, "6396": 170, "3445": 170, "86x": 170, "bart": 170, "126": 170, "spanbert": 170, "multilingu": 170, "82x": 170, "118": 170, "46x": 170, "layoutlmv3": 170, "funsd": 170, "layoutlmv2": 170, "perplex": 170, "2788": 170, "7002": 170, "4124": 170, "9921": 170, "3950": 170, "9892": 170, "9163": 170, "7240": 170, "0438": 170, "7634": 170, "1186": 170, "9944": 170, "1276": 170, "7543": 170, "6181": 170, "rtnw4g32asym": 170, "6496": 170, "9967": 170, "7964": 170, "6612": 170, "rtnw4g32sym": 170, "7941": 170, "7243": 170, "9971": 170, "taskdataset": 170, "accuracyspars": 170, "ratiospars": 170, "commentsbalancedor": 170, "unbalanc": 170, "answeringsquad": 170, "87f1": 170, "momentumunbalanc": 170, "momentumbalanc": 170, "90f1": 170, "59f1": 170, "23f1": 170, "classificationmrpc": 170, "52f1": 170, "26f1": 170, "classificationsst": 170, "61accuraci": 170, "recognitionimagenet": 170, "95top1": 170, "v5s6": 170, "detectioncoco": 170, "ap0": 170, "6ap0": 170, "584": 170, "34f1": 170, "lassounbalanc": 170, "classificationmnli": 170, "mm": 170, "allbalanc": 170, "32accuraci": 170, "sensitivitybalanc": 170, "classificationqqp": 170, "classificationqnli": 170, "54accuraci": 170, "em": 170, "mobilenetv2": 170, "wideresnet40": 170, "9522": 170, "8178": 170, "0213": 170, "8235": 170, "027": 170, "5494": 170, "7153": 170, "5540": 170, "5523": 170, "vgg": 170, "bn": 170, "7022": 170, "7415": 170, "7025": 170, "0003": 170, "6739": 170, "7399": 170, "6845": 170, "0106": 170, "blendcnn": 170, "7034": 170, "8382": 170, "bilstm": 170, "8314": 170, "9403": 170, "9048": 170, "0734": 170, "7323": 170, "8256": 170, "8084": 170, "8814": 170, "7442": 170, "8371": 170, "0119": 170, "0115": 170, "tinybert": 170, "8018": 170, "8044": 170, "8363": 170, "8411": 170, "8025": 170, "8074": 170, "0007": 170, "0030": 170, "8626": 170, "8213": 170, "9091": 170, "8782": 170, "8684": 170, "8259": 170, "distilroberta": 170, "6057": 170, "6187": 170, "0130": 170, "c6i": 170, "2xlarg": 170, "c6a": 170, "c6g": 170, "a100cuda": 170, "executionprovid": 170}, "objects": {"": [[37, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "algorithm"], [5, 0, 0, "-", "benchmark"], [8, 0, 0, "-", "common"], [15, 0, 0, "-", "config"], [16, 0, 0, "-", "contrib"], [31, 0, 0, "-", "data"], [44, 0, 0, "-", "metric"], [46, 0, 0, "-", "mix_precision"], [48, 0, 0, "-", "model"], [56, 0, 0, "-", "objective"], [57, 0, 0, "-", "profiling"], [58, 0, 0, "-", "quantization"], [66, 0, 0, "-", "strategy"], [77, 0, 0, "-", "training"], [85, 0, 0, "-", "utils"], [93, 0, 0, "-", "version"]], "neural_compressor.algorithm": [[0, 0, 0, "-", "algorithm"], [1, 0, 0, "-", "fast_bias_correction"], [3, 0, 0, "-", "smooth_quant"], [4, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[0, 1, 1, "", "ALGORITHMS"], [0, 1, 1, "", "Algorithm"], [0, 1, 1, "", "AlgorithmScheduler"], [0, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[1, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[3, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[4, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[5, 2, 1, "", "benchmark_with_raw_cmd"], [5, 2, 1, "", "call_one"], [5, 2, 1, "", "config_instance"], [5, 2, 1, "", "fit"], [5, 2, 1, "", "generate_prefix"], [5, 2, 1, "", "get_architecture"], [5, 2, 1, "", "get_bounded_threads"], [5, 2, 1, "", "get_core_ids"], [5, 2, 1, "", "get_physical_ids"], [5, 2, 1, "", "get_threads"], [5, 2, 1, "", "get_threads_per_core"], [5, 2, 1, "", "profile"], [5, 2, 1, "", "run_instance"], [5, 2, 1, "", "set_all_env_var"], [5, 2, 1, "", "set_env_var"], [5, 2, 1, "", "summary_benchmark"]], "neural_compressor.common": [[6, 0, 0, "-", "base_config"], [7, 0, 0, "-", "base_tuning"], [9, 0, 0, "-", "tuning_param"], [11, 0, 0, "-", "utils"]], "neural_compressor.common.base_config": [[6, 1, 1, "", "BaseConfig"], [6, 1, 1, "", "ComposableConfig"], [6, 1, 1, "", "ConfigRegistry"], [6, 2, 1, "", "get_all_config_set_from_config_registry"], [6, 2, 1, "", "register_config"], [6, 2, 1, "", "register_supported_configs_for_fwk"]], "neural_compressor.common.base_config.BaseConfig": [[6, 3, 1, "", "name"], [6, 3, 1, "", "params_list"]], "neural_compressor.common.base_config.ComposableConfig": [[6, 3, 1, "", "config_list"]], "neural_compressor.common.base_tuning": [[7, 1, 1, "", "ConfigLoader"], [7, 1, 1, "", "ConfigSet"], [7, 1, 1, "", "EvaluationFuncWrapper"], [7, 1, 1, "", "Evaluator"], [7, 1, 1, "", "Sampler"], [7, 1, 1, "", "SequentialSampler"], [7, 1, 1, "", "TuningConfig"], [7, 1, 1, "", "TuningMonitor"], [7, 2, 1, "", "init_tuning"]], "neural_compressor.common.base_tuning.ConfigSet": [[7, 3, 1, "", "config_list"]], "neural_compressor.common.tuning_param": [[9, 1, 1, "", "ParamLevel"], [9, 1, 1, "", "TuningParam"]], "neural_compressor.common.tuning_param.ParamLevel": [[9, 3, 1, "", "MODEL_LEVEL"], [9, 3, 1, "", "OP_LEVEL"], [9, 3, 1, "", "OP_TYPE_LEVEL"]], "neural_compressor.common.utils": [[10, 0, 0, "-", "constants"], [12, 0, 0, "-", "logger"], [13, 0, 0, "-", "save_load"], [14, 0, 0, "-", "utility"]], "neural_compressor.common.utils.constants": [[10, 1, 1, "", "Mode"]], "neural_compressor.common.utils.logger": [[12, 1, 1, "", "Logger"], [12, 1, 1, "", "TuningLogger"]], "neural_compressor.common.utils.save_load": [[13, 2, 1, "", "load_config_mapping"], [13, 2, 1, "", "save_config_mapping"]], "neural_compressor.common.utils.utility": [[14, 1, 1, "", "CpuInfo"], [14, 1, 1, "", "LazyImport"], [14, 1, 1, "", "ProcessorType"], [14, 1, 1, "", "Statistics"], [14, 2, 1, "", "call_counter"], [14, 2, 1, "", "detect_processor_type_based_on_hw"], [14, 2, 1, "", "dump_elapsed_time"], [14, 2, 1, "", "get_workspace"], [14, 2, 1, "", "log_process"], [14, 2, 1, "", "set_random_seed"], [14, 2, 1, "", "set_resume_from"], [14, 2, 1, "", "set_tensorboard"], [14, 2, 1, "", "set_workspace"], [14, 2, 1, "", "singleton"]], "neural_compressor.config": [[15, 1, 1, "", "AccuracyCriterion"], [15, 1, 1, "", "BenchmarkConfig"], [15, 1, 1, "", "DistillationConfig"], [15, 1, 1, "", "DotDict"], [15, 1, 1, "", "ExportConfig"], [15, 1, 1, "", "HPOConfig"], [15, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [15, 1, 1, "", "Keras"], [15, 1, 1, "", "KnowledgeDistillationLossConfig"], [15, 1, 1, "", "MXNet"], [15, 1, 1, "", "MixedPrecisionConfig"], [15, 1, 1, "", "NASConfig"], [15, 1, 1, "", "ONNX"], [15, 1, 1, "", "ONNXQlinear2QDQConfig"], [15, 1, 1, "", "Options"], [15, 1, 1, "", "PostTrainingQuantConfig"], [15, 1, 1, "", "PyTorch"], [15, 1, 1, "", "QuantizationAwareTrainingConfig"], [15, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [15, 1, 1, "", "TF2ONNXConfig"], [15, 1, 1, "", "TensorFlow"], [15, 1, 1, "", "Torch2ONNXConfig"], [15, 1, 1, "", "TuningCriterion"], [15, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[17, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[18, 0, 0, "-", "sigopt"], [19, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[18, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[26, 0, 0, "-", "datasets"], [30, 0, 0, "-", "filters"], [33, 0, 0, "-", "transforms"]], "neural_compressor.data.datasets": [[20, 0, 0, "-", "bert_dataset"], [21, 0, 0, "-", "coco_dataset"], [22, 0, 0, "-", "dataset"], [23, 0, 0, "-", "dummy_dataset"], [24, 0, 0, "-", "dummy_dataset_v2"], [25, 0, 0, "-", "imagenet_dataset"], [27, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[20, 1, 1, "", "InputFeatures"], [20, 1, 1, "", "ONNXRTBertDataset"], [20, 1, 1, "", "ParseDecodeBert"], [20, 1, 1, "", "PytorchBertDataset"], [20, 1, 1, "", "TensorflowBertDataset"], [20, 1, 1, "", "TensorflowModelZooBertDataset"], [20, 2, 1, "", "convert_examples_to_features"], [20, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[21, 1, 1, "", "COCONpy"], [21, 1, 1, "", "COCORaw"], [21, 1, 1, "", "COCORecordDataset"], [21, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[22, 1, 1, "", "CIFAR10"], [22, 1, 1, "", "CIFAR100"], [22, 1, 1, "", "Dataset"], [22, 1, 1, "", "Datasets"], [22, 1, 1, "", "FashionMNIST"], [22, 1, 1, "", "ImageFolder"], [22, 1, 1, "", "IterableDataset"], [22, 1, 1, "", "MNIST"], [22, 1, 1, "", "MXNetCIFAR10"], [22, 1, 1, "", "MXNetCIFAR100"], [22, 1, 1, "", "MXNetDatasets"], [22, 1, 1, "", "MXNetFashionMNIST"], [22, 1, 1, "", "MXNetImageFolder"], [22, 1, 1, "", "MXNetMNIST"], [22, 1, 1, "", "ONNXRTITDatasets"], [22, 1, 1, "", "ONNXRTQLDatasets"], [22, 1, 1, "", "PyTorchDatasets"], [22, 1, 1, "", "PytorchCIFAR10"], [22, 1, 1, "", "PytorchCIFAR100"], [22, 1, 1, "", "PytorchFashionMNIST"], [22, 1, 1, "", "PytorchMNIST"], [22, 1, 1, "", "PytorchMxnetWrapDataset"], [22, 1, 1, "", "PytorchMxnetWrapFunction"], [22, 1, 1, "", "Tensorflow"], [22, 1, 1, "", "TensorflowCIFAR10"], [22, 1, 1, "", "TensorflowCIFAR100"], [22, 1, 1, "", "TensorflowDatasets"], [22, 1, 1, "", "TensorflowFashionMNIST"], [22, 1, 1, "", "TensorflowImageRecord"], [22, 1, 1, "", "TensorflowMNIST"], [22, 1, 1, "", "TensorflowTFRecordDataset"], [22, 1, 1, "", "TensorflowVOCRecord"], [22, 2, 1, "", "calculate_md5"], [22, 2, 1, "", "check_integrity"], [22, 2, 1, "", "dataset_registry"], [22, 2, 1, "", "download_url"], [22, 4, 1, "", "framework_datasets"], [22, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[23, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, 1, 1, "", "DummyDataset"], [24, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, 1, 1, "", "ImagenetRaw"], [25, 1, 1, "", "MXNetImagenetRaw"], [25, 1, 1, "", "ONNXRTImagenetDataset"], [25, 1, 1, "", "PytorchImagenetRaw"], [25, 1, 1, "", "TensorflowImagenetDataset"], [25, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[28, 0, 0, "-", "coco_filter"], [29, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[28, 1, 1, "", "LabelBalanceCOCORawFilter"], [28, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[29, 1, 1, "", "FILTERS"], [29, 1, 1, "", "Filter"], [29, 1, 1, "", "MXNetFilters"], [29, 1, 1, "", "ONNXRTITFilters"], [29, 1, 1, "", "ONNXRTQLFilters"], [29, 1, 1, "", "PyTorchFilters"], [29, 1, 1, "", "TensorflowFilters"], [29, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[32, 0, 0, "-", "imagenet_transform"], [34, 0, 0, "-", "postprocess"], [35, 0, 0, "-", "tokenization"], [36, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.imagenet_transform": [[32, 1, 1, "", "BilinearImagenetTransform"], [32, 1, 1, "", "LabelShift"], [32, 1, 1, "", "ONNXResizeCropImagenetTransform"], [32, 1, 1, "", "OnnxBilinearImagenetTransform"], [32, 1, 1, "", "ParseDecodeImagenet"], [32, 1, 1, "", "ParseDecodeImagenetTransform"], [32, 1, 1, "", "QuantizedInput"], [32, 1, 1, "", "ResizeWithAspectRatio"], [32, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [32, 1, 1, "", "TensorflowShiftRescale"], [32, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[34, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, 1, 1, "", "BasicTokenizer"], [35, 1, 1, "", "FullTokenizer"], [35, 1, 1, "", "WordpieceTokenizer"], [35, 2, 1, "", "convert_by_vocab"], [35, 2, 1, "", "convert_to_unicode"], [35, 2, 1, "", "load_vocab"], [35, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[36, 1, 1, "", "AlignImageChannelTransform"], [36, 1, 1, "", "BaseTransform"], [36, 1, 1, "", "CastONNXTransform"], [36, 1, 1, "", "CastPyTorchTransform"], [36, 1, 1, "", "CastTFTransform"], [36, 1, 1, "", "CenterCropTFTransform"], [36, 1, 1, "", "CenterCropTransform"], [36, 1, 1, "", "CollectTransform"], [36, 1, 1, "", "ComposeTransform"], [36, 1, 1, "", "CropResizeTFTransform"], [36, 1, 1, "", "CropResizeTransform"], [36, 1, 1, "", "CropToBoundingBox"], [36, 1, 1, "", "InputFeatures"], [36, 1, 1, "", "MXNetCropResizeTransform"], [36, 1, 1, "", "MXNetCropToBoundingBox"], [36, 1, 1, "", "MXNetNormalizeTransform"], [36, 1, 1, "", "MXNetTransforms"], [36, 1, 1, "", "MXNetTranspose"], [36, 1, 1, "", "NormalizeTFTransform"], [36, 1, 1, "", "NormalizeTransform"], [36, 1, 1, "", "ONNXRTCropToBoundingBox"], [36, 1, 1, "", "ONNXRTITTransforms"], [36, 1, 1, "", "ONNXRTQLTransforms"], [36, 1, 1, "", "PaddedCenterCropTransform"], [36, 1, 1, "", "ParseDecodeVocTransform"], [36, 1, 1, "", "PyTorchAlignImageChannel"], [36, 1, 1, "", "PyTorchCropResizeTransform"], [36, 1, 1, "", "PyTorchNormalizeTransform"], [36, 1, 1, "", "PyTorchTransforms"], [36, 1, 1, "", "PyTorchTranspose"], [36, 1, 1, "", "PytorchMxnetTransform"], [36, 1, 1, "", "PytorchMxnetWrapFunction"], [36, 1, 1, "", "RandomCropTFTransform"], [36, 1, 1, "", "RandomCropTransform"], [36, 1, 1, "", "RandomHorizontalFlip"], [36, 1, 1, "", "RandomResizedCropMXNetTransform"], [36, 1, 1, "", "RandomResizedCropPytorchTransform"], [36, 1, 1, "", "RandomResizedCropTFTransform"], [36, 1, 1, "", "RandomResizedCropTransform"], [36, 1, 1, "", "RandomVerticalFlip"], [36, 1, 1, "", "RescaleKerasPretrainTransform"], [36, 1, 1, "", "RescaleTFTransform"], [36, 1, 1, "", "RescaleTransform"], [36, 1, 1, "", "ResizeMXNetTransform"], [36, 1, 1, "", "ResizePytorchTransform"], [36, 1, 1, "", "ResizeTFTransform"], [36, 1, 1, "", "ResizeTransform"], [36, 1, 1, "", "ResizeWithRatio"], [36, 1, 1, "", "SquadExample"], [36, 1, 1, "", "TFModelZooCollectTransform"], [36, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [36, 1, 1, "", "TFSquadV1PostTransform"], [36, 1, 1, "", "TRANSFORMS"], [36, 1, 1, "", "TensorflowCropToBoundingBox"], [36, 1, 1, "", "TensorflowRandomHorizontalFlip"], [36, 1, 1, "", "TensorflowRandomVerticalFlip"], [36, 1, 1, "", "TensorflowResizeWithRatio"], [36, 1, 1, "", "TensorflowTransform"], [36, 1, 1, "", "TensorflowTransforms"], [36, 1, 1, "", "TensorflowTranspose"], [36, 1, 1, "", "TensorflowWrapFunction"], [36, 1, 1, "", "ToArray"], [36, 1, 1, "", "ToNDArrayTransform"], [36, 1, 1, "", "Transforms"], [36, 1, 1, "", "Transpose"], [36, 2, 1, "", "convert_examples_to_features"], [36, 2, 1, "", "get_final_text"], [36, 2, 1, "", "get_torchvision_map"], [36, 2, 1, "", "read_squad_examples"], [36, 2, 1, "", "transform_registry"]], "neural_compressor.metric": [[38, 0, 0, "-", "bleu"], [39, 0, 0, "-", "bleu_util"], [40, 0, 0, "-", "coco_label_map"], [41, 0, 0, "-", "coco_tools"], [42, 0, 0, "-", "evaluate_squad"], [43, 0, 0, "-", "f1"], [45, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[38, 1, 1, "", "BLEU"], [38, 1, 1, "", "UnicodeRegex"], [38, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[38, 3, 1, "", "labels"], [38, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[38, 3, 1, "", "nondigit_punct_re"], [38, 3, 1, "", "punct_nondigit_re"], [38, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[39, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[41, 1, 1, "", "COCOEvalWrapper"], [41, 1, 1, "", "COCOWrapper"], [41, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [41, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [41, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[41, 3, 1, "", "dataset"], [41, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[42, 2, 1, "", "evaluate"], [42, 2, 1, "", "exact_match_score"], [42, 2, 1, "", "f1_score"], [42, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, 2, 1, "", "evaluate"], [43, 2, 1, "", "f1_score"], [43, 2, 1, "", "metric_max_over_ground_truths"], [43, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[45, 1, 1, "", "Accuracy"], [45, 1, 1, "", "BaseMetric"], [45, 1, 1, "", "COCOmAPv2"], [45, 1, 1, "", "F1"], [45, 1, 1, "", "GeneralTopK"], [45, 1, 1, "", "Loss"], [45, 1, 1, "", "MAE"], [45, 1, 1, "", "METRICS"], [45, 1, 1, "", "MSE"], [45, 1, 1, "", "MXNetMetrics"], [45, 1, 1, "", "Metric"], [45, 1, 1, "", "ONNXRTGLUE"], [45, 1, 1, "", "ONNXRTITMetrics"], [45, 1, 1, "", "ONNXRTQLMetrics"], [45, 1, 1, "", "PyTorchLoss"], [45, 1, 1, "", "PyTorchMetrics"], [45, 1, 1, "", "RMSE"], [45, 1, 1, "", "ROC"], [45, 1, 1, "", "SquadF1"], [45, 1, 1, "", "TensorflowCOCOMAP"], [45, 1, 1, "", "TensorflowMAP"], [45, 1, 1, "", "TensorflowMetrics"], [45, 1, 1, "", "TensorflowTopK"], [45, 1, 1, "", "TensorflowVOCMAP"], [45, 1, 1, "", "WrapMXNetMetric"], [45, 1, 1, "", "WrapONNXRTMetric"], [45, 1, 1, "", "WrapPyTorchMetric"], [45, 1, 1, "", "mIOU"], [45, 2, 1, "", "metric_registry"], [45, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"], [45, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[45, 3, 1, "", "sample"], [45, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[45, 3, 1, "", "compare_label"], [45, 3, 1, "", "label_list"], [45, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[45, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[45, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[45, 3, 1, "", "k"], [45, 3, 1, "", "num_correct"], [45, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[46, 2, 1, "", "fit"]], "neural_compressor.model": [[47, 0, 0, "-", "base_model"], [49, 0, 0, "-", "keras_model"], [50, 0, 0, "-", "model"], [51, 0, 0, "-", "mxnet_model"], [52, 0, 0, "-", "nets_factory"], [53, 0, 0, "-", "onnx_model"], [54, 0, 0, "-", "tensorflow_model"], [55, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[47, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[49, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[50, 1, 1, "", "Model"], [50, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[51, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[52, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[53, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[54, 1, 1, "", "TensorflowBaseModel"], [54, 1, 1, "", "TensorflowCheckpointModel"], [54, 1, 1, "", "TensorflowLLMModel"], [54, 1, 1, "", "TensorflowModel"], [54, 1, 1, "", "TensorflowQATModel"], [54, 1, 1, "", "TensorflowSavedModelModel"], [54, 2, 1, "", "checkpoint_session"], [54, 2, 1, "", "estimator_session"], [54, 2, 1, "", "frozen_pb_session"], [54, 2, 1, "", "get_model_type"], [54, 2, 1, "", "graph_def_session"], [54, 2, 1, "", "graph_session"], [54, 2, 1, "", "keras_session"], [54, 2, 1, "", "load_saved_model"], [54, 2, 1, "", "saved_model_session"], [54, 2, 1, "", "slim_session"], [54, 2, 1, "", "try_loading_keras"], [54, 2, 1, "", "validate_and_inference_input_output"], [54, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[55, 1, 1, "", "IPEXModel"], [55, 1, 1, "", "PyTorchBaseModel"], [55, 1, 1, "", "PyTorchFXModel"], [55, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[56, 1, 1, "", "Accuracy"], [56, 1, 1, "", "Footprint"], [56, 1, 1, "", "ModelSize"], [56, 1, 1, "", "MultiObjective"], [56, 1, 1, "", "Objective"], [56, 1, 1, "", "Performance"], [56, 2, 1, "", "objective_custom_registry"], [56, 2, 1, "", "objective_registry"]], "neural_compressor.quantization": [[58, 2, 1, "", "fit"]], "neural_compressor.strategy": [[59, 0, 0, "-", "auto"], [60, 0, 0, "-", "auto_mixed_precision"], [61, 0, 0, "-", "basic"], [62, 0, 0, "-", "bayesian"], [63, 0, 0, "-", "conservative"], [64, 0, 0, "-", "exhaustive"], [65, 0, 0, "-", "hawq_v2"], [67, 0, 0, "-", "mse"], [68, 0, 0, "-", "mse_v2"], [69, 0, 0, "-", "random"], [70, 0, 0, "-", "strategy"], [72, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[59, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[61, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[62, 1, 1, "", "BayesianOptimization"], [62, 1, 1, "", "BayesianTuneStrategy"], [62, 1, 1, "", "TargetSpace"], [62, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[63, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[67, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[69, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[70, 1, 1, "", "TuneStrategy"], [70, 1, 1, "", "TuneStrategyMeta"], [70, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[71, 0, 0, "-", "constant"], [73, 0, 0, "-", "tuning_sampler"], [74, 0, 0, "-", "tuning_space"], [75, 0, 0, "-", "tuning_structs"], [76, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, 1, 1, "", "BlockFallbackTuningSampler"], [73, 1, 1, "", "FallbackTuningSampler"], [73, 1, 1, "", "LowerBitsSampler"], [73, 1, 1, "", "ModelWiseTuningSampler"], [73, 1, 1, "", "OpTypeWiseTuningSampler"], [73, 1, 1, "", "OpWiseTuningSampler"], [73, 1, 1, "", "SmoothQuantSampler"], [73, 1, 1, "", "TuningOrder"], [73, 1, 1, "", "TuningSampler"], [73, 1, 1, "", "WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, 1, 1, "", "TuningItem"], [74, 1, 1, "", "TuningSpace"], [74, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [74, 2, 1, "", "pattern_to_internal"], [74, 2, 1, "", "pattern_to_path"], [74, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[75, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[76, 1, 1, "", "ClassRegister"], [76, 1, 1, "", "OrderedDefaultDict"], [76, 1, 1, "", "QuantOptions"], [76, 1, 1, "", "QuantType"], [76, 2, 1, "", "build_slave_faker_model"], [76, 2, 1, "", "extract_data_type"], [76, 2, 1, "", "get_adaptor_name"], [76, 2, 1, "", "preprocess_user_cfg"], [76, 2, 1, "", "reverted_data_type"]], "neural_compressor.training": [[77, 1, 1, "", "CallBacks"], [77, 1, 1, "", "CompressionManager"], [77, 2, 1, "", "fit"], [77, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[78, 0, 0, "-", "collect_layer_histogram"], [79, 0, 0, "-", "constant"], [80, 0, 0, "-", "create_obj_from_config"], [81, 0, 0, "-", "export"], [86, 0, 0, "-", "kl_divergence"], [87, 0, 0, "-", "load_huggingface"], [88, 0, 0, "-", "logger"], [89, 0, 0, "-", "options"], [90, 0, 0, "-", "pytorch"], [91, 0, 0, "-", "utility"], [92, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[78, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[80, 2, 1, "", "create_dataloader"], [80, 2, 1, "", "create_dataset"], [80, 2, 1, "", "create_eval_func"], [80, 2, 1, "", "create_train_func"], [80, 2, 1, "", "get_algorithm"], [80, 2, 1, "", "get_func_from_config"], [80, 2, 1, "", "get_metrics"], [80, 2, 1, "", "get_postprocess"], [80, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.export": [[82, 0, 0, "-", "qlinear2qdq"], [83, 0, 0, "-", "tf2onnx"], [84, 0, 0, "-", "torch2onnx"]], "neural_compressor.utils.export.qlinear2qdq": [[82, 2, 1, "", "check_model"], [82, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[83, 2, 1, "", "tf_to_fp32_onnx"], [83, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.utils.export.torch2onnx": [[84, 2, 1, "", "dynamic_quant_export"], [84, 2, 1, "", "get_node_mapping"], [84, 2, 1, "", "get_quantizable_onnx_ops"], [84, 2, 1, "", "static_quant_export"], [84, 2, 1, "", "torch_to_fp32_onnx"], [84, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.utils.kl_divergence": [[86, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[87, 1, 1, "", "OptimizedModel"], [87, 2, 1, "", "export_compressed_model"], [87, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[88, 1, 1, "", "Logger"], [88, 2, 1, "", "debug"], [88, 2, 1, "", "error"], [88, 2, 1, "", "fatal"], [88, 2, 1, "", "info"], [88, 2, 1, "", "log"], [88, 2, 1, "", "warn"], [88, 2, 1, "", "warning"]], "neural_compressor.utils.options": [[89, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[90, 2, 1, "", "is_int8_model"], [90, 2, 1, "", "load"], [90, 2, 1, "", "load_weight_only"], [90, 2, 1, "", "recover_model_from_json"]], "neural_compressor.utils.utility": [[91, 1, 1, "", "CaptureOutputToFile"], [91, 1, 1, "", "CpuInfo"], [91, 2, 1, "", "Dequantize"], [91, 1, 1, "", "DotDict"], [91, 1, 1, "", "GLOBAL_STATE"], [91, 1, 1, "", "LazyImport"], [91, 1, 1, "", "MODE"], [91, 1, 1, "", "OpEntry"], [91, 1, 1, "", "Statistics"], [91, 2, 1, "", "alias_param"], [91, 2, 1, "", "calculate_mse"], [91, 2, 1, "", "check_key_exist"], [91, 2, 1, "", "combine_histogram"], [91, 2, 1, "", "compare_objects"], [91, 2, 1, "", "compute_sparsity"], [91, 2, 1, "", "deep_get"], [91, 2, 1, "", "deep_set"], [91, 2, 1, "", "dequantize_weight"], [91, 2, 1, "", "dump_class_attrs"], [91, 2, 1, "", "dump_data_to_local"], [91, 2, 1, "", "dump_elapsed_time"], [91, 2, 1, "", "dump_table"], [91, 2, 1, "", "dump_table_to_csv"], [91, 2, 1, "", "equal_dicts"], [91, 2, 1, "", "fault_tolerant_file"], [91, 2, 1, "", "get_all_fp32_data"], [91, 2, 1, "", "get_number_of_sockets"], [91, 2, 1, "", "get_op_list"], [91, 2, 1, "", "get_size"], [91, 2, 1, "", "get_tensor_histogram"], [91, 2, 1, "", "get_tensors_info"], [91, 2, 1, "", "get_tuning_history"], [91, 2, 1, "", "get_weights_details"], [91, 2, 1, "", "load_data_from_pkl"], [91, 2, 1, "", "mse_metric_gap"], [91, 2, 1, "", "print_op_list"], [91, 2, 1, "", "print_table"], [91, 2, 1, "", "recover"], [91, 2, 1, "", "set_random_seed"], [91, 2, 1, "", "set_resume_from"], [91, 2, 1, "", "set_tensorboard"], [91, 2, 1, "", "set_workspace"], [91, 2, 1, "", "show_memory_info"], [91, 2, 1, "", "singleton"], [91, 2, 1, "", "str2array"], [91, 2, 1, "", "time_limit"], [91, 2, 1, "", "version1_eq_version2"], [91, 2, 1, "", "version1_gt_version2"], [91, 2, 1, "", "version1_gte_version2"], [91, 2, 1, "", "version1_lt_version2"], [91, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[92, 1, 1, "", "WeightsDetails"], [92, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"neural_compressor": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "algorithm": [0, 1, 2, 3, 4, 106, 136, 164, 167, 169], "class": [0, 1, 3, 4, 6, 7, 9, 10, 12, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 41, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 86, 87, 88, 89, 91, 92, 118], "function": [0, 5, 6, 7, 13, 14, 20, 22, 29, 35, 36, 38, 39, 41, 42, 43, 45, 46, 50, 54, 56, 58, 62, 70, 74, 76, 77, 80, 82, 83, 84, 87, 88, 90, 91, 141], "modul": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92], "content": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 32, 34, 35, 36, 38, 39, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 117], "fast_bias_correct": 1, "submodul": [2, 8, 11, 17, 26, 30, 33, 37, 44, 48, 66, 72, 81, 85], "smooth_quant": 3, "weight_correct": 4, "benchmark": [5, 105, 126, 135, 153], "common": [6, 7, 8, 9, 10, 11, 12, 13, 14, 99, 100, 115, 144], "base_config": 6, "base_tun": 7, "subpackag": [8, 16, 31, 37, 66, 85], "tuning_param": 9, "util": [10, 11, 12, 13, 14, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123], "constant": [10, 71, 79], "logger": [12, 88, 137], "save_load": 13, "config": [15, 128, 157], "contrib": [16, 17, 18, 19], "strategi": [17, 18, 19, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 133, 166, 169], "sigopt": [18, 166, 169], "tpe": [19, 169], "data": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 119, 120, 142], "dataset": [20, 21, 22, 23, 24, 25, 26, 27, 147], "bert_dataset": 20, "coco_dataset": 21, "attribut": [22, 113], "dummy_dataset": 23, "dummy_dataset_v2": 24, "imagenet_dataset": 25, "style_transfer_dataset": 27, "filter": [28, 29, 30], "coco_filt": 28, "transform": [32, 33, 34, 35, 36, 147, 168], "imagenet_transform": 32, "postprocess": 34, "token": 35, "metric": [38, 39, 40, 41, 42, 43, 44, 45, 147, 152], "bleu": 38, "bleu_util": 39, "coco_label_map": 40, "coco_tool": 41, "evaluate_squad": 42, "f1": 43, "mix_precis": 46, "model": [47, 48, 49, 50, 51, 52, 53, 54, 55, 97, 98, 104, 119, 130, 143, 146, 149, 151, 153, 155, 156, 159, 162, 164, 167, 170], "base_model": 47, "keras_model": 49, "mxnet_model": 51, "nets_factori": 52, "onnx_model": 53, "tensorflow_model": 54, "torch_model": 55, "object": [56, 131, 157], "profil": 57, "quantiz": [58, 94, 95, 97, 98, 99, 100, 101, 103, 106, 110, 115, 117, 119, 120, 132, 136, 140, 143, 146, 149, 151, 153, 154, 156, 161, 162, 163, 164, 167, 170], "auto": [59, 102, 163, 167, 169], "auto_mixed_precis": 60, "basic": [61, 169], "bayesian": [62, 169], "conserv": [63, 169], "exhaust": [64, 169], "hawq_v2": [65, 169], "mse": [67, 169], "mse_v2": [68, 169], "random": [69, 169], "tuning_sampl": 73, "tuning_spac": 74, "tuning_struct": 75, "train": [77, 103, 110, 115, 134, 141, 153, 159, 161], "collect_layer_histogram": 78, "create_obj_from_config": 80, "export": [81, 82, 83, 84, 143, 164], "qlinear2qdq": 82, "tf2onnx": 83, "torch2onnx": 84, "kl_diverg": 86, "load_huggingfac": 87, "option": [89, 141], "pytorch": [90, 96, 97, 98, 99, 104, 110, 141, 143, 152, 161, 162, 163, 168, 170], "weights_detail": 92, "version": 93, "dynam": [94, 110, 115, 161], "introduct": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 110, 115, 118, 119, 120, 135, 136, 138, 140, 141, 143, 145, 148, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 166, 167, 168, 169], "get": [94, 95, 96, 98, 99, 101, 106, 108, 115, 117, 118, 135, 138, 140, 141, 145, 146, 152, 154, 156, 157, 158, 159, 161], "start": [94, 95, 96, 98, 99, 101, 106, 108, 115, 117, 118, 135, 138, 140, 141, 145, 146, 152, 154, 156, 157, 158, 159, 161], "exampl": [94, 95, 96, 98, 99, 101, 102, 110, 115, 118, 124, 135, 138, 140, 141, 142, 143, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 167, 170], "microsc": [95, 156], "api": [95, 96, 100, 103, 112, 118, 119, 124, 125, 135, 138, 140, 141, 146, 147, 152, 154, 156, 157, 158, 159], "refer": [95, 99, 110, 136, 137, 156, 159, 161, 164, 167], "mix": [96, 129, 153, 154, 163], "precis": [96, 129, 153, 154, 163], "support": [96, 97, 99, 100, 103, 105, 114, 115, 118, 120, 135, 136, 138, 140, 141, 143, 145, 148, 149, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 167, 168], "matrix": [96, 97, 99, 100, 103, 105, 108, 115, 118, 135, 136, 138, 140, 141, 143, 145, 148, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 167], "hardwar": [96, 149, 154, 170], "softwar": [96, 149, 154], "request": [96, 114, 154], "bf16": [96, 154], "fp16": [96, 154], "accuraci": [96, 101, 110, 151, 154, 161, 169], "driven": [96, 154], "autotun": [96, 100, 104], "smooth": [97, 102, 103, 110, 167], "usag": [97, 98, 99, 102, 105, 106, 167, 169], "fix": [97, 102, 167], "alpha": [97, 102, 167], "specifi": [97, 98, 99, 101, 161], "rule": [97, 98, 99, 101, 137, 161], "valid": [97, 146, 149, 167, 170], "framework": [97, 119, 138, 143, 145, 155, 156, 162, 164, 167], "static": [98, 103, 110, 115, 117, 161], "ipex": [98, 110, 161], "backend": [98, 103, 118, 161], "sampl": [98, 108, 119, 146], "pt2e": 98, "weight": [99, 110, 117, 164], "onli": [99, 110, 117, 164], "argument": 99, "rtn": 99, "gptq": 99, "autoround": 99, "awq": 99, "teq": 99, "hqq": 99, "save": 99, "load": [99, 100], "effici": 99, "client": [99, 106], "side": 99, "torch": [100, 123, 170], "like": [100, 120], "problem": [100, 115], "tensorflow": [101, 103, 104, 110, 141, 143, 152, 161, 163, 168, 170], "without": 101, "awar": [101, 110, 115, 153, 159, 161], "tune": [101, 102, 110, 120, 161, 164, 167, 169], "With": 101, "quant": [102, 167], "us": [102, 105, 120, 138, 152, 167], "determin": [102, 167], "through": [102, 149, 167, 170], "scheme": [103, 110, 161], "approach": [103, 161], "post": [103, 115, 153, 161], "devic": [103, 161], "overview": [104, 112, 114], "how": [104, 119, 120], "work": [104, 118, 161], "gener": [105, 119], "case": 105, "dump": 105, "throughput": 105, "latenc": 105, "summari": [105, 120], "demo": 105, "default": 106, "configur": [106, 120, 141, 145, 166], "optim": [106, 158, 159], "perform": [106, 166], "peak": 106, "memori": 106, "design": [107, 119, 139, 169], "architectur": [107, 139, 148, 149], "workflow": [107, 139], "quick": [108, 146], "featur": [108, 141, 145, 148, 161], "fundament": [110, 161, 167], "symmetr": 110, "asymmetr": 110, "per": [110, 167], "tensor": [110, 167], "channel": [110, 167], "matmul": [110, 167], "limit": [110, 167], "intel": [111, 117, 138, 148, 149, 152, 153, 171], "neural": [111, 115, 117, 138, 148, 149, 152, 153, 159, 166, 171], "compressor": [111, 115, 117, 138, 148, 149, 152, 153, 166, 171], "document": [111, 117, 124, 171], "section": [111, 171], "2": [112, 141, 144, 147, 153, 170], "x": [112, 153], "user": [112, 141, 147, 164], "guid": 112, "python": [112, 138, 146, 152], "base": [112, 149], "advanc": 112, "topic": 112, "contributor": [113, 114], "coven": [113, 114], "code": [113, 114, 137, 153, 164], "conduct": [113, 114], "our": [113, 167], "pledg": 113, "standard": 113, "respons": 113, "scope": [113, 159], "enforc": 113, "contribut": 114, "guidelin": 114, "creat": 114, "pull": 114, "step": 114, "checklist": 114, "templat": 114, "accept": 114, "criteria": [114, 159, 169], "statu": 114, "check": 114, "fx": 115, "mode": [115, 170], "note": [115, 165], "detail": 115, "secur": [116, 141], "polici": [116, 169], "report": 116, "vulner": 116, "what": 117, "": [117, 149], "new": [117, 118, 120, 169], "instal": [117, 149], "from": [117, 119, 149, 153], "pypi": 117, "llm": [117, 151], "non": 117, "select": 117, "public": [117, 137, 160], "event": [117, 160], "addit": 117, "commun": 117, "adaptor": [118, 119, 121], "flow": [118, 161], "queri": 118, "background": [118, 137], "ad": 118, "capabl": [118, 164], "implement": [118, 119], "onnxrtadaptor": 118, "add": 119, "an": 119, "list": [119, 142, 168], "need": 119, "yaml": [119, 141, 145], "query_fw_cap": 119, "accord": [119, 120], "tune_cfg": 119, "prepar": [119, 166], "calibr": [119, 136], "fp32": [119, 143], "graph": 119, "run": 119, "iter": 119, "oper": [119, 120], "calcul": 119, "rang": 119, "type": [120, 137, 159], "int4": 120, "few": 120, "line": 120, "chang": [120, 147, 165], "defin": [120, 141], "abil": 120, "specif": 120, "invok": 120, "kernel": 120, "onnx": [122, 149, 161, 162, 170], "runtim": [122, 149, 161, 162, 170], "compress": [127, 164], "inc": 137, "convent": 137, "import": 137, "string": 137, "annot": 137, "comment": 137, "todo": 137, "intern": 137, "interfac": 137, "folder": 137, "structur": 137, "recommend": 137, "v": 137, "set": 137, "json": 137, "dataload": 138, "build": [138, 144, 152], "custom": [138, 152, 169], "distil": [140, 153, 170], "distribut": [141, 169], "infer": 141, "evalu": 141, "1": [141, 144, 147, 153, 170], "pure": 141, "horovodrun": 141, "execut": 141, "releas": [142, 165], "int8": [143, 170], "appendix": 143, "op": 143, "frequent": 144, "ask": 144, "question": 144, "issu": [144, 165], "3": [144, 160], "4": [144, 160], "file": 145, "incompat": [147, 165], "between": 147, "v1": 147, "face": 147, "built": [147, 149, 152], "infrastructur": 148, "prerequisit": 149, "binari": 149, "sourc": 149, "ai": 149, "kit": 149, "system": 149, "requir": 149, "environ": 149, "hpu": 149, "heterogen": 149, "two": 149, "comput": 149, "engin": [149, 167], "mme": 149, "tpc": 149, "cpu": [149, 170], "64": 149, "compat": 149, "processor": 149, "gpu": 149, "xe": 149, "multipl": [149, 157, 170], "vendor": 149, "legal": 150, "inform": 150, "licens": 150, "citat": 150, "trademark": 150, "recip": [151, 161], "larg": [151, 159], "languag": [151, 159], "mxnet": [152, 161, 168], "onnxrt": [152, 168], "migrat": 153, "prune": [153, 159, 170], "orchestr": [153, 158], "dure": [154, 163], "singl": 157, "One": 158, "shot": 158, "network": 159, "pattern": 159, "schedul": 159, "sparsiti": 159, "decai": 159, "regular": 159, "retrain": 159, "free": 159, "spars": 159, "deploy": 159, "hyperparamet": 159, "full": 160, "82": 160, "2024": 160, "2023": 160, "25": 160, "2022": 160, "35": 160, "2021": 160, "15": [160, 170], "2018": 160, "2020": 160, "layer": [162, 167], "wise": 162, "lwq": 162, "turn": 163, "off": 163, "woq": [164, 170], "known": 165, "platform": 166, "benefit": 166, "comparison": 166, "differ": 166, "smoothquant": 167, "enhanc": 167, "entir": 167, "each": 167, "block": 167, "space": 169, "exit": 169, "process": 169, "0": 170, "ptq": 170, "qat": 170, "17": 170, "knowledg": 170, "qdq": 170}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "Classes": [[0, "classes"], [1, "classes"], [3, "classes"], [4, "classes"], [6, "classes"], [7, "classes"], [9, "classes"], [10, "classes"], [12, "classes"], [14, "classes"], [15, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [38, "classes"], [41, "classes"], [45, "classes"], [47, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [91, "classes"], [92, "classes"]], "Functions": [[0, "functions"], [5, "functions"], [6, "functions"], [7, "functions"], [13, "functions"], [14, "functions"], [20, "functions"], [22, "functions"], [29, "functions"], [35, "functions"], [36, "functions"], [38, "functions"], [39, "functions"], [41, "functions"], [42, "functions"], [43, "functions"], [45, "functions"], [46, "functions"], [50, "functions"], [54, "functions"], [56, "functions"], [58, "functions"], [62, "functions"], [70, "functions"], [74, "functions"], [76, "functions"], [77, "functions"], [80, "functions"], [82, "functions"], [83, "functions"], [84, "functions"], [87, "functions"], [88, "functions"], [90, "functions"], [91, "functions"]], "Module Contents": [[0, "module-contents"], [1, "module-contents"], [3, "module-contents"], [4, "module-contents"], [5, "module-contents"], [6, "module-contents"], [7, "module-contents"], [9, "module-contents"], [10, "module-contents"], [12, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "Submodules": [[2, "submodules"], [8, "submodules"], [11, "submodules"], [17, "submodules"], [26, "submodules"], [30, "submodules"], [33, "submodules"], [37, "submodules"], [44, "submodules"], [48, "submodules"], [66, "submodules"], [72, "submodules"], [81, "submodules"], [85, "submodules"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "Subpackages": [[8, "subpackages"], [16, "subpackages"], [31, "subpackages"], [37, "subpackages"], [66, "subpackages"], [85, "subpackages"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "Attributes": [[22, "attributes"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "neural_compressor": [[37, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[77, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[78, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[79, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[80, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[81, "module-neural_compressor.utils.export"]], "neural_compressor.utils.export.qlinear2qdq": [[82, "module-neural_compressor.utils.export.qlinear2qdq"]], "neural_compressor.utils.export.tf2onnx": [[83, "module-neural_compressor.utils.export.tf2onnx"]], "neural_compressor.utils.export.torch2onnx": [[84, "module-neural_compressor.utils.export.torch2onnx"]], "neural_compressor.utils": [[85, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[86, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[87, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[88, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[89, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[90, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[91, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[92, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[93, "module-neural_compressor.version"]], "Dynamic Quantization": [[94, "dynamic-quantization"], [110, "dynamic-quantization"], [115, "dynamic-quantization"]], "Introduction": [[94, "introduction"], [95, "introduction"], [96, "introduction"], [97, "introduction"], [98, "introduction"], [99, "introduction"], [100, "introduction"], [101, "introduction"], [102, "introduction"], [103, "introduction"], [105, "introduction"], [106, "introduction"], [110, "introduction"], [115, "introduction"], [118, "introduction"], [119, "introduction"], [120, "introduction"], [135, "introduction"], [136, "introduction"], [138, "introduction"], [140, "introduction"], [141, "introduction"], [143, "introduction"], [145, "introduction"], [148, "introduction"], [152, "introduction"], [154, "introduction"], [155, "introduction"], [156, "introduction"], [157, "introduction"], [158, "introduction"], [159, "introduction"], [162, "introduction"], [164, "introduction"], [166, "introduction"], [167, "introduction"], [168, "introduction"], [169, "introduction"]], "Getting Started with Dynamic Quantization": [[94, "getting-started-with-dynamic-quantization"]], "Examples": [[94, "examples"], [95, "examples"], [96, "examples"], [99, "examples"], [101, "examples"], [102, "examples"], [115, "examples"], [135, "examples"], [138, "examples"], [140, "examples"], [141, "examples"], [142, "examples"], [143, "examples"], [153, "examples"], [154, "examples"], [155, "examples"], [156, "examples"], [158, "examples"], [159, "examples"], [161, "examples"], [162, "examples"], [164, "examples"]], "Microscaling Quantization": [[95, "microscaling-quantization"], [156, "microscaling-quantization"]], "Get Started with Microscaling Quantization API": [[95, "get-started-with-microscaling-quantization-api"], [156, "get-started-with-microscaling-quantization-api"]], "Reference": [[95, "reference"], [99, "reference"], [110, "reference"], [136, "reference"], [137, "reference"], [156, "reference"], [159, "reference"], [161, "reference"], [164, "reference"], [167, "reference"]], "PyTorch Mixed Precision": [[96, "pytorch-mixed-precision"]], "Mixed Precision Support Matrix": [[96, "mixed-precision-support-matrix"], [154, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[96, "hardware-and-software-requests-for-bf16"], [154, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[96, "hardware-and-software-requests-for-fp16"], [154, "hardware-and-software-requests-for-fp16"]], "Accuracy-driven mixed precision": [[96, "accuracy-driven-mixed-precision"], [154, "accuracy-driven-mixed-precision"]], "Get Started with autotune API": [[96, "get-started-with-autotune-api"]], "PyTorch Smooth Quantization": [[97, "pytorch-smooth-quantization"]], "Usage": [[97, "usage"], [99, "usage"], [102, "usage"], [105, "usage"], [167, "usage"], [169, "usage"], [169, "id2"], [169, "id4"], [169, "id6"], [169, "id8"], [169, "id10"], [169, "id12"], [169, "id14"], [169, "id16"], [169, "id18"], [169, "id20"], [169, "id22"]], "Fixed Alpha": [[97, "fixed-alpha"]], "Specify Quantization Rules": [[97, "specify-quantization-rules"], [98, "specify-quantization-rules"], [99, "specify-quantization-rules"], [101, "specify-quantization-rules"], [161, "specify-quantization-rules"]], "Validated Models": [[97, "validated-models"], [146, "validated-models"], [167, "validated-models"], [170, "validated-models"]], "Supported Framework Matrix": [[97, "supported-framework-matrix"], [167, "supported-framework-matrix"]], "PyTorch Static Quantization": [[98, "pytorch-static-quantization"]], "Get Started": [[98, "get-started"], [99, "get-started"], [101, "get-started"], [106, "get-started"], [115, "get-started"], [161, "get-started"]], "Static Quantization with IPEX Backend": [[98, "static-quantization-with-ipex-backend"]], "Usage Sample with IPEX": [[98, "usage-sample-with-ipex"]], "Model Examples": [[98, "model-examples"]], "Static Quantization with PT2E Backend": [[98, "static-quantization-with-pt2e-backend"]], "Usage Sample with PT2E": [[98, "usage-sample-with-pt2e"]], "Model Examples with PT2E": [[98, "model-examples-with-pt2e"]], "PyTorch Weight Only Quantization": [[99, "pytorch-weight-only-quantization"]], "Supported Matrix": [[99, "supported-matrix"], [100, "supported-matrix"], [105, "supported-matrix"]], "Common arguments": [[99, "common-arguments"]], "RTN": [[99, "rtn"]], "GPTQ": [[99, "gptq"]], "AutoRound": [[99, "autoround"]], "AWQ": [[99, "awq"]], "TEQ": [[99, "teq"]], "HQQ": [[99, "hqq"]], "Saving and Loading": [[99, "saving-and-loading"]], "Efficient Usage on Client-Side": [[99, "efficient-usage-on-client-side"]], "Torch": [[100, "torch"]], "Torch-like APIs": [[100, "torch-like-apis"]], "Quantization APIs": [[100, "quantization-apis"]], "Autotune API": [[100, "autotune-api"]], "Load API": [[100, "load-api"]], "Common Problems": [[100, "common-problems"]], "TensorFlow Quantization": [[101, "tensorflow-quantization"]], "Without Accuracy Aware Tuning": [[101, "without-accuracy-aware-tuning"]], "With Accuracy Aware Tuning": [[101, "with-accuracy-aware-tuning"]], "Smooth Quant": [[102, "smooth-quant"], [167, "smooth-quant"]], "Using a Fixed alpha": [[102, "using-a-fixed-alpha"]], "Determining the alpha through auto-tuning": [[102, "determining-the-alpha-through-auto-tuning"], [167, "determining-the-alpha-through-auto-tuning"]], "TensorFlow": [[103, "tensorflow"], [152, "tensorflow"], [168, "tensorflow"]], "API for TensorFlow": [[103, "api-for-tensorflow"]], "Support Matrix": [[103, "support-matrix"], [136, "support-matrix"]], "Quantization Scheme": [[103, "quantization-scheme"]], "Quantization Approaches": [[103, "quantization-approaches"], [161, "quantization-approaches"]], "Post Training Static Quantization": [[103, "post-training-static-quantization"], [115, "post-training-static-quantization"], [161, "post-training-static-quantization"]], "Smooth Quantization": [[103, "smooth-quantization"], [110, "smooth-quantization"]], "Backend and Device": [[103, "backend-and-device"]], "AutoTune": [[104, "autotune"]], "Overview": [[104, "overview"], [112, "overview"]], "How it Works": [[104, "how-it-works"]], "Working with Autotune": [[104, "working-with-autotune"]], "Working with PyTorch Model": [[104, "working-with-pytorch-model"]], "Working with Tensorflow Model": [[104, "working-with-tensorflow-model"]], "Benchmark": [[105, "benchmark"], [126, "benchmark"], [153, "benchmark"]], "General Use Cases": [[105, "general-use-cases"]], "Dump Throughput and Latency Summary": [[105, "dump-throughput-and-latency-summary"]], "Demo usage": [[105, "demo-usage"]], "Quantization on Client": [[106, "quantization-on-client"]], "Get Default Algorithm Configuration": [[106, "get-default-algorithm-configuration"]], "Optimal Performance and Peak Memory Usage": [[106, "optimal-performance-and-peak-memory-usage"]], "Design": [[107, "design"], [139, "design"], [169, "design"], [169, "id1"], [169, "id3"], [169, "id5"], [169, "id7"], [169, "id9"], [169, "id11"], [169, "id13"], [169, "id15"], [169, "id17"], [169, "id19"], [169, "id21"]], "Architecture": [[107, "architecture"], [139, "architecture"], [148, "architecture"]], "Workflows": [[107, "workflows"]], "Getting Started": [[108, "getting-started"], [117, "getting-started"], [146, "getting-started"]], "Quick Samples": [[108, "quick-samples"], [146, "quick-samples"]], "Feature Matrix": [[108, "feature-matrix"]], "Quantization": [[110, "quantization"], [132, "quantization"], [161, "quantization"]], "Quantization Fundamentals": [[110, "quantization-fundamentals"], [161, "quantization-fundamentals"], [167, "quantization-fundamentals"]], "Symmetric & Asymmetric": [[110, "symmetric-asymmetric"]], "Quantization Scheme in TensorFlow": [[110, "quantization-scheme-in-tensorflow"], [161, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[110, "quantization-scheme-in-pytorch"], [161, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[110, "quantization-scheme-in-ipex"], [161, "quantization-scheme-in-ipex"]], "Per-tensor & Per-channel": [[110, "per-tensor-per-channel"], [167, "per-tensor-per-channel"]], "Per-tensor example": [[110, "per-tensor-example"], [167, "per-tensor-example"]], "Per-channel example": [[110, "per-channel-example"], [167, "per-channel-example"]], "Matmul quantization example": [[110, "matmul-quantization-example"], [167, "matmul-quantization-example"]], "Static Quantization": [[110, "static-quantization"]], "Per-channel limitation": [[110, "per-channel-limitation"], [167, "per-channel-limitation"]], "Weight Only Quantization": [[110, "weight-only-quantization"]], "Quantization Aware Training": [[110, "quantization-aware-training"], [153, "quantization-aware-training"], [161, "quantization-aware-training"], [161, "id1"]], "Accuracy Aware Tuning": [[110, "accuracy-aware-tuning"], [161, "accuracy-aware-tuning"]], "Intel\u00ae Neural Compressor Documentation": [[111, "intel-neural-compressor-documentation"], [171, "intel-neural-compressor-documentation"]], "Sections": [[111, "sections"], [171, "sections"]], "2.X API User Guide": [[112, "x-api-user-guide"]], "Python-based APIs": [[112, "python-based-apis"]], "Advanced Topics": [[112, "advanced-topics"]], "Contributor Covenant Code of Conduct": [[113, "contributor-covenant-code-of-conduct"], [114, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[113, "our-pledge"]], "Our Standards": [[113, "our-standards"]], "Our Responsibilities": [[113, "our-responsibilities"]], "Scope": [[113, "scope"]], "Enforcement": [[113, "enforcement"]], "Attribution": [[113, "attribution"]], "Contribution Guidelines": [[114, "contribution-guidelines"]], "Create Pull Request": [[114, "create-pull-request"]], "Step-by-Step guidelines": [[114, "step-by-step-guidelines"]], "Pull Request Checklist": [[114, "pull-request-checklist"]], "Pull Request Template": [[114, "pull-request-template"]], "Pull Request Acceptance Criteria": [[114, "pull-request-acceptance-criteria"]], "Pull Request Status Checks Overview": [[114, "pull-request-status-checks-overview"]], "Support": [[114, "support"]], "FX": [[115, "fx"]], "FX Mode Support Matrix in Neural Compressor": [[115, "fx-mode-support-matrix-in-neural-compressor"]], "Post Training Dynamic Quantization": [[115, "post-training-dynamic-quantization"], [161, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[115, "quantization-aware-training"]], "Note": [[115, "note"]], "Details": [[115, "details"]], "Common Problem": [[115, "common-problem"]], "Static Quantization & Quantization Aware Training": [[115, "static-quantization-quantization-aware-training"]], "Security Policy": [[116, "security-policy"]], "Report a Vulnerability": [[116, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[117, "intel-neural-compressor"]], "What\u2019s New": [[117, "what-s-new"]], "Installation": [[117, "installation"], [149, "installation"], [149, "id1"]], "Install from pypi": [[117, "install-from-pypi"]], "Weight-Only Quantization (LLMs)": [[117, "weight-only-quantization-llms"]], "Static Quantization (Non-LLMs)": [[117, "static-quantization-non-llms"]], "Documentation": [[117, "documentation"]], "Selected Publications/Events": [[117, "selected-publications-events"]], "Additional Content": [[117, "additional-content"]], "Communication": [[117, "communication"]], "Adaptor": [[118, "adaptor"], [121, "adaptor"]], "Adaptor Support Matrix": [[118, "adaptor-support-matrix"]], "Working Flow": [[118, "working-flow"], [161, "working-flow"]], "Get Started with Adaptor API": [[118, "get-started-with-adaptor-api"]], "Query API": [[118, "query-api"]], "Background": [[118, "background"], [137, "background"]], "Query API Introduction": [[118, "query-api-introduction"]], "Example of Adding a New Backend Support": [[118, "example-of-adding-a-new-backend-support"]], "Capability": [[118, "capability"]], "Implement ONNXRTAdaptor Class": [[118, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[119, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[119, "api-list-that-need-to-implement"]], "Design the framework YAML": [[119, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[119, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[119, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[119, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[119, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[119, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[120, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[120, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[120, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[120, "use-the-new-data-type"]], "Summary": [[120, "summary"]], "ONNX Runtime": [[122, "onnx-runtime"]], "Torch Utils": [[123, "torch-utils"]], "API Document Example": [[124, "api-document-example"]], "APIs": [[125, "apis"]], "Compression": [[127, "compression"]], "Config": [[128, "config"]], "Mix Precision": [[129, "mix-precision"], [153, "mix-precision"]], "Model": [[130, "model"], [155, "model"]], "Objective": [[131, "objective"], [157, "objective"]], "Strategy": [[133, "strategy"]], "Training": [[134, "training"]], "Benchmarking": [[135, "benchmarking"]], "Benchmark Support Matrix": [[135, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[135, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[136, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[136, "calibration-algorithms"]], "INC Coding Conventions": [[137, "inc-coding-conventions"]], "Rules": [[137, "rules"]], "Imports": [[137, "imports"]], "Strings": [[137, "strings"]], "Logger": [[137, "logger"]], "Type Annotations": [[137, "type-annotations"]], "Comments": [[137, "comments"]], "TODO Comments": [[137, "todo-comments"]], "Public and Internal Interfaces": [[137, "public-and-internal-interfaces"]], "Folder structure": [[137, "folder-structure"]], "Recommend VS Code settings.json": [[137, "recommend-vs-code-settings-json"]], "DataLoader": [[138, "dataloader"]], "Supported Framework Dataloader Matrix": [[138, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[138, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[138, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[138, "build-custom-dataloader-with-python-api"]], "Workflow": [[139, "workflow"]], "Distillation for Quantization": [[140, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[140, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[140, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[141, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[141, "supported-feature-matrix"], [145, "supported-feature-matrix"], [148, "supported-feature-matrix"], [161, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[141, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[141, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[141, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[141, "horovodrun-execution"]], "Security": [[141, "security"]], "PyTorch Examples:": [[141, "pytorch-examples"]], "TensorFlow Examples:": [[141, "tensorflow-examples"]], "Example List": [[142, "example-list"]], "Release Data": [[142, "release-data"]], "Export": [[143, "export"]], "Supported Framework Model Matrix": [[143, "supported-framework-model-matrix"], [155, "supported-framework-model-matrix"], [156, "supported-framework-model-matrix"], [162, "supported-framework-model-matrix"], [164, "supported-framework-model-matrix"]], "PyTorch Model": [[143, "pytorch-model"]], "FP32 Model Export": [[143, "fp32-model-export"], [143, "id1"]], "INT8 Model Export": [[143, "int8-model-export"], [143, "id2"]], "Tensorflow Model": [[143, "tensorflow-model"]], "Appendix": [[143, "appendix"]], "Supported quantized ops": [[143, "supported-quantized-ops"]], "Frequently Asked Questions": [[144, "frequently-asked-questions"]], "Common Build Issues": [[144, "common-build-issues"]], "Issue 1:": [[144, "issue-1"]], "Issue 2:": [[144, "issue-2"]], "Issue 3:": [[144, "issue-3"]], "Issue 4:": [[144, "issue-4"]], "Framework YAML Configuration Files": [[145, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[145, "get-started-with-framework-yaml-files"]], "Quantization with Python API": [[146, "quantization-with-python-api"]], "Incompatible changes between v1.2 and v1.1": [[147, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[147, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[147, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[148, "infrastructure-of-intel-neural-compressor"]], "Prerequisites": [[149, "prerequisites"]], "Install from Binary": [[149, "install-from-binary"]], "Install from Source": [[149, "install-from-source"]], "Install from AI Kit": [[149, "install-from-ai-kit"]], "System Requirements": [[149, "system-requirements"]], "Validated Hardware Environment": [[149, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports HPUs based on heterogeneous architecture with two compute engines (MME and TPC):": [[149, "intel-neural-compressor-supports-hpus-based-on-heterogeneous-architecture-with-two-compute-engines-mme-and-tpc"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[149, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[149, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[149, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[149, "validated-software-environment"]], "Legal Information": [[150, "legal-information"]], "License": [[150, "license"]], "Citation": [[150, "citation"]], "Trademarks": [[150, "trademarks"]], "LLMs Quantization Recipes": [[151, "llms-quantization-recipes"]], "Large Language Models Recipes": [[151, "large-language-models-recipes"]], "Large Language Models Accuracy": [[151, "large-language-models-accuracy"]], "Metrics": [[152, "metrics"]], "Supported Built-in Metric Matrix": [[152, "supported-built-in-metric-matrix"]], "PyTorch": [[152, "pytorch"], [163, "pytorch"]], "MXNet": [[152, "mxnet"], [168, "mxnet"]], "ONNXRT": [[152, "onnxrt"], [168, "onnxrt"]], "Get Started with Metric": [[152, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[152, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[152, "build-custom-metric-with-python-api"]], "Example": [[152, "example"], [157, "example"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[153, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[153, "model-quantization"]], "Post-training Quantization": [[153, "post-training-quantization"]], "Pruning": [[153, "pruning"], [159, "pruning"]], "Distillation": [[153, "distillation"]], "Orchestration": [[153, "orchestration"]], "Mixed Precision": [[154, "mixed-precision"]], "During quantization mixed precision": [[154, "during-quantization-mixed-precision"]], "Get Started with Mixed Precision API": [[154, "get-started-with-mixed-precision-api"]], "Single Objective": [[157, "single-objective"]], "Multiple Objectives": [[157, "multiple-objectives"]], "Objective Support Matrix": [[157, "objective-support-matrix"]], "Get Started with Objective API": [[157, "get-started-with-objective-api"]], "Config Single Objective": [[157, "config-single-objective"]], "Config Multiple Objectives": [[157, "config-multiple-objectives"]], "Optimization Orchestration": [[158, "optimization-orchestration"]], "One-shot": [[158, "one-shot"]], "Orchestration Support Matrix": [[158, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[158, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[159, "neural-network-pruning"]], "Pruning Patterns": [[159, "pruning-patterns"]], "Pruning Criteria": [[159, "pruning-criteria"]], "Pruning Types": [[159, "pruning-types"]], "Pruning Schedules": [[159, "pruning-schedules"]], "Pruning Scope": [[159, "pruning-scope"]], "Sparsity Decay Types": [[159, "sparsity-decay-types"]], "Regularization": [[159, "regularization"]], "Large Language Model Pruning": [[159, "large-language-model-pruning"]], "Pruning Support Matrix": [[159, "pruning-support-matrix"]], "Get Started with Pruning API": [[159, "get-started-with-pruning-api"]], "Training-aware pruning API": [[159, "training-aware-pruning-api"]], "Retrain-free Pruning API": [[159, "retrain-free-pruning-api"]], "Sparse Model Deployment": [[159, "sparse-model-deployment"]], "Pruning with Hyperparameter Optimization": [[159, "pruning-with-hyperparameter-optimization"]], "Full Publications/Events (82)": [[160, "full-publications-events-82"]], "2024 (3)": [[160, "id1"]], "2023 (25)": [[160, "id2"]], "2022 (35)": [[160, "id3"]], "2021 (15)": [[160, "id4"]], "2018 - 2020 (4)": [[160, "id5"]], "Quantization Introduction": [[161, "quantization-introduction"]], "Quantization Support Matrix": [[161, "quantization-support-matrix"]], "Quantization Scheme in MXNet": [[161, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[161, "quantization-scheme-in-onnx-runtime"]], "Post Training Quantization": [[161, "post-training-quantization"]], "Specify Quantization Recipes": [[161, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[161, "specify-quantization-backend-and-device"]], "Layer Wise Quantization (LWQ)": [[162, "layer-wise-quantization-lwq"]], "PyTorch framework example": [[162, "pytorch-framework-example"]], "ONNX Runtime framework example": [[162, "onnx-runtime-framework-example"]], "Turn OFF Auto Mixed Precision during Quantization": [[163, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[163, "tensorflow"]], "Weight Only Quantization (WOQ)": [[164, "weight-only-quantization-woq"]], "Quantization Capability": [[164, "quantization-capability"]], "Export Compressed Model": [[164, "export-compressed-model"]], "User Code Example": [[164, "user-code-example"]], "WOQ Algorithms Tuning": [[164, "woq-algorithms-tuning"]], "User code example": [[164, "id1"]], "Release": [[165, "release"]], "Release Notes": [[165, "release-notes"]], "Known Issues": [[165, "known-issues"]], "Incompatible Changes": [[165, "incompatible-changes"]], "SigOpt Strategy": [[166, "sigopt-strategy"]], "Preparation": [[166, "preparation"]], "SigOpt Platform": [[166, "sigopt-platform"]], "Neural Compressor Configuration": [[166, "neural-compressor-configuration"]], "Performance": [[166, "performance"]], "Benefit of SigOpt Strategy": [[166, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[166, "performance-comparison-of-different-strategies"]], "SmoothQuant and Our Enhancement": [[167, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[167, "smoothquant"]], "Our enhancement:": [[167, "our-enhancement"]], "Algorithm: Auto-tuning of $\\alpha$.": [[167, "algorithm-auto-tuning-of-alpha"]], "Engineering": [[167, "engineering"]], "Using a fixed alpha": [[167, "using-a-fixed-alpha"]], "Auto-tune the alpha for the entire model": [[167, "auto-tune-the-alpha-for-the-entire-model"]], "Auto-tune the alpha for each layer/block": [[167, "auto-tune-the-alpha-for-each-layer-block"]], "Transform": [[168, "transform"]], "Transform Support List": [[168, "transform-support-list"]], "Pytorch": [[168, "pytorch"]], "Tuning Strategies": [[169, "tuning-strategies"]], "Strategy Design": [[169, "strategy-design"]], "Tuning Space": [[169, "tuning-space"]], "Exit Policy": [[169, "exit-policy"]], "Accuracy Criteria": [[169, "accuracy-criteria"]], "Tuning Process": [[169, "tuning-process"]], "Tuning Algorithms": [[169, "tuning-algorithms"]], "Auto": [[169, "auto"]], "Conservative Tuning": [[169, "conservative-tuning"]], "Basic": [[169, "basic"]], "MSE": [[169, "mse"]], "MSE_V2": [[169, "mse-v2"]], "HAWQ_V2": [[169, "hawq-v2"]], "Bayesian": [[169, "bayesian"]], "Exhaustive": [[169, "exhaustive"]], "Random": [[169, "random"]], "SigOpt": [[169, "sigopt"]], "TPE": [[169, "tpe"]], "Distributed Tuning": [[169, "distributed-tuning"]], "Customize a New Tuning Strategy": [[169, "customize-a-new-tuning-strategy"]], "Validated Quantization Examples": [[170, "validated-quantization-examples"]], "TensorFlow Models with TensorFlow 2.15.0": [[170, "tensorflow-models-with-tensorflow-2-15-0"]], "PyTorch Models with Torch 2.2.1+cpu in PTQ Mode": [[170, "pytorch-models-with-torch-2-2-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.2.1+cpu in QAT Mode": [[170, "pytorch-models-with-torch-2-2-1-cpu-in-qat-mode"]], "PyTorch Models with Torch 2.0.1+cpu in WOQ Mode": [[170, "pytorch-models-with-torch-2-0-1-cpu-in-woq-mode"]], "ONNX Models with ONNX Runtime 1.17.1": [[170, "onnx-models-with-onnx-runtime-1-17-1"]], "ONNX Models with ONNX Runtime 1.15.0 in WOQ Mode": [[170, "onnx-models-with-onnx-runtime-1-15-0-in-woq-mode"]], "Validated Pruning Examples": [[170, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[170, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[170, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"algorithms (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[0, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "module": [[0, "module-neural_compressor.algorithm.algorithm"], [1, "module-neural_compressor.algorithm.fast_bias_correction"], [2, "module-neural_compressor.algorithm"], [3, "module-neural_compressor.algorithm.smooth_quant"], [4, "module-neural_compressor.algorithm.weight_correction"], [5, "module-neural_compressor.benchmark"], [6, "module-neural_compressor.common.base_config"], [7, "module-neural_compressor.common.base_tuning"], [8, "module-neural_compressor.common"], [9, "module-neural_compressor.common.tuning_param"], [10, "module-neural_compressor.common.utils.constants"], [11, "module-neural_compressor.common.utils"], [12, "module-neural_compressor.common.utils.logger"], [13, "module-neural_compressor.common.utils.save_load"], [14, "module-neural_compressor.common.utils.utility"], [15, "module-neural_compressor.config"], [16, "module-neural_compressor.contrib"], [17, "module-neural_compressor.contrib.strategy"], [18, "module-neural_compressor.contrib.strategy.sigopt"], [19, "module-neural_compressor.contrib.strategy.tpe"], [20, "module-neural_compressor.data.datasets.bert_dataset"], [21, "module-neural_compressor.data.datasets.coco_dataset"], [22, "module-neural_compressor.data.datasets.dataset"], [23, "module-neural_compressor.data.datasets.dummy_dataset"], [24, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [25, "module-neural_compressor.data.datasets.imagenet_dataset"], [26, "module-neural_compressor.data.datasets"], [27, "module-neural_compressor.data.datasets.style_transfer_dataset"], [28, "module-neural_compressor.data.filters.coco_filter"], [29, "module-neural_compressor.data.filters.filter"], [30, "module-neural_compressor.data.filters"], [31, "module-neural_compressor.data"], [32, "module-neural_compressor.data.transforms.imagenet_transform"], [33, "module-neural_compressor.data.transforms"], [34, "module-neural_compressor.data.transforms.postprocess"], [35, "module-neural_compressor.data.transforms.tokenization"], [36, "module-neural_compressor.data.transforms.transform"], [37, "module-neural_compressor"], [38, "module-neural_compressor.metric.bleu"], [39, "module-neural_compressor.metric.bleu_util"], [40, "module-neural_compressor.metric.coco_label_map"], [41, "module-neural_compressor.metric.coco_tools"], [42, "module-neural_compressor.metric.evaluate_squad"], [43, "module-neural_compressor.metric.f1"], [44, "module-neural_compressor.metric"], [45, "module-neural_compressor.metric.metric"], [46, "module-neural_compressor.mix_precision"], [47, "module-neural_compressor.model.base_model"], [48, "module-neural_compressor.model"], [49, "module-neural_compressor.model.keras_model"], [50, "module-neural_compressor.model.model"], [51, "module-neural_compressor.model.mxnet_model"], [52, "module-neural_compressor.model.nets_factory"], [53, "module-neural_compressor.model.onnx_model"], [54, "module-neural_compressor.model.tensorflow_model"], [55, "module-neural_compressor.model.torch_model"], [56, "module-neural_compressor.objective"], [57, "module-neural_compressor.profiling"], [58, "module-neural_compressor.quantization"], [59, "module-neural_compressor.strategy.auto"], [60, "module-neural_compressor.strategy.auto_mixed_precision"], [61, "module-neural_compressor.strategy.basic"], [62, "module-neural_compressor.strategy.bayesian"], [63, "module-neural_compressor.strategy.conservative"], [64, "module-neural_compressor.strategy.exhaustive"], [65, "module-neural_compressor.strategy.hawq_v2"], [66, "module-neural_compressor.strategy"], [67, "module-neural_compressor.strategy.mse"], [68, "module-neural_compressor.strategy.mse_v2"], [69, "module-neural_compressor.strategy.random"], [70, "module-neural_compressor.strategy.strategy"], [71, "module-neural_compressor.strategy.utils.constant"], [72, "module-neural_compressor.strategy.utils"], [73, "module-neural_compressor.strategy.utils.tuning_sampler"], [74, "module-neural_compressor.strategy.utils.tuning_space"], [75, "module-neural_compressor.strategy.utils.tuning_structs"], [76, "module-neural_compressor.strategy.utils.utility"], [77, "module-neural_compressor.training"], [78, "module-neural_compressor.utils.collect_layer_histogram"], [79, "module-neural_compressor.utils.constant"], [80, "module-neural_compressor.utils.create_obj_from_config"], [81, "module-neural_compressor.utils.export"], [82, "module-neural_compressor.utils.export.qlinear2qdq"], [83, "module-neural_compressor.utils.export.tf2onnx"], [84, "module-neural_compressor.utils.export.torch2onnx"], [85, "module-neural_compressor.utils"], [86, "module-neural_compressor.utils.kl_divergence"], [87, "module-neural_compressor.utils.load_huggingface"], [88, "module-neural_compressor.utils.logger"], [89, "module-neural_compressor.utils.options"], [90, "module-neural_compressor.utils.pytorch"], [91, "module-neural_compressor.utils.utility"], [92, "module-neural_compressor.utils.weights_details"], [93, "module-neural_compressor.version"]], "neural_compressor.algorithm.algorithm": [[0, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[1, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[1, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[2, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[3, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[3, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[4, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[4, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[5, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[5, "neural_compressor.benchmark.summary_benchmark"]], "baseconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.BaseConfig"]], "composableconfig (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ComposableConfig"]], "configregistry (class in neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.ConfigRegistry"]], "config_list (neural_compressor.common.base_config.composableconfig attribute)": [[6, "neural_compressor.common.base_config.ComposableConfig.config_list"]], "get_all_config_set_from_config_registry() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.get_all_config_set_from_config_registry"]], "name (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.name"]], "neural_compressor.common.base_config": [[6, "module-neural_compressor.common.base_config"]], "params_list (neural_compressor.common.base_config.baseconfig attribute)": [[6, "neural_compressor.common.base_config.BaseConfig.params_list"]], "register_config() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_config"]], "register_supported_configs_for_fwk() (in module neural_compressor.common.base_config)": [[6, "neural_compressor.common.base_config.register_supported_configs_for_fwk"]], "configloader (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigLoader"]], "configset (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.ConfigSet"]], "evaluationfuncwrapper (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.EvaluationFuncWrapper"]], "evaluator (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Evaluator"]], "sampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.Sampler"]], "sequentialsampler (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.SequentialSampler"]], "tuningconfig (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningConfig"]], "tuningmonitor (class in neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.TuningMonitor"]], "config_list (neural_compressor.common.base_tuning.configset attribute)": [[7, "neural_compressor.common.base_tuning.ConfigSet.config_list"]], "init_tuning() (in module neural_compressor.common.base_tuning)": [[7, "neural_compressor.common.base_tuning.init_tuning"]], "neural_compressor.common.base_tuning": [[7, "module-neural_compressor.common.base_tuning"]], "neural_compressor.common": [[8, "module-neural_compressor.common"]], "model_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.MODEL_LEVEL"]], "op_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_LEVEL"]], "op_type_level (neural_compressor.common.tuning_param.paramlevel attribute)": [[9, "neural_compressor.common.tuning_param.ParamLevel.OP_TYPE_LEVEL"]], "paramlevel (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.ParamLevel"]], "tuningparam (class in neural_compressor.common.tuning_param)": [[9, "neural_compressor.common.tuning_param.TuningParam"]], "neural_compressor.common.tuning_param": [[9, "module-neural_compressor.common.tuning_param"]], "mode (class in neural_compressor.common.utils.constants)": [[10, "neural_compressor.common.utils.constants.Mode"]], "neural_compressor.common.utils.constants": [[10, "module-neural_compressor.common.utils.constants"]], "neural_compressor.common.utils": [[11, "module-neural_compressor.common.utils"]], "logger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.Logger"]], "tuninglogger (class in neural_compressor.common.utils.logger)": [[12, "neural_compressor.common.utils.logger.TuningLogger"]], "neural_compressor.common.utils.logger": [[12, "module-neural_compressor.common.utils.logger"]], "load_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.load_config_mapping"]], "neural_compressor.common.utils.save_load": [[13, "module-neural_compressor.common.utils.save_load"]], "save_config_mapping() (in module neural_compressor.common.utils.save_load)": [[13, "neural_compressor.common.utils.save_load.save_config_mapping"]], "cpuinfo (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.CpuInfo"]], "lazyimport (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.LazyImport"]], "processortype (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.ProcessorType"]], "statistics (class in neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.Statistics"]], "call_counter() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.call_counter"]], "detect_processor_type_based_on_hw() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.detect_processor_type_based_on_hw"]], "dump_elapsed_time() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.dump_elapsed_time"]], "get_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.get_workspace"]], "log_process() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.log_process"]], "neural_compressor.common.utils.utility": [[14, "module-neural_compressor.common.utils.utility"]], "set_random_seed() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.set_workspace"]], "singleton() (in module neural_compressor.common.utils.utility)": [[14, "neural_compressor.common.utils.utility.singleton"]], "accuracycriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[15, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ExportConfig"]], "hpoconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.HPOConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[15, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[15, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[15, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[15, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[15, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[15, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[15, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[15, "module-neural_compressor.config"]], "neural_compressor.contrib": [[16, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[17, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[18, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[18, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[19, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[19, "module-neural_compressor.contrib.strategy.tpe"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[20, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[20, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[21, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[21, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[22, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[22, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[23, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[23, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[24, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[24, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[25, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[25, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[26, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[27, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[27, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[28, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[28, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[29, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[29, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[30, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[31, "module-neural_compressor.data"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[32, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[32, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[33, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[34, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[34, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[35, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[35, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TRANSFORMS"], [36, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[36, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[36, "neural_compressor.data.transforms.transform.transform_registry"]], "neural_compressor": [[37, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[38, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[38, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[38, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[38, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[39, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[39, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[40, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[41, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[41, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[41, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[42, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[42, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[43, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[43, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[44, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[45, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[45, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[45, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[45, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[45, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[45, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[45, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[45, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[45, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[45, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[45, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[45, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[45, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[45, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[46, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[46, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[47, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[47, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[48, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[49, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[49, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[50, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[50, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[50, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[51, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[51, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[52, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[52, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[53, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[53, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowllmmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowLLMModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[54, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.slim_session"]], "try_loading_keras() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.try_loading_keras"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[54, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[55, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[55, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[56, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[56, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[56, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[56, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[57, "module-neural_compressor.profiling"]], "fit() (in module neural_compressor.quantization)": [[58, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[58, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[59, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[59, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[60, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[60, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[61, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[61, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[62, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[62, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[63, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[63, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[64, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[64, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[65, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[65, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[66, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[67, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[67, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[68, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[68, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[69, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[69, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[70, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[70, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[71, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[72, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "weightonlyquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[73, "neural_compressor.strategy.utils.tuning_sampler.WeightOnlyQuantSampler"]], "neural_compressor.strategy.utils.tuning_sampler": [[73, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[74, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[74, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[75, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[75, "module-neural_compressor.strategy.utils.tuning_structs"]], "classregister (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.ClassRegister"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[76, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[76, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[77, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[77, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[77, "neural_compressor.training.fit"]], "neural_compressor.training": [[77, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[77, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[78, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[78, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[79, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[80, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[80, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils.export": [[81, "module-neural_compressor.utils.export"]], "check_model() (in module neural_compressor.utils.export.qlinear2qdq)": [[82, "neural_compressor.utils.export.qlinear2qdq.check_model"]], "neural_compressor.utils.export.qlinear2qdq": [[82, "module-neural_compressor.utils.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.utils.export.qlinear2qdq)": [[82, "neural_compressor.utils.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.utils.export.tf2onnx": [[83, "module-neural_compressor.utils.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[83, "neural_compressor.utils.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.utils.export.tf2onnx)": [[83, "neural_compressor.utils.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.utils.export.torch2onnx": [[84, "module-neural_compressor.utils.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.utils.export.torch2onnx)": [[84, "neural_compressor.utils.export.torch2onnx.torch_to_int8_onnx"]], "neural_compressor.utils": [[85, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[86, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[86, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[87, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "export_compressed_model() (in module neural_compressor.utils.load_huggingface)": [[87, "neural_compressor.utils.load_huggingface.export_compressed_model"]], "neural_compressor.utils.load_huggingface": [[87, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[87, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[88, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[88, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[89, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[89, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[90, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[90, "neural_compressor.utils.pytorch.load"]], "load_weight_only() (in module neural_compressor.utils.pytorch)": [[90, "neural_compressor.utils.pytorch.load_weight_only"]], "neural_compressor.utils.pytorch": [[90, "module-neural_compressor.utils.pytorch"]], "recover_model_from_json() (in module neural_compressor.utils.pytorch)": [[90, "neural_compressor.utils.pytorch.recover_model_from_json"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.calculate_mse"]], "check_key_exist() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.check_key_exist"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.compute_sparsity"]], "deep_get() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.deep_get"]], "deep_set() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.deep_set"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[91, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[91, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[92, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[92, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[92, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[93, "module-neural_compressor.version"]]}})